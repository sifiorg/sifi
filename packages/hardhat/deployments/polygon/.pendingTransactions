{
  "0xed75f778428e413b7102b4f2bea94fe2792f88073ac152683d281ba35520fecd": {
    "name": "StarVault",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "StarVault",
      "sourceName": "contracts/facets/StarVault.sol",
      "abi": [
        {
          "inputs": [],
          "name": "EthTransferFailed",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "available",
              "type": "uint256"
            }
          ],
          "name": "InsufficientOwnerBalance",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "partner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "Withdraw",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "ownerWithdraw",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "partner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "partnerTokenBalance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "partnerWithdraw",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405234801561001057600080fd5b50610b8b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063044edc3c1461004657806378f91e371461005b578063b85eaaef14610080575b600080fd5b6100596100543660046109b0565b610093565b005b61006e6100693660046109f2565b610324565b60405190815260200160405180910390f35b61005961008e366004610a2b565b61037d565b61009b610539565b73ffffffffffffffffffffffffffffffffffffffff831660008181527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc9160205260408120547f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc90929091901561019d576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8716906370a0823190602401602060405180830381865afa158015610174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101989190610a4f565b61019f565b475b905060006101ad8383610a68565b9050808611156101f1576040517f366cb4bc000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b60405186815273ffffffffffffffffffffffffffffffffffffffff8816906000907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a373ffffffffffffffffffffffffffffffffffffffff87166102fa5760008573ffffffffffffffffffffffffffffffffffffffff168760405160006040518083038185875af1925050503d80600081146102b4576040519150601f19603f3d011682016040523d82523d6000602084013e6102b9565b606091505b50509050806102f4576040517f6d963f8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061031b565b61031b73ffffffffffffffffffffffffffffffffffffffff88168688610604565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff82811660009081527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc9060209081526040808320938516835292905220545b92915050565b3360009081527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc906020818152604080842073ffffffffffffffffffffffffffffffffffffffff86168552909152909120548015610534573360009081526020838152604080832073ffffffffffffffffffffffffffffffffffffffff871684528252808320839055600185019091528120805483929061041e908490610a68565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff84169033907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a373ffffffffffffffffffffffffffffffffffffffff831661051357604051600090339083908381818185875af1925050503d80600081146104cd576040519150601f19603f3d011682016040523d82523d6000602084013e6104d2565b606091505b505090508061050d576040517f6d963f8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b61053473ffffffffffffffffffffffffffffffffffffffff84163383610604565b505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6003015473ffffffffffffffffffffffffffffffffffffffff163314610602576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016101e8565b565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610534928692916000916106cf91851690849061077c565b90508051600014806106f05750808060200190518101906106f09190610aa2565b610534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101e8565b606061078b8484600085610793565b949350505050565b606082471015610825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101e8565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161084e9190610ae8565b60006040518083038185875af1925050503d806000811461088b576040519150601f19603f3d011682016040523d82523d6000602084013e610890565b606091505b50915091506108a1878383876108ac565b979650505050505050565b6060831561094257825160000361093b5773ffffffffffffffffffffffffffffffffffffffff85163b61093b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101e8565b508161078b565b61078b83838151156109575781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e89190610b04565b73ffffffffffffffffffffffffffffffffffffffff811681146109ad57600080fd5b50565b6000806000606084860312156109c557600080fd5b83356109d08161098b565b92506020840135915060408401356109e78161098b565b809150509250925092565b60008060408385031215610a0557600080fd5b8235610a108161098b565b91506020830135610a208161098b565b809150509250929050565b600060208284031215610a3d57600080fd5b8135610a488161098b565b9392505050565b600060208284031215610a6157600080fd5b5051919050565b81810381811115610377577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610ab457600080fd5b81518015158114610a4857600080fd5b60005b83811015610adf578181015183820152602001610ac7565b50506000910152565b60008251610afa818460208701610ac4565b9190910192915050565b6020815260008251806020840152610b23816040850160208701610ac4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220ead75095d3bbe2ebdcba0053dc3c0e5df5bd8311a059c54e3500ba9823841ff364736f6c63430008130033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063044edc3c1461004657806378f91e371461005b578063b85eaaef14610080575b600080fd5b6100596100543660046109b0565b610093565b005b61006e6100693660046109f2565b610324565b60405190815260200160405180910390f35b61005961008e366004610a2b565b61037d565b61009b610539565b73ffffffffffffffffffffffffffffffffffffffff831660008181527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc9160205260408120547f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc90929091901561019d576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8716906370a0823190602401602060405180830381865afa158015610174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101989190610a4f565b61019f565b475b905060006101ad8383610a68565b9050808611156101f1576040517f366cb4bc000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b60405186815273ffffffffffffffffffffffffffffffffffffffff8816906000907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a373ffffffffffffffffffffffffffffffffffffffff87166102fa5760008573ffffffffffffffffffffffffffffffffffffffff168760405160006040518083038185875af1925050503d80600081146102b4576040519150601f19603f3d011682016040523d82523d6000602084013e6102b9565b606091505b50509050806102f4576040517f6d963f8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061031b565b61031b73ffffffffffffffffffffffffffffffffffffffff88168688610604565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff82811660009081527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc9060209081526040808320938516835292905220545b92915050565b3360009081527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc906020818152604080842073ffffffffffffffffffffffffffffffffffffffff86168552909152909120548015610534573360009081526020838152604080832073ffffffffffffffffffffffffffffffffffffffff871684528252808320839055600185019091528120805483929061041e908490610a68565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff84169033907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a373ffffffffffffffffffffffffffffffffffffffff831661051357604051600090339083908381818185875af1925050503d80600081146104cd576040519150601f19603f3d011682016040523d82523d6000602084013e6104d2565b606091505b505090508061050d576040517f6d963f8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b61053473ffffffffffffffffffffffffffffffffffffffff84163383610604565b505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6003015473ffffffffffffffffffffffffffffffffffffffff163314610602576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016101e8565b565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610534928692916000916106cf91851690849061077c565b90508051600014806106f05750808060200190518101906106f09190610aa2565b610534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101e8565b606061078b8484600085610793565b949350505050565b606082471015610825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101e8565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161084e9190610ae8565b60006040518083038185875af1925050503d806000811461088b576040519150601f19603f3d011682016040523d82523d6000602084013e610890565b606091505b50915091506108a1878383876108ac565b979650505050505050565b6060831561094257825160000361093b5773ffffffffffffffffffffffffffffffffffffffff85163b61093b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101e8565b508161078b565b61078b83838151156109575781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e89190610b04565b73ffffffffffffffffffffffffffffffffffffffff811681146109ad57600080fd5b50565b6000806000606084860312156109c557600080fd5b83356109d08161098b565b92506020840135915060408401356109e78161098b565b809150509250925092565b60008060408385031215610a0557600080fd5b8235610a108161098b565b91506020830135610a208161098b565b809150509250929050565b600060208284031215610a3d57600080fd5b8135610a488161098b565b9392505050565b600060208284031215610a6157600080fd5b5051919050565b81810381811115610377577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610ab457600080fd5b81518015158114610a4857600080fd5b60005b83811015610adf578181015183820152602001610ac7565b50506000910152565b60008251610afa818460208701610ac4565b9190910192915050565b6020815260008251806020840152610b23816040850160208701610ac4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220ead75095d3bbe2ebdcba0053dc3c0e5df5bd8311a059c54e3500ba9823841ff364736f6c63430008130033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {},
          "generatedSources": [],
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50610b8b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063044edc3c1461004657806378f91e371461005b578063b85eaaef14610080575b600080fd5b6100596100543660046109b0565b610093565b005b61006e6100693660046109f2565b610324565b60405190815260200160405180910390f35b61005961008e366004610a2b565b61037d565b61009b610539565b73ffffffffffffffffffffffffffffffffffffffff831660008181527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc9160205260408120547f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc90929091901561019d576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8716906370a0823190602401602060405180830381865afa158015610174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101989190610a4f565b61019f565b475b905060006101ad8383610a68565b9050808611156101f1576040517f366cb4bc000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b60405186815273ffffffffffffffffffffffffffffffffffffffff8816906000907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a373ffffffffffffffffffffffffffffffffffffffff87166102fa5760008573ffffffffffffffffffffffffffffffffffffffff168760405160006040518083038185875af1925050503d80600081146102b4576040519150601f19603f3d011682016040523d82523d6000602084013e6102b9565b606091505b50509050806102f4576040517f6d963f8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061031b565b61031b73ffffffffffffffffffffffffffffffffffffffff88168688610604565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff82811660009081527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc9060209081526040808320938516835292905220545b92915050565b3360009081527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc906020818152604080842073ffffffffffffffffffffffffffffffffffffffff86168552909152909120548015610534573360009081526020838152604080832073ffffffffffffffffffffffffffffffffffffffff871684528252808320839055600185019091528120805483929061041e908490610a68565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff84169033907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a373ffffffffffffffffffffffffffffffffffffffff831661051357604051600090339083908381818185875af1925050503d80600081146104cd576040519150601f19603f3d011682016040523d82523d6000602084013e6104d2565b606091505b505090508061050d576040517f6d963f8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b61053473ffffffffffffffffffffffffffffffffffffffff84163383610604565b505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6003015473ffffffffffffffffffffffffffffffffffffffff163314610602576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016101e8565b565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610534928692916000916106cf91851690849061077c565b90508051600014806106f05750808060200190518101906106f09190610aa2565b610534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101e8565b606061078b8484600085610793565b949350505050565b606082471015610825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101e8565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161084e9190610ae8565b60006040518083038185875af1925050503d806000811461088b576040519150601f19603f3d011682016040523d82523d6000602084013e610890565b606091505b50915091506108a1878383876108ac565b979650505050505050565b6060831561094257825160000361093b5773ffffffffffffffffffffffffffffffffffffffff85163b61093b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101e8565b508161078b565b61078b83838151156109575781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e89190610b04565b73ffffffffffffffffffffffffffffffffffffffff811681146109ad57600080fd5b50565b6000806000606084860312156109c557600080fd5b83356109d08161098b565b92506020840135915060408401356109e78161098b565b809150509250925092565b60008060408385031215610a0557600080fd5b8235610a108161098b565b91506020830135610a208161098b565b809150509250929050565b600060208284031215610a3d57600080fd5b8135610a488161098b565b9392505050565b600060208284031215610a6157600080fd5b5051919050565b81810381811115610377577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610ab457600080fd5b81518015158114610a4857600080fd5b60005b83811015610adf578181015183820152602001610ac7565b50506000910152565b60008251610afa818460208701610ac4565b9190910192915050565b6020815260008251806020840152610b23816040850160208701610ac4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220ead75095d3bbe2ebdcba0053dc3c0e5df5bd8311a059c54e3500ba9823841ff364736f6c63430008130033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB8B DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x44EDC3C EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x78F91E37 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xB85EAAEF EQ PUSH2 0x80 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x9B0 JUMP JUMPDEST PUSH2 0x93 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6E PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x324 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x59 PUSH2 0x8E CALLDATASIZE PUSH1 0x4 PUSH2 0xA2B JUMP JUMPDEST PUSH2 0x37D JUMP JUMPDEST PUSH2 0x9B PUSH2 0x539 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x77FBD1C38A5EAD50A5764A860FEF6B91E5432A95F91228E67197EDAF911CFC91 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH32 0x77FBD1C38A5EAD50A5764A860FEF6B91E5432A95F91228E67197EDAF911CFC90 SWAP3 SWAP1 SWAP2 SWAP1 ISZERO PUSH2 0x19D JUMPI PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x174 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x198 SWAP2 SWAP1 PUSH2 0xA4F JUMP JUMPDEST PUSH2 0x19F JUMP JUMPDEST SELFBALANCE JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1AD DUP4 DUP4 PUSH2 0xA68 JUMP JUMPDEST SWAP1 POP DUP1 DUP7 GT ISZERO PUSH2 0x1F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x366CB4BC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP7 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x9B1BFA7FA9EE420A16E124F794C35AC9F90472ACC99140EB2F6447C714CAD8EB SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x2FA JUMPI PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2B4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2B9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D963F8800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x31B JUMP JUMPDEST PUSH2 0x31B PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND DUP7 DUP9 PUSH2 0x604 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x77FBD1C38A5EAD50A5764A860FEF6B91E5432A95F91228E67197EDAF911CFC90 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x77FBD1C38A5EAD50A5764A860FEF6B91E5432A95F91228E67197EDAF911CFC90 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP6 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x534 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE PUSH1 0x1 DUP6 ADD SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x41E SWAP1 DUP5 SWAP1 PUSH2 0xA68 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 CALLER SWAP1 PUSH32 0x9B1BFA7FA9EE420A16E124F794C35AC9F90472ACC99140EB2F6447C714CAD8EB SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x513 JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4CD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4D2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x50D JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D963F8800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x534 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND CALLER DUP4 PUSH2 0x604 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C PUSH1 0x3 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x602 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E643A204D75737420626520636F6E7472616374206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1E8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 SWAP1 DUP5 ADD MSTORE PUSH2 0x534 SWAP3 DUP7 SWAP3 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x6CF SWAP2 DUP6 AND SWAP1 DUP5 SWAP1 PUSH2 0x77C JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x6F0 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6F0 SWAP2 SWAP1 PUSH2 0xAA2 JUMP JUMPDEST PUSH2 0x534 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x78B DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x793 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x825 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x84E SWAP2 SWAP1 PUSH2 0xAE8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x88B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x890 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x8A1 DUP8 DUP4 DUP4 DUP8 PUSH2 0x8AC JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x942 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x93B JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x93B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1E8 JUMP JUMPDEST POP DUP2 PUSH2 0x78B JUMP JUMPDEST PUSH2 0x78B DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x957 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0xB04 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x9AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x9D0 DUP2 PUSH2 0x98B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x9E7 DUP2 PUSH2 0x98B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xA10 DUP2 PUSH2 0x98B JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xA20 DUP2 PUSH2 0x98B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA48 DUP2 PUSH2 0x98B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x377 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xADF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xAC7 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xAFA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xAC4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xB23 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xAC4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA 0xD7 POP SWAP6 0xD3 0xBB 0xE2 0xEB 0xDC 0xBA STOP MSTORE8 0xDC EXTCODECOPY 0xE 0x5D CREATE2 0xBD DUP4 GT LOG0 MSIZE 0xC5 0x4E CALLDATALOAD STOP 0xBA SWAP9 0x23 DUP5 0x1F RETURN PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
          "sourceMap": "461:1857:8:-:0;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_callOptionalReturn_440": {
              "entryPoint": null,
              "id": 440,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_revert_818": {
              "entryPoint": null,
              "id": 818,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@diamondStorage_8812": {
              "entryPoint": null,
              "id": 8812,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@enforceIsContractOwner_8872": {
              "entryPoint": 1337,
              "id": 8872,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@functionCallWithValue_643": {
              "entryPoint": 1939,
              "id": 643,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@functionCall_579": {
              "entryPoint": 1916,
              "id": 579,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@isContract_507": {
              "entryPoint": null,
              "id": 507,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@ownerWithdraw_1785": {
              "entryPoint": 147,
              "id": 1785,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@partnerTokenBalance_1579": {
              "entryPoint": 804,
              "id": 1579,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@partnerWithdraw_1673": {
              "entryPoint": 893,
              "id": 1673,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@safeTransfer_146": {
              "entryPoint": 1540,
              "id": 146,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@state_9619": {
              "entryPoint": null,
              "id": 9619,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@verifyCallResultFromTarget_774": {
              "entryPoint": 2220,
              "id": 774,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 2603,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_address": {
              "entryPoint": 2546,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint256t_address_payable": {
              "entryPoint": 2480,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 2722,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 2639,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 2792,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 2820,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0d4ae41009c51fd276653a54d7793c24f266ddc8c56ce21f8be5e2c6595ab3ac__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 2664,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 2756,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 2443,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:5553:46",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:46",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "59:109:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "146:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "155:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "158:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "148:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "148:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "148:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "82:5:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "93:5:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "100:42:46",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "89:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "89:54:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "79:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "79:65:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "72:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "72:73:46"
                          },
                          "nodeType": "YulIf",
                          "src": "69:93:46"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "48:5:46",
                        "type": ""
                      }
                    ],
                    "src": "14:154:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "285:352:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "331:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "340:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "343:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "333:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "333:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "333:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "306:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "315:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "302:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "302:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "327:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "298:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "298:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "295:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "356:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "382:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "369:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "369:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "360:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "426:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "401:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "401:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "401:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "441:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "451:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "441:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "465:42:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "492:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "503:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "488:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "488:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "475:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "475:32:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "465:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "516:47:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "548:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "559:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "544:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "544:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "531:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "531:32:46"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "520:7:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "597:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "572:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "572:33:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "572:33:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "614:17:46",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "624:7:46"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "614:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256t_address_payable",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "235:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "246:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "258:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "266:6:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "274:6:46",
                        "type": ""
                      }
                    ],
                    "src": "173:464:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "729:301:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "775:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "784:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "787:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "777:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "777:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "777:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "750:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "759:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "746:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "746:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "771:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "742:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "742:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "739:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "800:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "826:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "813:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "813:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "804:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "870:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "845:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "845:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "845:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "885:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "895:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "885:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "909:47:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "941:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "952:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "937:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "937:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "924:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "924:32:46"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "913:7:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "990:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "965:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "965:33:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "965:33:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1007:17:46",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "1017:7:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1007:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "687:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "698:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "710:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "718:6:46",
                        "type": ""
                      }
                    ],
                    "src": "642:388:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1136:76:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1146:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1158:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1169:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1154:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1154:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1146:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1188:9:46"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1199:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1181:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1181:25:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1181:25:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1105:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1116:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1127:4:46",
                        "type": ""
                      }
                    ],
                    "src": "1035:177:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1287:177:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1333:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1342:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1345:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1335:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1335:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1335:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1308:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1317:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1304:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1304:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1329:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1300:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1300:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "1297:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1358:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1384:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1371:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1371:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1362:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1428:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1403:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1403:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1403:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1443:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1453:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1443:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1253:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1264:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1276:6:46",
                        "type": ""
                      }
                    ],
                    "src": "1217:247:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1570:125:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1580:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1592:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1603:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1588:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1588:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1580:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1622:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1637:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1645:42:46",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1633:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1633:55:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1615:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1615:74:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1615:74:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1539:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1550:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1561:4:46",
                        "type": ""
                      }
                    ],
                    "src": "1469:226:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1781:103:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1827:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1836:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1839:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1829:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1829:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1829:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1802:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1811:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1798:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1798:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1823:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1794:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1794:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "1791:52:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1852:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1868:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1862:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1862:16:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1852:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1747:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1758:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1770:6:46",
                        "type": ""
                      }
                    ],
                    "src": "1700:184:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1938:233:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1948:17:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "1960:1:46"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "1963:1:46"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1956:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1956:9:46"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "1948:4:46"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1997:168:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2018:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2021:77:46",
                                      "type": "",
                                      "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2011:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2011:88:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2011:88:46"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2119:1:46",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2122:4:46",
                                      "type": "",
                                      "value": "0x11"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2112:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2112:15:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2112:15:46"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2147:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2150:4:46",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2140:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2140:15:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2140:15:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "1980:4:46"
                              },
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "1986:1:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1977:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1977:11:46"
                          },
                          "nodeType": "YulIf",
                          "src": "1974:191:46"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "1920:1:46",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "1923:1:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "1929:4:46",
                        "type": ""
                      }
                    ],
                    "src": "1889:282:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2367:14:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2369:10:46",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "2376:3:46"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "2369:3:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2351:3:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2359:3:46",
                        "type": ""
                      }
                    ],
                    "src": "2176:205:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2560:224:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2577:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2588:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2570:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2570:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2570:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2611:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2622:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2607:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2607:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2627:2:46",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2600:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2600:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2600:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2650:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2661:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2646:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2646:18:46"
                              },
                              {
                                "hexValue": "4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2666:34:46",
                                "type": "",
                                "value": "LibDiamond: Must be contract own"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2639:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2639:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2639:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2721:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2732:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2717:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2717:18:46"
                              },
                              {
                                "hexValue": "6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2737:4:46",
                                "type": "",
                                "value": "er"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2710:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2710:32:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2710:32:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2751:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2763:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2774:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2759:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2759:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2751:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0d4ae41009c51fd276653a54d7793c24f266ddc8c56ce21f8be5e2c6595ab3ac__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2537:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2551:4:46",
                        "type": ""
                      }
                    ],
                    "src": "2386:398:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2918:168:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2928:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2940:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2951:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2936:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2936:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2928:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2970:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2985:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2993:42:46",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2981:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2981:55:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2963:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2963:74:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2963:74:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3057:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3068:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3053:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3053:18:46"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "3073:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3046:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3046:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3046:34:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2879:9:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2890:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2898:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2909:4:46",
                        "type": ""
                      }
                    ],
                    "src": "2789:297:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3169:199:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3215:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3224:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3227:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3217:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3217:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3217:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3190:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3199:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3186:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3186:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3211:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3182:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3182:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "3179:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3240:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3259:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3253:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3253:16:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3244:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3322:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3331:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3334:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3324:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3324:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3324:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3291:5:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "3312:5:46"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "3305:6:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3305:13:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "3298:6:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3298:21:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "3288:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3288:32:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3281:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3281:40:46"
                          },
                          "nodeType": "YulIf",
                          "src": "3278:60:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3347:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3357:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3347:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3135:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3146:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3158:6:46",
                        "type": ""
                      }
                    ],
                    "src": "3091:277:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3547:232:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3564:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3575:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3557:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3557:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3557:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3598:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3609:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3594:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3594:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3614:2:46",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3587:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3587:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3587:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3637:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3648:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3633:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3633:18:46"
                              },
                              {
                                "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3653:34:46",
                                "type": "",
                                "value": "SafeERC20: ERC20 operation did n"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3626:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3626:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3626:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3708:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3719:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3704:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3704:18:46"
                              },
                              {
                                "hexValue": "6f742073756363656564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3724:12:46",
                                "type": "",
                                "value": "ot succeed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3697:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3697:40:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3697:40:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3746:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3758:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3769:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3754:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3754:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3746:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3524:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3538:4:46",
                        "type": ""
                      }
                    ],
                    "src": "3373:406:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3958:228:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3975:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3986:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3968:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3968:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3968:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4009:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4020:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4005:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4005:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4025:2:46",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3998:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3998:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3998:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4048:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4059:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4044:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4044:18:46"
                              },
                              {
                                "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4064:34:46",
                                "type": "",
                                "value": "Address: insufficient balance fo"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4037:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4037:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4037:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4119:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4130:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4115:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4115:18:46"
                              },
                              {
                                "hexValue": "722063616c6c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4135:8:46",
                                "type": "",
                                "value": "r call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4108:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4108:36:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4108:36:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4153:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4165:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4176:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4161:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4161:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4153:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3935:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3949:4:46",
                        "type": ""
                      }
                    ],
                    "src": "3784:402:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4257:184:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4267:10:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4276:1:46",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "4271:1:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4336:63:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "4361:3:46"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "4366:1:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4357:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4357:11:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "4380:3:46"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "4385:1:46"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "4376:3:46"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4376:11:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "4370:5:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4370:18:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4350:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4350:39:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4350:39:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "4297:1:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4300:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "4294:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4294:13:46"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "4308:19:46",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "4310:15:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "4319:1:46"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4322:2:46",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "4315:3:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4315:10:46"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "4310:1:46"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "4290:3:46",
                            "statements": []
                          },
                          "src": "4286:113:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "4419:3:46"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "4424:6:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4415:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4415:16:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4433:1:46",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4408:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4408:27:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4408:27:46"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "4235:3:46",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "4240:3:46",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "4245:6:46",
                        "type": ""
                      }
                    ],
                    "src": "4191:250:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4583:150:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4593:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4613:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4607:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4607:13:46"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "4597:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "4668:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4676:4:46",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4664:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4664:17:46"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4683:3:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4688:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "4629:34:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4629:66:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4629:66:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4704:23:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4715:3:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4720:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4711:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4711:16:46"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "4704:3:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "4559:3:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4564:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "4575:3:46",
                        "type": ""
                      }
                    ],
                    "src": "4446:287:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4912:179:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4929:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4940:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4922:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4922:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4922:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4963:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4974:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4959:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4959:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4979:2:46",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4952:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4952:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4952:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5002:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5013:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4998:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4998:18:46"
                              },
                              {
                                "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5018:31:46",
                                "type": "",
                                "value": "Address: call to non-contract"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4991:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4991:59:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4991:59:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5059:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5071:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5082:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5067:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5067:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5059:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4889:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4903:4:46",
                        "type": ""
                      }
                    ],
                    "src": "4738:353:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5217:334:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5234:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5245:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5227:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5227:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5227:21:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5257:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5277:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5271:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5271:13:46"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "5261:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5304:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5315:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5300:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5300:18:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5320:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5293:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5293:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5293:34:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5375:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5383:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5371:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5371:15:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5392:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5403:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5388:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5388:18:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5408:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "5336:34:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5336:79:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5336:79:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5424:121:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5440:9:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "5459:6:46"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5467:2:46",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "5455:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5455:15:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5472:66:46",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "5451:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5451:88:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5436:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5436:104:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5542:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5432:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5432:113:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5424:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5186:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5197:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5208:4:46",
                        "type": ""
                      }
                    ],
                    "src": "5096:455:46"
                  }
                ]
              },
              "contents": "{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_address_payable(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_address(value_1)\n        value2 := value_1\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_0d4ae41009c51fd276653a54d7793c24f266ddc8c56ce21f8be5e2c6595ab3ac__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"LibDiamond: Must be contract own\")\n        mstore(add(headStart, 96), \"er\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n}",
              "id": 46,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106100415760003560e01c8063044edc3c1461004657806378f91e371461005b578063b85eaaef14610080575b600080fd5b6100596100543660046109b0565b610093565b005b61006e6100693660046109f2565b610324565b60405190815260200160405180910390f35b61005961008e366004610a2b565b61037d565b61009b610539565b73ffffffffffffffffffffffffffffffffffffffff831660008181527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc9160205260408120547f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc90929091901561019d576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8716906370a0823190602401602060405180830381865afa158015610174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101989190610a4f565b61019f565b475b905060006101ad8383610a68565b9050808611156101f1576040517f366cb4bc000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b60405186815273ffffffffffffffffffffffffffffffffffffffff8816906000907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a373ffffffffffffffffffffffffffffffffffffffff87166102fa5760008573ffffffffffffffffffffffffffffffffffffffff168760405160006040518083038185875af1925050503d80600081146102b4576040519150601f19603f3d011682016040523d82523d6000602084013e6102b9565b606091505b50509050806102f4576040517f6d963f8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061031b565b61031b73ffffffffffffffffffffffffffffffffffffffff88168688610604565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff82811660009081527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc9060209081526040808320938516835292905220545b92915050565b3360009081527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc906020818152604080842073ffffffffffffffffffffffffffffffffffffffff86168552909152909120548015610534573360009081526020838152604080832073ffffffffffffffffffffffffffffffffffffffff871684528252808320839055600185019091528120805483929061041e908490610a68565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff84169033907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a373ffffffffffffffffffffffffffffffffffffffff831661051357604051600090339083908381818185875af1925050503d80600081146104cd576040519150601f19603f3d011682016040523d82523d6000602084013e6104d2565b606091505b505090508061050d576040517f6d963f8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b61053473ffffffffffffffffffffffffffffffffffffffff84163383610604565b505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6003015473ffffffffffffffffffffffffffffffffffffffff163314610602576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016101e8565b565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610534928692916000916106cf91851690849061077c565b90508051600014806106f05750808060200190518101906106f09190610aa2565b610534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101e8565b606061078b8484600085610793565b949350505050565b606082471015610825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101e8565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161084e9190610ae8565b60006040518083038185875af1925050503d806000811461088b576040519150601f19603f3d011682016040523d82523d6000602084013e610890565b606091505b50915091506108a1878383876108ac565b979650505050505050565b6060831561094257825160000361093b5773ffffffffffffffffffffffffffffffffffffffff85163b61093b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101e8565b508161078b565b61078b83838151156109575781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e89190610b04565b73ffffffffffffffffffffffffffffffffffffffff811681146109ad57600080fd5b50565b6000806000606084860312156109c557600080fd5b83356109d08161098b565b92506020840135915060408401356109e78161098b565b809150509250925092565b60008060408385031215610a0557600080fd5b8235610a108161098b565b91506020830135610a208161098b565b809150509250929050565b600060208284031215610a3d57600080fd5b8135610a488161098b565b9392505050565b600060208284031215610a6157600080fd5b5051919050565b81810381811115610377577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610ab457600080fd5b81518015158114610a4857600080fd5b60005b83811015610adf578181015183820152602001610ac7565b50506000910152565b60008251610afa818460208701610ac4565b9190910192915050565b6020815260008251806020840152610b23816040850160208701610ac4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220ead75095d3bbe2ebdcba0053dc3c0e5df5bd8311a059c54e3500ba9823841ff364736f6c63430008130033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x44EDC3C EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x78F91E37 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xB85EAAEF EQ PUSH2 0x80 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x9B0 JUMP JUMPDEST PUSH2 0x93 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6E PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x324 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x59 PUSH2 0x8E CALLDATASIZE PUSH1 0x4 PUSH2 0xA2B JUMP JUMPDEST PUSH2 0x37D JUMP JUMPDEST PUSH2 0x9B PUSH2 0x539 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x77FBD1C38A5EAD50A5764A860FEF6B91E5432A95F91228E67197EDAF911CFC91 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH32 0x77FBD1C38A5EAD50A5764A860FEF6B91E5432A95F91228E67197EDAF911CFC90 SWAP3 SWAP1 SWAP2 SWAP1 ISZERO PUSH2 0x19D JUMPI PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x174 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x198 SWAP2 SWAP1 PUSH2 0xA4F JUMP JUMPDEST PUSH2 0x19F JUMP JUMPDEST SELFBALANCE JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1AD DUP4 DUP4 PUSH2 0xA68 JUMP JUMPDEST SWAP1 POP DUP1 DUP7 GT ISZERO PUSH2 0x1F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x366CB4BC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP7 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x9B1BFA7FA9EE420A16E124F794C35AC9F90472ACC99140EB2F6447C714CAD8EB SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x2FA JUMPI PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2B4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2B9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D963F8800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x31B JUMP JUMPDEST PUSH2 0x31B PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND DUP7 DUP9 PUSH2 0x604 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x77FBD1C38A5EAD50A5764A860FEF6B91E5432A95F91228E67197EDAF911CFC90 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x77FBD1C38A5EAD50A5764A860FEF6B91E5432A95F91228E67197EDAF911CFC90 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP6 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x534 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE PUSH1 0x1 DUP6 ADD SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x41E SWAP1 DUP5 SWAP1 PUSH2 0xA68 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 CALLER SWAP1 PUSH32 0x9B1BFA7FA9EE420A16E124F794C35AC9F90472ACC99140EB2F6447C714CAD8EB SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x513 JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4CD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4D2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x50D JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D963F8800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x534 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND CALLER DUP4 PUSH2 0x604 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C PUSH1 0x3 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x602 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E643A204D75737420626520636F6E7472616374206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1E8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 SWAP1 DUP5 ADD MSTORE PUSH2 0x534 SWAP3 DUP7 SWAP3 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x6CF SWAP2 DUP6 AND SWAP1 DUP5 SWAP1 PUSH2 0x77C JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x6F0 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6F0 SWAP2 SWAP1 PUSH2 0xAA2 JUMP JUMPDEST PUSH2 0x534 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x78B DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x793 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x825 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x84E SWAP2 SWAP1 PUSH2 0xAE8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x88B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x890 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x8A1 DUP8 DUP4 DUP4 DUP8 PUSH2 0x8AC JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x942 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x93B JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x93B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1E8 JUMP JUMPDEST POP DUP2 PUSH2 0x78B JUMP JUMPDEST PUSH2 0x78B DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x957 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0xB04 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x9AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x9D0 DUP2 PUSH2 0x98B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x9E7 DUP2 PUSH2 0x98B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xA10 DUP2 PUSH2 0x98B JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xA20 DUP2 PUSH2 0x98B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA48 DUP2 PUSH2 0x98B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x377 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xADF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xAC7 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xAFA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xAC4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xB23 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xAC4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA 0xD7 POP SWAP6 0xD3 0xBB 0xE2 0xEB 0xDC 0xBA STOP MSTORE8 0xDC EXTCODECOPY 0xE 0x5D CREATE2 0xBD DUP4 GT LOG0 MSIZE 0xC5 0x4E CALLDATALOAD STOP 0xBA SWAP9 0x23 DUP5 0x1F RETURN PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
          "sourceMap": "461:1857:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1523:793;;;;;;:::i;:::-;;:::i;:::-;;583:202;;;;;;:::i;:::-;;:::i;:::-;;;1181:25:46;;;1169:2;1154:18;583:202:8;;;;;;;789:730;;;;;;:::i;:::-;;:::i;1523:793::-;1612:35;:33;:35::i;:::-;1742:29;;;1654:28;1742:29;;;:22;:29;;;;;;1003:54:39;;1742:29:8;;1654:28;1796:19;:96;;1854:38;;;;;1886:4;1854:38;;;1615:74:46;1854:23:8;;;;;;1588:18:46;;1854:38:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1796:96;;;1824:21;1796:96;1778:114;-1:-1:-1;1899:17:8;1919:29;1929:19;1778:114;1919:29;:::i;:::-;1899:49;;1968:9;1959:6;:18;1955:81;;;1994:35;;;;;;;;1181:25:46;;;1154:18;;1994:35:8;;;;;;;;1955:81;2047:35;;1181:25:46;;;2047:35:8;;;;2064:1;;2047:35;;1169:2:46;1154:18;2047:35:8;;;;;;;2093:19;;;2089:223;;2141:9;2156:2;:7;;2171:6;2156:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2140:42;;;2196:4;2191:56;;2219:19;;;;;;;;;;;;;;2191:56;2114:139;2089:223;;;2267:38;:26;;;2294:2;2298:6;2267:26;:38::i;:::-;1606:710;;;;1523:793;;;:::o;583:202::-;747:26;;;;667:7;747:26;;;1003:54:39;747:26:8;;;;;;;;:33;;;;;;;;;;583:202;;;;;:::o;789:730::-;938:10;844:28;920:29;;;1003:54:39;920:29:8;;;;;;;;;:36;;;;;;;;;;;967:11;;963:552;;1006:10;1027:1;988:29;;;;;;;;;;;;:36;;;;;;;;;:40;;;1036:22;;;:29;;;;;:40;;1069:7;;1027:1;1036:40;;1069:7;;1036:40;:::i;:::-;;;;-1:-1:-1;;1090:36:8;;1181:25:46;;;1090:36:8;;;;1099:10;;1090:36;;1169:2:46;1154:18;1090:36:8;;;;;;;1139:19;;;1135:374;;1243:44;;1228:9;;1251:10;;1275:7;;1228:9;1243:44;1228:9;1243:44;1275:7;1251:10;1243:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1227:60;;;1303:4;1298:60;;1328:19;;;;;;;;;;;;;;1298:60;1160:206;838:681;;789:730;:::o;1135:374::-;1453:47;:26;;;1480:10;1492:7;1453:26;:47::i;:::-;838:681;;789:730;:::o;2202:150:38:-;733:45;2278:30;;;;;2264:10;:44;2256:91;;;;;;;2588:2:46;2256:91:38;;;2570:21:46;2627:2;2607:18;;;2600:30;2666:34;2646:18;;;2639:62;2737:4;2717:18;;;2710:32;2759:19;;2256:91:38;2386:398:46;2256:91:38;2202:150::o;941:175:2:-;1050:58;;;2993:42:46;2981:55;;;1050:58:2;;;2963:74:46;3053:18;;;;3046:34;;;1050:58:2;;;;;;;;;;2936:18:46;;;;1050:58:2;;;;;;;;;;1073:23;1050:58;;;5641:69;;;;;;;;;;;;;;;;1023:86;;1043:5;;1050:58;-1:-1:-1;;5641:69:2;;:27;;;1050:58;;5641:27;:69::i;:::-;5615:95;;5728:10;:17;5749:1;5728:22;:56;;;;5765:10;5754:30;;;;;;;;;;;;:::i;:::-;5720:111;;;;;;;3575:2:46;5720:111:2;;;3557:21:46;3614:2;3594:18;;;3587:30;3653:34;3633:18;;;3626:62;3724:12;3704:18;;;3697:40;3754:19;;5720:111:2;3373:406:46;4108:223:3;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;:::-;4265:59;4108:223;-1:-1:-1;;;;4108:223:3:o;5165:446::-;5330:12;5387:5;5362:21;:30;;5354:81;;;;;;;3986:2:46;5354:81:3;;;3968:21:46;4025:2;4005:18;;;3998:30;4064:34;4044:18;;;4037:62;4135:8;4115:18;;;4108:36;4161:19;;5354:81:3;3784:402:46;5354:81:3;5446:12;5460:23;5487:6;:11;;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:3:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;1702:19;;;;8113:60;;;;;;;4940:2:46;8113:60:3;;;4922:21:46;4979:2;4959:18;;;4952:30;5018:31;4998:18;;;4991:59;5067:18;;8113:60:3;4738:353:46;8113:60:3;-1:-1:-1;8208:10:3;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;14:154:46:-;100:42;93:5;89:54;82:5;79:65;69:93;;158:1;155;148:12;69:93;14:154;:::o;173:464::-;258:6;266;274;327:2;315:9;306:7;302:23;298:32;295:52;;;343:1;340;333:12;295:52;382:9;369:23;401:31;426:5;401:31;:::i;:::-;451:5;-1:-1:-1;503:2:46;488:18;;475:32;;-1:-1:-1;559:2:46;544:18;;531:32;572:33;531:32;572:33;:::i;:::-;624:7;614:17;;;173:464;;;;;:::o;642:388::-;710:6;718;771:2;759:9;750:7;746:23;742:32;739:52;;;787:1;784;777:12;739:52;826:9;813:23;845:31;870:5;845:31;:::i;:::-;895:5;-1:-1:-1;952:2:46;937:18;;924:32;965:33;924:32;965:33;:::i;:::-;1017:7;1007:17;;;642:388;;;;;:::o;1217:247::-;1276:6;1329:2;1317:9;1308:7;1304:23;1300:32;1297:52;;;1345:1;1342;1335:12;1297:52;1384:9;1371:23;1403:31;1428:5;1403:31;:::i;:::-;1453:5;1217:247;-1:-1:-1;;;1217:247:46:o;1700:184::-;1770:6;1823:2;1811:9;1802:7;1798:23;1794:32;1791:52;;;1839:1;1836;1829:12;1791:52;-1:-1:-1;1862:16:46;;1700:184;-1:-1:-1;1700:184:46:o;1889:282::-;1956:9;;;1977:11;;;1974:191;;;2021:77;2018:1;2011:88;2122:4;2119:1;2112:15;2150:4;2147:1;2140:15;3091:277;3158:6;3211:2;3199:9;3190:7;3186:23;3182:32;3179:52;;;3227:1;3224;3217:12;3179:52;3259:9;3253:16;3312:5;3305:13;3298:21;3291:5;3288:32;3278:60;;3334:1;3331;3324:12;4191:250;4276:1;4286:113;4300:6;4297:1;4294:13;4286:113;;;4376:11;;;4370:18;4357:11;;;4350:39;4322:2;4315:10;4286:113;;;-1:-1:-1;;4433:1:46;4415:16;;4408:27;4191:250::o;4446:287::-;4575:3;4613:6;4607:13;4629:66;4688:6;4683:3;4676:4;4668:6;4664:17;4629:66;:::i;:::-;4711:16;;;;;4446:287;-1:-1:-1;;4446:287:46:o;5096:455::-;5245:2;5234:9;5227:21;5208:4;5277:6;5271:13;5320:6;5315:2;5304:9;5300:18;5293:34;5336:79;5408:6;5403:2;5392:9;5388:18;5383:2;5375:6;5371:15;5336:79;:::i;:::-;5467:2;5455:15;5472:66;5451:88;5436:104;;;;5542:2;5432:113;;5096:455;-1:-1:-1;;5096:455:46:o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "591000",
            "executionCost": "625",
            "totalCost": "591625"
          },
          "external": {
            "ownerWithdraw(address,uint256,address)": "infinite",
            "partnerTokenBalance(address,address)": "infinite",
            "partnerWithdraw(address)": "infinite"
          }
        },
        "methodIdentifiers": {
          "ownerWithdraw(address,uint256,address)": "044edc3c",
          "partnerTokenBalance(address,address)": "78f91e37",
          "partnerWithdraw(address)": "b85eaaef"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EthTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientOwnerBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"partnerTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"partnerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The StarVault estimates, collects, and tracks fees for partners\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/StarVault.sol\":\"StarVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@openzeppelin/=@openzeppelin/\",\":@uniswap/=@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=hardhat-deploy/\",\":hardhat/=hardhat/\",\":solidity-stringutils/=lib/solidity-stringutils/src/\"]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/facets/StarVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {LibDiamond} from '../libraries/LibDiamond.sol';\\nimport {LibStarVault} from '../libraries/LibStarVault.sol';\\nimport {IStarVault} from '../interfaces/IStarVault.sol';\\n\\n/**\\n * The StarVault estimates, collects, and tracks fees for partners\\n */\\ncontract StarVault is IStarVault {\\n  using SafeERC20 for IERC20;\\n\\n  error InsufficientOwnerBalance(uint256 available);\\n\\n  function partnerTokenBalance(address partner, address token) external view returns (uint256) {\\n    LibStarVault.State storage s = LibStarVault.state();\\n\\n    return s.partnerBalances[partner][token];\\n  }\\n\\n  function partnerWithdraw(address token) external {\\n    LibStarVault.State storage s = LibStarVault.state();\\n\\n    uint256 balance = s.partnerBalances[msg.sender][token];\\n\\n    if (balance > 0) {\\n      s.partnerBalances[msg.sender][token] = 0;\\n      s.partnerBalancesTotal[token] -= balance;\\n\\n      emit Withdraw(msg.sender, token, balance);\\n\\n      if (token == address(0)) {\\n        // NOTE: Control transfered to untrusted address\\n        (bool sent, ) = payable(msg.sender).call{value: balance}('');\\n\\n        if (!sent) {\\n          revert EthTransferFailed();\\n        }\\n      } else {\\n        // NOTE: The token is not removed from the partner's token set\\n        IERC20(token).safeTransfer(msg.sender, balance);\\n      }\\n    }\\n  }\\n\\n  function ownerWithdraw(address token, uint256 amount, address payable to) external {\\n    LibDiamond.enforceIsContractOwner();\\n\\n    LibStarVault.State storage s = LibStarVault.state();\\n\\n    uint256 partnerBalanceTotal = s.partnerBalancesTotal[token];\\n\\n    uint256 balance = token == address(0)\\n      ? address(this).balance\\n      : IERC20(token).balanceOf(address(this));\\n\\n    uint256 available = balance - partnerBalanceTotal;\\n\\n    if (amount > available) {\\n      revert InsufficientOwnerBalance(available);\\n    }\\n\\n    emit Withdraw(address(0), token, amount);\\n\\n    if (token == address(0)) {\\n      // Send ETH\\n      (bool sent, ) = to.call{value: amount}('');\\n\\n      if (!sent) {\\n        revert EthTransferFailed();\\n      }\\n    } else {\\n      IERC20(token).safeTransfer(to, amount);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfb874a168429ce5522e13a21175f22cbac43eeb8db151db1f3bc03e3782e8c0b\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n  enum FacetCutAction {\\n    Add,\\n    Replace,\\n    Remove\\n  }\\n  // Add=0, Replace=1, Remove=2\\n\\n  struct FacetCut {\\n    address facetAddress;\\n    FacetCutAction action;\\n    bytes4[] functionSelectors;\\n  }\\n\\n  /// @notice Add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function diamondCut(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external;\\n\\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x2542d3d1dc26be46c0c298c6c7a1ac7943fd920dd2ac7cc013fe775e36ba973a\",\"license\":\"MIT\"},\"contracts/interfaces/IStarVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IStarVault {\\n  error EthTransferFailed();\\n\\n  event Withdraw(address indexed partner, address indexed token, uint256 amount);\\n\\n  function partnerTokenBalance(address partner, address token) external view returns (uint256);\\n\\n  function partnerWithdraw(address token) external;\\n\\n  function ownerWithdraw(address token, uint256 amount, address payable to) external;\\n}\\n\",\"keccak256\":\"0xb8b1bd9085a4530a3ea0ffa77bb01ad3e22a99cd5c8eba7519be471328c0c1d2\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from '../interfaces/IDiamondCut.sol';\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256('diamond.standard.diamond.storage');\\n\\n  struct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n  }\\n\\n  struct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n  }\\n\\n  struct DiamondStorage {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    address contractOwner;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  function setContractOwner(address _newOwner) internal {\\n    DiamondStorage storage ds = diamondStorage();\\n    address previousOwner = ds.contractOwner;\\n    ds.contractOwner = _newOwner;\\n    emit OwnershipTransferred(previousOwner, _newOwner);\\n  }\\n\\n  function contractOwner() internal view returns (address contractOwner_) {\\n    contractOwner_ = diamondStorage().contractOwner;\\n  }\\n\\n  function enforceIsContractOwner() internal view {\\n    require(msg.sender == diamondStorage().contractOwner, 'LibDiamond: Must be contract owner');\\n  }\\n\\n  event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  // Internal function version of diamondCut\\n  function diamondCut(\\n    IDiamondCut.FacetCut[] memory _diamondCut,\\n    address _init,\\n    bytes memory _calldata\\n  ) internal {\\n    for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n      IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n      if (action == IDiamondCut.FacetCutAction.Add) {\\n        addFunctions(\\n          _diamondCut[facetIndex].facetAddress,\\n          _diamondCut[facetIndex].functionSelectors\\n        );\\n      } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n        replaceFunctions(\\n          _diamondCut[facetIndex].facetAddress,\\n          _diamondCut[facetIndex].functionSelectors\\n        );\\n      } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n        removeFunctions(\\n          _diamondCut[facetIndex].facetAddress,\\n          _diamondCut[facetIndex].functionSelectors\\n        );\\n      } else {\\n        revert('LibDiamondCut: Incorrect FacetCutAction');\\n      }\\n    }\\n    emit DiamondCut(_diamondCut, _init, _calldata);\\n    initializeDiamondCut(_init, _calldata);\\n  }\\n\\n  function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n    uint96 selectorPosition = uint96(\\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n    );\\n    // add new facet address if it does not exist\\n    if (selectorPosition == 0) {\\n      addFacet(ds, _facetAddress);\\n    }\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      require(\\n        oldFacetAddress == address(0),\\n        \\\"LibDiamondCut: Can't add function that already exists\\\"\\n      );\\n      addFunction(ds, selector, selectorPosition, _facetAddress);\\n      selectorPosition++;\\n    }\\n  }\\n\\n  function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n    uint96 selectorPosition = uint96(\\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n    );\\n    // add new facet address if it does not exist\\n    if (selectorPosition == 0) {\\n      addFacet(ds, _facetAddress);\\n    }\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      require(\\n        oldFacetAddress != _facetAddress,\\n        \\\"LibDiamondCut: Can't replace function with same function\\\"\\n      );\\n      removeFunction(ds, oldFacetAddress, selector);\\n      addFunction(ds, selector, selectorPosition, _facetAddress);\\n      selectorPosition++;\\n    }\\n  }\\n\\n  function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\\n    DiamondStorage storage ds = diamondStorage();\\n    // if function does not exist then do nothing and return\\n    require(_facetAddress == address(0), 'LibDiamondCut: Remove facet address must be address(0)');\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      removeFunction(ds, oldFacetAddress, selector);\\n    }\\n  }\\n\\n  function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n    enforceHasContractCode(_facetAddress, 'LibDiamondCut: New facet has no code');\\n    ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n    ds.facetAddresses.push(_facetAddress);\\n  }\\n\\n  function addFunction(\\n    DiamondStorage storage ds,\\n    bytes4 _selector,\\n    uint96 _selectorPosition,\\n    address _facetAddress\\n  ) internal {\\n    ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n    ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n  }\\n\\n  function removeFunction(\\n    DiamondStorage storage ds,\\n    address _facetAddress,\\n    bytes4 _selector\\n  ) internal {\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n    // an immutable function is a function defined directly in a diamond\\n    require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n    // replace selector with last selector, then delete last selector\\n    uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n    uint256 lastSelectorPosition = ds\\n      .facetFunctionSelectors[_facetAddress]\\n      .functionSelectors\\n      .length - 1;\\n    // if not the same then replace _selector with lastSelector\\n    if (selectorPosition != lastSelectorPosition) {\\n      bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n        lastSelectorPosition\\n      ];\\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n      ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(\\n        selectorPosition\\n      );\\n    }\\n    // delete the last selector\\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n    delete ds.selectorToFacetAndPosition[_selector];\\n\\n    // if no more selectors for facet address then delete the facet address\\n    if (lastSelectorPosition == 0) {\\n      // replace facet address with last facet address and delete last facet address\\n      uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n      uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n      if (facetAddressPosition != lastFacetAddressPosition) {\\n        address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n        ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n        ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n      }\\n      ds.facetAddresses.pop();\\n      delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n    }\\n  }\\n\\n  function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n    if (_init == address(0)) {\\n      return;\\n    }\\n    enforceHasContractCode(_init, 'LibDiamondCut: _init address has no code');\\n    (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n    if (!success) {\\n      if (error.length > 0) {\\n        // bubble up error\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(error)\\n          revert(add(32, error), returndata_size)\\n        }\\n      } else {\\n        revert InitializationFunctionReverted(_init, _calldata);\\n      }\\n    }\\n  }\\n\\n  function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n    uint256 contractSize;\\n    assembly {\\n      contractSize := extcodesize(_contract)\\n    }\\n    require(contractSize > 0, _errorMessage);\\n  }\\n}\\n\",\"keccak256\":\"0x341f5cbd88d747bcd5beb54a939ddfb8111d04b7a28b1071a4f2a8e4fcfdd216\",\"license\":\"MIT\"},\"contracts/libraries/LibStarVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibStarVault\\n */\\nlibrary LibStarVault {\\n  /**\\n   * The swap fee is over the maximum allowed\\n   */\\n  error FeeTooHigh(uint256 maxFeeBps);\\n\\n  event Fee(\\n    address indexed partner,\\n    address indexed token,\\n    uint256 partnerFee,\\n    uint256 protocolFee\\n  );\\n\\n  struct State {\\n    /**\\n     * Token balances per partner\\n     * Mapping: Partner -> token -> balance\\n     */\\n    mapping(address => mapping(address => uint256)) partnerBalances;\\n    /**\\n     * Total balances per token for all partners.\\n     * Mapping: token -> balance\\n     */\\n    mapping(address => uint256) partnerBalancesTotal;\\n  }\\n\\n  uint256 private constant MAX_FEE_BPS = 2_000;\\n\\n  function state() internal pure returns (State storage s) {\\n    /**\\n     * NOTE: Three storage slots used to store all partners addresses and partner tokens were\\n     * removed to save gas.\\n     */\\n    unchecked {\\n      uint256 storagePosition = uint256(keccak256('diamond.storage.LibStarVault')) + 3;\\n\\n      assembly {\\n        s.slot := storagePosition\\n      }\\n    }\\n  }\\n\\n  /**\\n   * By using a library function we ensure that the storage used by the library is whichever contract\\n   * is calling this function\\n   */\\n  function registerCollectedFee(\\n    address partner,\\n    address token,\\n    uint256 partnerFee,\\n    uint256 protocolFee\\n  ) internal {\\n    State storage s = state();\\n\\n    unchecked {\\n      s.partnerBalances[partner][token] += partnerFee;\\n      s.partnerBalancesTotal[token] += partnerFee;\\n    }\\n\\n    emit Fee(partner, token, partnerFee, protocolFee);\\n  }\\n\\n  function calculateAndRegisterFee(\\n    address partner,\\n    address token,\\n    uint256 feeBps,\\n    uint256 amountOutQuoted,\\n    uint256 amountOutActual\\n  ) internal returns (uint256 amountOutUser_) {\\n    if (feeBps > MAX_FEE_BPS) {\\n      revert FeeTooHigh(MAX_FEE_BPS);\\n    }\\n\\n    unchecked {\\n      uint256 feeTotal;\\n      uint256 feeBasis = amountOutActual;\\n\\n      if (amountOutActual > amountOutQuoted) {\\n        // Positive slippage\\n        feeTotal = amountOutActual - amountOutQuoted;\\n\\n        // Change the fee basis for use below\\n        feeBasis = amountOutQuoted;\\n      }\\n\\n      // Fee taken from actual\\n      feeTotal += (feeBasis * feeBps) / 10_000;\\n\\n      // If a partner is set, split the fee in half\\n      uint256 feePartner = partner == address(0) ? 0 : (feeTotal * 50) / 100;\\n      uint256 feeProtocol = feeTotal - feePartner;\\n\\n      if (feeProtocol > 0) {\\n        registerCollectedFee(partner, token, feePartner, feeProtocol);\\n      }\\n\\n      return amountOutActual - feeTotal;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x332a4a0e56d3a792a8a6e6ea929ee8c79a5a26de02445a73711228f3966ed948\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [],
        "types": null
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "notice": "The StarVault estimates, collects, and tracks fees for partners",
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\n    },\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\n    },\n    \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\n    },\n    \"contracts/facets/Curve.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {ICurve} from '../interfaces/ICurve.sol';\\nimport {LibStarVault} from '../libraries/LibStarVault.sol';\\nimport {LibWarp} from '../libraries/LibWarp.sol';\\nimport {LibCurve} from '../libraries/LibCurve.sol';\\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\\nimport {IAllowanceTransfer} from '../interfaces/external/IAllowanceTransfer.sol';\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\n\\n/**\\n * Swaps for Curve pools\\n *\\n * The pools are not trusted to deliver the correct amount of tokens, so the router\\n * verifies this.\\n */\\ncontract Curve is ICurve {\\n  using SafeERC20 for IERC20;\\n  using Address for address;\\n\\n  function curveExactInputSingle(\\n    ExactInputSingleParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut) {\\n    if (block.timestamp > params.deadline) {\\n      revert DeadlineExpired();\\n    }\\n\\n    bool isToEth = params.tokenOut == address(0);\\n\\n    uint256 tokenOutBalancePrev = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (params.tokenIn != address(0)) {\\n      // TODO: Is this necessary to support USDT? @jflint256: Yes, I think so.\\n      IERC20(params.tokenIn).forceApprove(params.pool, params.amountIn);\\n\\n      // Permit tokens / set allowance\\n      LibWarp.state().permit2.permit(\\n        msg.sender,\\n        IAllowanceTransfer.PermitSingle({\\n          details: IAllowanceTransfer.PermitDetails({\\n            token: params.tokenIn,\\n            amount: (uint160)(params.amountIn),\\n            expiration: (uint48)(params.deadline),\\n            nonce: (uint48)(permit.nonce)\\n          }),\\n          spender: address(this),\\n          sigDeadline: (uint256)(params.deadline)\\n        }),\\n        permit.signature\\n      );\\n\\n      // Transfer tokens from msg.sender to address(this)\\n      LibWarp.state().permit2.transferFrom(\\n        msg.sender,\\n        address(this),\\n        (uint160)(params.amountIn),\\n        params.tokenIn\\n      );\\n    }\\n\\n    LibCurve.exchange({\\n      kind: params.kind,\\n      underlying: params.underlying,\\n      pool: params.pool,\\n      eth: msg.value,\\n      i: params.tokenIndexIn,\\n      j: params.tokenIndexOut,\\n      // NOTE: `params.amountIn` is not verified to equal `msg.value`\\n      dx: params.amountIn,\\n      // NOTE: There is no need to set a min out since the balance is verified\\n      min_dy: 0\\n    });\\n\\n    uint256 nextTokenOutBalance = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    amountOut = nextTokenOutBalance - tokenOutBalancePrev;\\n\\n    // Enforce minimum amount/max slippage\\n    if (amountOut < LibWarp.applySlippage(params.amountOut, params.slippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    amountOut = LibStarVault.calculateAndRegisterFee(\\n      params.partner,\\n      params.tokenOut,\\n      params.feeBps,\\n      params.amountOut,\\n      amountOut\\n    );\\n\\n    if (isToEth) {\\n      (bool sent, ) = params.recipient.call{value: amountOut}('');\\n\\n      if (!sent) {\\n        revert EthTransferFailed();\\n      }\\n    } else {\\n      IERC20(params.tokenOut).safeTransfer(params.recipient, amountOut);\\n    }\\n\\n    emit LibWarp.Warp(params.partner, params.tokenIn, params.tokenOut, params.amountIn, amountOut);\\n  }\\n}\\n\"\n    },\n    \"contracts/facets/Stargate.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {IStargate} from '../interfaces/IStargate.sol';\\nimport {LibStarVault} from '../libraries/LibStarVault.sol';\\nimport {LibWarp} from '../libraries/LibWarp.sol';\\nimport {IAllowanceTransfer} from '../interfaces/external/IAllowanceTransfer.sol';\\nimport {IStargateRouter} from '../interfaces/external/IStargateRouter.sol';\\nimport {IStargateComposer} from '../interfaces/external/IStargateComposer.sol';\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\n\\ncontract Stargate is IStargate {\\n  using SafeERC20 for IERC20;\\n\\n  function stargateJumpToken(\\n    JumpTokenParams calldata params,\\n    PermitParams calldata permit\\n  ) external payable {\\n    LibWarp.state().permit2.permit(\\n      msg.sender,\\n      IAllowanceTransfer.PermitSingle(\\n        IAllowanceTransfer.PermitDetails({\\n          token: params.token,\\n          amount: params.amountIn,\\n          expiration: params.deadline,\\n          nonce: uint48(permit.nonce)\\n        }),\\n        address(this),\\n        params.deadline\\n      ),\\n      permit.signature\\n    );\\n\\n    // Transfer tokens from the sender to this contract\\n    LibWarp.state().permit2.transferFrom(\\n      msg.sender,\\n      address(this),\\n      uint160(params.amountIn),\\n      params.token\\n    );\\n\\n    // NOTE: It is not possible to know how many tokens will be delivered. Therfore positive slippage\\n    // is never charged\\n    uint256 amountIn = LibStarVault.calculateAndRegisterFee(\\n      params.partner,\\n      params.token,\\n      params.feeBps,\\n      params.amountIn,\\n      params.amountIn\\n    );\\n\\n    // NOTE: This lookup is spending 319 gas\\n    IStargateRouter stargateRouter = IStargateRouter(\\n      LibWarp.state().stargateComposer.stargateRouter()\\n    );\\n\\n    IERC20(params.token).forceApprove(address(stargateRouter), amountIn);\\n\\n    unchecked {\\n      stargateRouter.swap{value: msg.value}({\\n        _dstChainId: params.dstChainId,\\n        _srcPoolId: params.srcPoolId,\\n        _dstPoolId: params.dstPoolId,\\n        //  NOTE: There is no guarantee that `msg.sender` can handle receiving tokens\\n        _refundAddress: payable(msg.sender),\\n        _amountLD: amountIn,\\n        // Apply slippage to the amountOutExpected after fees\\n        _minAmountLD: params.amountOutExpected > (params.amountIn - amountIn)\\n          ? LibWarp.applySlippage(\\n            params.amountOutExpected - (params.amountIn - amountIn),\\n            params.slippageBps\\n          )\\n          : 0,\\n        _lzTxParams: IStargateRouter.lzTxObj({\\n          dstGasForCall: 0,\\n          dstNativeAmount: 0,\\n          dstNativeAddr: ''\\n        }),\\n        _to: abi.encodePacked(params.recipient),\\n        _payload: ''\\n      });\\n    }\\n  }\\n\\n  function stargateJumpNative(JumpNativeParams calldata params) external payable {\\n    if (msg.value < params.amountIn) {\\n      revert InsufficientEthValue();\\n    }\\n\\n    // NOTE: It is not possible to know how many tokens will be delivered. Therfore positive slippage\\n    // is never charged\\n    uint256 amountIn = LibStarVault.calculateAndRegisterFee(\\n      params.partner,\\n      address(0),\\n      params.feeBps,\\n      params.amountIn,\\n      params.amountIn\\n    );\\n\\n    unchecked {\\n      LibWarp.state().stargateComposer.swap{value: msg.value - (params.amountIn - amountIn)}({\\n        _dstChainId: params.dstChainId,\\n        _srcPoolId: params.srcPoolId,\\n        _dstPoolId: params.dstPoolId,\\n        _refundAddress: payable(msg.sender),\\n        _amountLD: amountIn,\\n        // Apply slippage to the amountOutExpected after fees\\n        _minAmountLD: params.amountOutExpected > params.amountIn - amountIn\\n          ? LibWarp.applySlippage(\\n            params.amountOutExpected - (params.amountIn - amountIn),\\n            params.slippageBps\\n          )\\n          : 0,\\n        _lzTxParams: IStargateRouter.lzTxObj({\\n          dstGasForCall: 0,\\n          dstNativeAmount: 0,\\n          dstNativeAddr: ''\\n        }),\\n        _to: abi.encodePacked(params.recipient),\\n        _payload: ''\\n      });\\n    }\\n  }\\n}\\n\"\n    },\n    \"contracts/facets/StarVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {LibDiamond} from '../libraries/LibDiamond.sol';\\nimport {LibStarVault} from '../libraries/LibStarVault.sol';\\nimport {IStarVault} from '../interfaces/IStarVault.sol';\\n\\n/**\\n * The StarVault estimates, collects, and tracks fees for partners\\n */\\ncontract StarVault is IStarVault {\\n  using SafeERC20 for IERC20;\\n\\n  error InsufficientOwnerBalance(uint256 available);\\n\\n  function partnerTokenBalance(address partner, address token) external view returns (uint256) {\\n    LibStarVault.State storage s = LibStarVault.state();\\n\\n    return s.partnerBalances[partner][token];\\n  }\\n\\n  function partnerWithdraw(address token) external {\\n    LibStarVault.State storage s = LibStarVault.state();\\n\\n    uint256 balance = s.partnerBalances[msg.sender][token];\\n\\n    if (balance > 0) {\\n      s.partnerBalances[msg.sender][token] = 0;\\n      s.partnerBalancesTotal[token] -= balance;\\n\\n      emit Withdraw(msg.sender, token, balance);\\n\\n      if (token == address(0)) {\\n        // NOTE: Control transfered to untrusted address\\n        (bool sent, ) = payable(msg.sender).call{value: balance}('');\\n\\n        if (!sent) {\\n          revert EthTransferFailed();\\n        }\\n      } else {\\n        // NOTE: The token is not removed from the partner's token set\\n        IERC20(token).safeTransfer(msg.sender, balance);\\n      }\\n    }\\n  }\\n\\n  function ownerWithdraw(address token, uint256 amount, address payable to) external {\\n    LibDiamond.enforceIsContractOwner();\\n\\n    LibStarVault.State storage s = LibStarVault.state();\\n\\n    uint256 partnerBalanceTotal = s.partnerBalancesTotal[token];\\n\\n    uint256 balance = token == address(0)\\n      ? address(this).balance\\n      : IERC20(token).balanceOf(address(this));\\n\\n    uint256 available = balance - partnerBalanceTotal;\\n\\n    if (amount > available) {\\n      revert InsufficientOwnerBalance(available);\\n    }\\n\\n    emit Withdraw(address(0), token, amount);\\n\\n    if (token == address(0)) {\\n      // Send ETH\\n      (bool sent, ) = to.call{value: amount}('');\\n\\n      if (!sent) {\\n        revert EthTransferFailed();\\n      }\\n    } else {\\n      IERC20(token).safeTransfer(to, amount);\\n    }\\n  }\\n}\\n\"\n    },\n    \"contracts/facets/UniV2LikeFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {IUniswapV2Pair} from '../interfaces/external/IUniswapV2Pair.sol';\\nimport {IUniV2Like} from '../interfaces/IUniV2Like.sol';\\nimport {LibUniV2Like} from '../libraries/LibUniV2Like.sol';\\nimport {LibStarVault} from '../libraries/LibStarVault.sol';\\nimport {LibWarp} from '../libraries/LibWarp.sol';\\nimport {IUniswapV2Pair} from '../interfaces/external/IUniswapV2Pair.sol';\\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\\nimport {IAllowanceTransfer} from '../interfaces/external/IAllowanceTransfer.sol';\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\n\\n/**\\n * A router for any Uniswap V2 fork\\n *\\n * The pools are not trusted to deliver the correct amount of tokens, so the router\\n * verifies this.\\n *\\n * The pool addresses passed in as a parameter instead of being looked up from the factory. The caller\\n * may use `getPair` on the factory to calculate pool addresses.\\n *\\n * Fees may vary from Uniswap V2's 0.3% (30 bps) and are passed in as `poolFeeBps`.\\n *\\n * Inspired by https://github.com/sushiswap/sushiswap/blob/master/protocols/route-processor/contracts/RouteProcessor4.sol#L323\\n */\\ncontract UniV2LikeFacet is IUniV2Like {\\n  using SafeERC20 for IERC20;\\n  using Address for address;\\n\\n  function uniswapV2LikeExactInputSingle(\\n    ExactInputSingleParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut) {\\n    if (block.timestamp > params.deadline) {\\n      revert DeadlineExpired();\\n    }\\n\\n    LibWarp.State storage s = LibWarp.state();\\n\\n    bool isFromEth = params.tokenIn == address(0);\\n    bool isToEth = params.tokenOut == address(0);\\n\\n    uint256 tokenOutBalancePrev = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (isFromEth) {\\n      params.tokenIn = address(s.weth);\\n    }\\n\\n    if (isToEth) {\\n      params.tokenOut = address(s.weth);\\n    }\\n\\n    (uint256 reserveIn, uint256 reserveOut, ) = IUniswapV2Pair(params.pool).getReserves();\\n\\n    if (params.tokenIn > params.tokenOut) {\\n      (reserveIn, reserveOut) = (reserveOut, reserveIn);\\n    }\\n\\n    unchecked {\\n      // For 25 bps, multiply by 9975\\n      uint256 feeFactor = 10_000 - params.poolFeeBps;\\n\\n      amountOut =\\n        ((params.amountIn * feeFactor) * reserveOut) /\\n        ((reserveIn * 10_000) + (params.amountIn * feeFactor));\\n    }\\n\\n    // Enforce minimum amount/max slippage\\n    if (amountOut < LibWarp.applySlippage(params.amountOut, params.slippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    if (isFromEth) {\\n      // From ETH\\n      if (msg.value != params.amountIn) {\\n        revert IncorrectEthValue();\\n      }\\n\\n      s.weth.deposit{value: msg.value}();\\n\\n      // Transfer tokens to the pool\\n      IERC20(params.tokenIn).safeTransfer(params.pool, params.amountIn);\\n    } else {\\n      // Permit tokens / set allowance\\n      s.permit2.permit(\\n        msg.sender,\\n        IAllowanceTransfer.PermitSingle({\\n          details: IAllowanceTransfer.PermitDetails({\\n            token: params.tokenIn,\\n            amount: (uint160)(params.amountIn),\\n            expiration: (uint48)(params.deadline),\\n            nonce: (uint48)(permit.nonce)\\n          }),\\n          spender: address(this),\\n          sigDeadline: (uint256)(params.deadline)\\n        }),\\n        permit.signature\\n      );\\n\\n      // Transfer tokens from msg.sender to the pool\\n      s.permit2.transferFrom(msg.sender, params.pool, (uint160)(params.amountIn), params.tokenIn);\\n    }\\n\\n    bool zeroForOne = params.tokenIn < params.tokenOut ? true : false;\\n\\n    IUniswapV2Pair(params.pool).swap(\\n      zeroForOne ? 0 : amountOut,\\n      zeroForOne ? amountOut : 0,\\n      address(this),\\n      ''\\n    );\\n\\n    uint256 nextTokenOutBalance = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (\\n      nextTokenOutBalance < tokenOutBalancePrev ||\\n      nextTokenOutBalance < tokenOutBalancePrev + amountOut\\n    ) {\\n      revert InsufficienTokensDelivered();\\n    }\\n\\n    // NOTE: Fee is collected as WETH instead of ETH\\n    amountOut = LibStarVault.calculateAndRegisterFee(\\n      params.partner,\\n      params.tokenOut,\\n      params.feeBps,\\n      params.amountOut,\\n      amountOut\\n    );\\n\\n    if (isToEth) {\\n      // Unwrap WETH\\n      s.weth.withdraw(amountOut);\\n\\n      (bool sent, ) = params.recipient.call{value: amountOut}('');\\n\\n      if (!sent) {\\n        revert EthTransferFailed();\\n      }\\n    } else {\\n      IERC20(params.tokenOut).safeTransfer(params.recipient, amountOut);\\n    }\\n\\n    emit LibWarp.Warp(\\n      params.partner,\\n      // NOTE: The tokens may have been rewritten to WETH\\n      isFromEth ? address(0) : params.tokenIn,\\n      isToEth ? address(0) : params.tokenOut,\\n      params.amountIn,\\n      amountOut\\n    );\\n  }\\n\\n  function uniswapV2LikeExactInput(\\n    ExactInputParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut) {\\n    if (block.timestamp > params.deadline) {\\n      revert DeadlineExpired();\\n    }\\n\\n    LibWarp.State storage s = LibWarp.state();\\n\\n    uint256 poolLength = params.pools.length;\\n    bool isFromEth = params.tokens[0] == address(0);\\n    bool isToEth = params.tokens[poolLength] == address(0);\\n\\n    uint256 tokenOutBalancePrev = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokens[poolLength]).balanceOf(address(this));\\n\\n    uint256[] memory amounts = LibUniV2Like.getAmountsOut(\\n      params.poolFeesBps,\\n      params.amountIn,\\n      params.tokens,\\n      params.pools\\n    );\\n\\n    // Enforce minimum amount/max slippage\\n    if (amounts[amounts.length - 1] < LibWarp.applySlippage(params.amountOut, params.slippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    if (isFromEth) {\\n      // From ETH\\n      if (msg.value != params.amountIn) {\\n        revert IncorrectEthValue();\\n      }\\n\\n      s.weth.deposit{value: msg.value}();\\n\\n      // Transfer tokens to the first pool\\n      IERC20(params.tokens[0]).safeTransfer(params.pools[0], params.amountIn);\\n    } else {\\n      // Permit tokens / set allowance\\n      s.permit2.permit(\\n        msg.sender,\\n        IAllowanceTransfer.PermitSingle({\\n          details: IAllowanceTransfer.PermitDetails({\\n            token: params.tokens[0],\\n            amount: (uint160)(params.amountIn),\\n            expiration: (uint48)(params.deadline),\\n            nonce: (uint48)(permit.nonce)\\n          }),\\n          spender: address(this),\\n          sigDeadline: (uint256)(params.deadline)\\n        }),\\n        permit.signature\\n      );\\n\\n      // Transfer tokens from msg.sender to the first pool\\n      s.permit2.transferFrom(\\n        msg.sender,\\n        params.pools[0],\\n        (uint160)(params.amountIn),\\n        params.tokens[0]\\n      );\\n    }\\n\\n    // From https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol\\n    for (uint index; index < poolLength; ) {\\n      uint256 indexPlusOne = index + 1;\\n      bool zeroForOne = params.tokens[index] < params.tokens[indexPlusOne] ? true : false;\\n      address to = index < params.tokens.length - 2 ? params.pools[indexPlusOne] : address(this);\\n\\n      IUniswapV2Pair(params.pools[index]).swap(\\n        zeroForOne ? 0 : amounts[indexPlusOne],\\n        zeroForOne ? amounts[indexPlusOne] : 0,\\n        to,\\n        ''\\n      );\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    uint256 nextTokenOutBalance = IERC20(params.tokens[poolLength]).balanceOf(address(this));\\n\\n    if (\\n      // TOOD: Is this overflow check necessary?\\n      nextTokenOutBalance < tokenOutBalancePrev ||\\n      nextTokenOutBalance < tokenOutBalancePrev + amountOut\\n    ) {\\n      revert InsufficienTokensDelivered();\\n    }\\n\\n    // NOTE: Fee is collected as WETH instead of ETH\\n    amountOut = LibStarVault.calculateAndRegisterFee(\\n      params.partner,\\n      params.tokens[poolLength],\\n      params.feeBps,\\n      params.amountOut,\\n      amounts[poolLength]\\n    );\\n\\n    if (isToEth) {\\n      // Unwrap WETH\\n      s.weth.withdraw(amountOut);\\n\\n      (bool sent, ) = params.recipient.call{value: amountOut}('');\\n\\n      if (!sent) {\\n        revert EthTransferFailed();\\n      }\\n    } else {\\n      IERC20(params.tokens[poolLength]).safeTransfer(params.recipient, amountOut);\\n    }\\n\\n    emit LibWarp.Warp(\\n      params.partner,\\n      // NOTE: The tokens may have been rewritten to WETH\\n      isFromEth ? address(0) : params.tokens[0],\\n      isToEth ? address(0) : params.tokens[poolLength],\\n      params.amountIn,\\n      amountOut\\n    );\\n  }\\n}\\n\"\n    },\n    \"contracts/facets/UniV2RouterFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {IUniswapV2Pair} from '../interfaces/external/IUniswapV2Pair.sol';\\nimport {IUniV2Router} from '../interfaces/IUniV2Router.sol';\\nimport {LibUniV2Router} from '../libraries/LibUniV2Router.sol';\\nimport {LibStarVault} from '../libraries/LibStarVault.sol';\\nimport {LibWarp} from '../libraries/LibWarp.sol';\\nimport {IUniswapV2Pair} from '../interfaces/external/IUniswapV2Pair.sol';\\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\\nimport {IAllowanceTransfer} from '../interfaces/external/IAllowanceTransfer.sol';\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\n\\ncontract UniV2RouterFacet is IUniV2Router {\\n  using SafeERC20 for IERC20;\\n  using Address for address;\\n\\n  function uniswapV2ExactInputSingle(\\n    ExactInputSingleParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut) {\\n    if (block.timestamp > params.deadline) {\\n      revert DeadlineExpired();\\n    }\\n\\n    LibUniV2Router.DiamondStorage storage s = LibUniV2Router.diamondStorage();\\n\\n    bool isFromEth = params.tokenIn == address(0);\\n    bool isToEth = params.tokenOut == address(0);\\n\\n    if (isFromEth) {\\n      params.tokenIn = address(s.weth);\\n    }\\n\\n    if (isToEth) {\\n      params.tokenOut = address(s.weth);\\n    }\\n\\n    address pair = LibUniV2Router.pairFor(s.uniswapV2Factory, params.tokenIn, params.tokenOut);\\n\\n    (uint256 reserveIn, uint256 reserveOut, ) = IUniswapV2Pair(pair).getReserves();\\n\\n    if (params.tokenIn > params.tokenOut) {\\n      (reserveIn, reserveOut) = (reserveOut, reserveIn);\\n    }\\n\\n    unchecked {\\n      amountOut =\\n        ((params.amountIn * 997) * reserveOut) /\\n        ((reserveIn * 1000) + (params.amountIn * 997));\\n    }\\n\\n    // Enforce minimum amount/max slippage\\n    if (amountOut < LibWarp.applySlippage(params.amountOut, params.slippage)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    if (isFromEth) {\\n      // From ETH\\n      if (msg.value != params.amountIn) {\\n        revert IncorrectEthValue();\\n      }\\n\\n      s.weth.deposit{value: msg.value}();\\n\\n      // Transfer tokens to the pool\\n      IERC20(params.tokenIn).safeTransfer(pair, params.amountIn);\\n    } else {\\n      // Permit tokens / set allowance\\n      s.permit2.permit(\\n        msg.sender,\\n        IAllowanceTransfer.PermitSingle({\\n          details: IAllowanceTransfer.PermitDetails({\\n            token: params.tokenIn,\\n            amount: (uint160)(params.amountIn),\\n            expiration: (uint48)(params.deadline),\\n            nonce: (uint48)(permit.nonce)\\n          }),\\n          spender: address(this),\\n          sigDeadline: (uint256)(params.deadline)\\n        }),\\n        permit.signature\\n      );\\n\\n      // Transfer tokens from msg.sender to the pool\\n      s.permit2.transferFrom(msg.sender, pair, (uint160)(params.amountIn), params.tokenIn);\\n    }\\n\\n    bool zeroForOne = params.tokenIn < params.tokenOut ? true : false;\\n\\n    IUniswapV2Pair(pair).swap(\\n      zeroForOne ? 0 : amountOut,\\n      zeroForOne ? amountOut : 0,\\n      address(this),\\n      ''\\n    );\\n\\n    // NOTE: Fee is collected as WETH instead of ETH\\n    amountOut = LibStarVault.calculateAndRegisterFee(\\n      params.partner,\\n      params.tokenOut,\\n      params.feeBps,\\n      params.amountOut,\\n      amountOut\\n    );\\n\\n    if (amountOut == 0) {\\n      revert ZeroAmountOut();\\n    }\\n\\n    if (isToEth) {\\n      // Unwrap WETH\\n      s.weth.withdraw(amountOut);\\n\\n      (bool sent, ) = params.recipient.call{value: amountOut}('');\\n\\n      if (!sent) {\\n        revert EthTransferFailed();\\n      }\\n    } else {\\n      IERC20(params.tokenOut).safeTransfer(params.recipient, amountOut);\\n    }\\n\\n    emit LibWarp.Warp(\\n      params.partner,\\n      // NOTE: The tokens may have been rewritten to WETH\\n      isFromEth ? address(0) : params.tokenIn,\\n      isToEth ? address(0) : params.tokenOut,\\n      params.amountIn,\\n      amountOut\\n    );\\n  }\\n\\n  function uniswapV2ExactInput(\\n    ExactInputParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut) {\\n    if (block.timestamp > params.deadline) {\\n      revert DeadlineExpired();\\n    }\\n\\n    LibUniV2Router.DiamondStorage storage s = LibUniV2Router.diamondStorage();\\n\\n    uint256 pathLengthMinusOne = params.path.length - 1;\\n    bool isFromEth = params.path[0] == address(0);\\n    bool isToEth = params.path[pathLengthMinusOne] == address(0);\\n\\n    if (isFromEth) {\\n      params.path[0] = address(s.weth);\\n    }\\n\\n    if (isToEth) {\\n      params.path[pathLengthMinusOne] = address(s.weth);\\n    }\\n\\n    (address[] memory pairs, uint256[] memory amounts) = LibUniV2Router.getPairsAndAmountsFromPath(\\n      s.uniswapV2Factory,\\n      params.amountIn,\\n      params.path\\n    );\\n\\n    // Enforce minimum amount/max slippage\\n    if (amounts[amounts.length - 1] < LibWarp.applySlippage(params.amountOut, params.slippage)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    if (isFromEth) {\\n      // From ETH\\n      if (msg.value != params.amountIn) {\\n        revert IncorrectEthValue();\\n      }\\n\\n      s.weth.deposit{value: msg.value}();\\n\\n      // Transfer tokens to the first pool\\n      IERC20(params.path[0]).safeTransfer(pairs[0], params.amountIn);\\n    } else {\\n      // Permit tokens / set allowance\\n      s.permit2.permit(\\n        msg.sender,\\n        IAllowanceTransfer.PermitSingle({\\n          details: IAllowanceTransfer.PermitDetails({\\n            token: params.path[0],\\n            amount: (uint160)(params.amountIn),\\n            expiration: (uint48)(params.deadline),\\n            nonce: (uint48)(permit.nonce)\\n          }),\\n          spender: address(this),\\n          sigDeadline: (uint256)(params.deadline)\\n        }),\\n        permit.signature\\n      );\\n\\n      // Transfer tokens from msg.sender to the first pool\\n      s.permit2.transferFrom(msg.sender, pairs[0], (uint160)(params.amountIn), params.path[0]);\\n    }\\n\\n    // https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol\\n    for (uint index; index < pathLengthMinusOne; ) {\\n      uint256 indexPlusOne = index + 1;\\n      bool zeroForOne = params.path[index] < params.path[indexPlusOne] ? true : false;\\n      address to = index < params.path.length - 2 ? pairs[indexPlusOne] : address(this);\\n\\n      IUniswapV2Pair(pairs[index]).swap(\\n        zeroForOne ? 0 : amounts[indexPlusOne],\\n        zeroForOne ? amounts[indexPlusOne] : 0,\\n        to,\\n        ''\\n      );\\n\\n      unchecked {\\n        ++index;\\n      }\\n    }\\n\\n    // NOTE: Fee is collected as WETH instead of ETH\\n    amountOut = LibStarVault.calculateAndRegisterFee(\\n      params.partner,\\n      params.path[pathLengthMinusOne],\\n      params.feeBps,\\n      params.amountOut,\\n      amounts[pathLengthMinusOne]\\n    );\\n\\n    if (amountOut == 0) {\\n      revert ZeroAmountOut();\\n    }\\n\\n    if (isToEth) {\\n      // Unwrap WETH\\n      s.weth.withdraw(amountOut);\\n\\n      (bool sent, ) = params.recipient.call{value: amountOut}('');\\n\\n      if (!sent) {\\n        revert EthTransferFailed();\\n      }\\n    } else {\\n      IERC20(params.path[pathLengthMinusOne]).safeTransfer(params.recipient, amountOut);\\n    }\\n\\n    emit LibWarp.Warp(\\n      params.partner,\\n      // NOTE: The tokens may have been rewritten to WETH\\n      isFromEth ? address(0) : params.path[0],\\n      isToEth ? address(0) : params.path[pathLengthMinusOne],\\n      params.amountIn,\\n      amountOut\\n    );\\n  }\\n}\\n\"\n    },\n    \"contracts/facets/UniV3Like.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {IWETH} from '@uniswap/v2-periphery/contracts/interfaces/IWETH.sol';\\nimport {IUniswapV3Pool} from '../interfaces/external/IUniswapV3Pool.sol';\\nimport {IUniV3Like} from '../interfaces/IUniV3Like.sol';\\nimport {LibUniV3Like} from '../libraries/LibUniV3Like.sol';\\nimport {LibStarVault} from '../libraries/LibStarVault.sol';\\nimport {LibWarp} from '../libraries/LibWarp.sol';\\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\\nimport {IAllowanceTransfer} from '../interfaces/external/IAllowanceTransfer.sol';\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\n\\n/**\\n * A router for any Uniswap V3 fork\\n *\\n * The pools are not trusted to deliver the correct amount of tokens, so the router\\n * verifies this.\\n *\\n * The pool addresses passed in as a parameter instead of being looked up from the factory. The caller\\n * may use `getPair` on the factory to calculate pool addresses.\\n */\\ncontract UniV3Like is IUniV3Like {\\n  using SafeERC20 for IERC20;\\n  using Address for address;\\n\\n  function uniswapV3LikeExactInputSingle(\\n    ExactInputSingleParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut) {\\n    if (block.timestamp > params.deadline) {\\n      revert DeadlineExpired();\\n    }\\n\\n    bool isFromEth = params.tokenIn == address(0);\\n    bool isToEth = params.tokenOut == address(0);\\n\\n    if (isFromEth) {\\n      IWETH weth = LibWarp.state().weth;\\n\\n      params.tokenIn = address(weth);\\n\\n      // From ETH\\n      if (msg.value != params.amountIn) {\\n        revert IncorrectEthValue();\\n      }\\n\\n      weth.deposit{value: msg.value}();\\n    }\\n\\n    if (isToEth) {\\n      params.tokenOut = address(LibWarp.state().weth);\\n    }\\n\\n    uint256 tokenOutBalancePrev = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    bool zeroForOne = params.tokenIn < params.tokenOut;\\n\\n    LibUniV3Like.beforeCallback(\\n      LibUniV3Like.CallbackState({\\n        payer: isFromEth ? address(this) : msg.sender,\\n        token: params.tokenIn,\\n        amount: params.amountIn\\n      })\\n    );\\n\\n    if (!isFromEth) {\\n      // Permit this contract to move tokens from the sender. The actual transfer happens inside UniV3Callback.\\n      LibWarp.state().permit2.permit(\\n        msg.sender,\\n        IAllowanceTransfer.PermitSingle(\\n          IAllowanceTransfer.PermitDetails({\\n            token: params.tokenIn,\\n            amount: (uint160)(params.amountIn),\\n            expiration: params.deadline,\\n            nonce: (uint48)(permit.nonce)\\n          }),\\n          address(this),\\n          params.deadline\\n        ),\\n        permit.signature\\n      );\\n    }\\n\\n    if (zeroForOne) {\\n      (, int256 amountOutSigned) = IUniswapV3Pool(params.pool).swap(\\n        address(this),\\n        zeroForOne,\\n        int256(params.amountIn),\\n        LibUniV3Like.MIN_SQRT_RATIO,\\n        ''\\n      );\\n\\n      amountOut = uint256(-amountOutSigned);\\n    } else {\\n      (int256 amountOutSigned, ) = IUniswapV3Pool(params.pool).swap(\\n        address(this),\\n        zeroForOne,\\n        int256(params.amountIn),\\n        LibUniV3Like.MAX_SQRT_RATIO,\\n        ''\\n      );\\n\\n      amountOut = uint256(-amountOutSigned);\\n    }\\n\\n    LibUniV3Like.afterCallback();\\n\\n    // Enforce minimum amount/max slippage\\n    if (amountOut < LibWarp.applySlippage(params.amountOut, params.slippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    uint256 nextTokenOutBalance = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (\\n      nextTokenOutBalance < tokenOutBalancePrev ||\\n      nextTokenOutBalance < tokenOutBalancePrev + amountOut\\n    ) {\\n      revert InsufficienTokensDelivered();\\n    }\\n\\n    // NOTE: Fee is collected as WETH instead of ETH\\n    amountOut = LibStarVault.calculateAndRegisterFee(\\n      params.partner,\\n      params.tokenOut,\\n      params.feeBps,\\n      params.amountOut,\\n      amountOut\\n    );\\n\\n    if (isToEth) {\\n      // TODO: This is read twice. Compare gas usage\\n      // Unwrap WETH\\n      LibWarp.state().weth.withdraw(amountOut);\\n\\n      (bool sent, ) = params.recipient.call{value: amountOut}('');\\n\\n      if (!sent) {\\n        revert EthTransferFailed();\\n      }\\n    } else {\\n      IERC20(params.tokenOut).safeTransfer(params.recipient, amountOut);\\n    }\\n\\n    emit LibWarp.Warp(\\n      params.partner,\\n      // NOTE: The tokens may have been rewritten to WETH\\n      isFromEth ? address(0) : params.tokenIn,\\n      isToEth ? address(0) : params.tokenOut,\\n      params.amountIn,\\n      amountOut\\n    );\\n  }\\n\\n  function uniswapV3LikeExactInput(\\n    ExactInputParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut) {\\n    if (block.timestamp > params.deadline) {\\n      revert DeadlineExpired();\\n    }\\n\\n    uint256 poolLength = params.pools.length;\\n    bool isFromEth = params.tokens[0] == address(0);\\n    bool isToEth = params.tokens[poolLength] == address(0);\\n    address payer = isFromEth ? address(this) : msg.sender;\\n\\n    if (isFromEth) {\\n      IWETH weth = LibWarp.state().weth;\\n\\n      params.tokens[0] = address(weth);\\n\\n      // From ETH\\n      if (msg.value != params.amountIn) {\\n        revert IncorrectEthValue();\\n      }\\n\\n      weth.deposit{value: msg.value}();\\n    }\\n\\n    if (isToEth) {\\n      params.tokens[poolLength] = address(LibWarp.state().weth);\\n    }\\n\\n    uint256 tokenOutBalancePrev = IERC20(params.tokens[poolLength]).balanceOf(address(this));\\n\\n    amountOut = params.amountIn;\\n\\n    if (!isFromEth) {\\n      // Permit this contract to move tokens from the sender. The actual transfer happens inside UniV3Callback.\\n      LibWarp.state().permit2.permit(\\n        msg.sender,\\n        IAllowanceTransfer.PermitSingle(\\n          IAllowanceTransfer.PermitDetails({\\n            token: params.tokens[0],\\n            amount: (uint160)(params.amountIn),\\n            expiration: params.deadline,\\n            nonce: (uint48)(permit.nonce)\\n          }),\\n          address(this),\\n          (uint256)(params.deadline)\\n        ),\\n        permit.signature\\n      );\\n    }\\n\\n    for (uint index; index < poolLength; ) {\\n      uint256 indexPlusOne;\\n\\n      unchecked {\\n        indexPlusOne = index + 1;\\n      }\\n\\n      bool zeroForOne = params.tokens[index] < params.tokens[indexPlusOne];\\n\\n      LibUniV3Like.beforeCallback(\\n        LibUniV3Like.CallbackState({payer: payer, token: params.tokens[index], amount: amountOut})\\n      );\\n\\n      if (zeroForOne) {\\n        (, int256 amountOutSigned) = IUniswapV3Pool(params.pools[index]).swap(\\n          address(this),\\n          zeroForOne,\\n          int256(amountOut),\\n          LibUniV3Like.MIN_SQRT_RATIO,\\n          ''\\n        );\\n\\n        amountOut = uint256(-amountOutSigned);\\n      } else {\\n        (int256 amountOutSigned, ) = IUniswapV3Pool(params.pools[index]).swap(\\n          address(this),\\n          zeroForOne,\\n          int256(amountOut),\\n          LibUniV3Like.MAX_SQRT_RATIO,\\n          ''\\n        );\\n\\n        amountOut = uint256(-amountOutSigned);\\n      }\\n\\n      LibUniV3Like.afterCallback();\\n\\n      // TODO: Compare check-and-set with set\\n      payer = address(this);\\n\\n      index = indexPlusOne;\\n    }\\n\\n    // Enforce minimum amount/max slippage\\n    if (amountOut < LibWarp.applySlippage(amountOut, params.slippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    uint256 nextTokenOutBalance = IERC20(params.tokens[poolLength]).balanceOf(address(this));\\n\\n    if (\\n      nextTokenOutBalance < tokenOutBalancePrev ||\\n      nextTokenOutBalance < tokenOutBalancePrev + amountOut\\n    ) {\\n      revert InsufficienTokensDelivered();\\n    }\\n\\n    // NOTE: Fee is collected as WETH instead of ETH\\n    amountOut = LibStarVault.calculateAndRegisterFee(\\n      params.partner,\\n      params.tokens[poolLength],\\n      params.feeBps,\\n      params.amountOut,\\n      amountOut\\n    );\\n\\n    if (isToEth) {\\n      // Unwrap WETH\\n      LibWarp.state().weth.withdraw(amountOut);\\n\\n      (bool sent, ) = params.recipient.call{value: amountOut}('');\\n\\n      if (!sent) {\\n        revert EthTransferFailed();\\n      }\\n    } else {\\n      IERC20(params.tokens[poolLength]).safeTransfer(params.recipient, amountOut);\\n    }\\n\\n    emit LibWarp.Warp(\\n      params.partner,\\n      // NOTE: The tokens may have been rewritten to WETH\\n      isFromEth ? address(0) : params.tokens[0],\\n      isToEth ? address(0) : params.tokens[poolLength],\\n      params.amountIn,\\n      amountOut\\n    );\\n  }\\n}\\n\"\n    },\n    \"contracts/facets/WarpLink.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {LibWarp} from '../libraries/LibWarp.sol';\\nimport {LibStarVault} from '../libraries/LibStarVault.sol';\\nimport {Stream} from '../libraries/Stream.sol';\\nimport {LibUniV2Like} from '../libraries/LibUniV2Like.sol';\\nimport {IUniswapV2Pair} from '../interfaces/external/IUniswapV2Pair.sol';\\nimport {IWarpLink} from '../interfaces/IWarpLink.sol';\\nimport {LibUniV3Like} from '../libraries/LibUniV3Like.sol';\\nimport {IUniV3Callback} from '../interfaces/IUniV3Callback.sol';\\nimport {IUniswapV3Pool} from '../interfaces/external/IUniswapV3Pool.sol';\\nimport {LibCurve} from '../libraries/LibCurve.sol';\\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\\nimport {IAllowanceTransfer} from '../interfaces/external/IAllowanceTransfer.sol';\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\nimport {IStargateRouter} from '../interfaces/external/IStargateRouter.sol';\\nimport {IStargateReceiver} from '../interfaces/external/IStargateReceiver.sol';\\nimport {IStargateComposer} from '../interfaces/external/IStargateComposer.sol';\\n\\nabstract contract WarpLinkCommandTypes {\\n  uint256 internal constant COMMAND_TYPE_WRAP = 1;\\n  uint256 internal constant COMMAND_TYPE_UNWRAP = 2;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT_SINGLE = 3;\\n  uint256 internal constant COMMAND_TYPE_SPLIT = 4;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT = 5;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT_SINGLE = 6;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT = 7;\\n  uint256 internal constant COMMAND_TYPE_WARP_CURVE_EXACT_INPUT_SINGLE = 8;\\n  uint256 internal constant COMMAND_TYPE_JUMP_STARGATE = 9;\\n}\\n\\ncontract WarpLink is IWarpLink, IStargateReceiver, WarpLinkCommandTypes {\\n  using SafeERC20 for IERC20;\\n  using Stream for uint256;\\n\\n  struct WarpUniV2LikeWarpSingleParams {\\n    address tokenOut;\\n    address pool;\\n    bool zeroForOne; // tokenIn < tokenOut\\n    uint16 poolFeeBps;\\n  }\\n\\n  struct WarpUniV2LikeExactInputParams {\\n    // NOTE: Excluding the first token\\n    address[] tokens;\\n    address[] pools;\\n    uint16[] poolFeesBps;\\n  }\\n\\n  struct WarpUniV3LikeExactInputSingleParams {\\n    address tokenOut;\\n    address pool;\\n    bool zeroForOne; // tokenIn < tokenOut\\n    uint16 poolFeeBps;\\n  }\\n\\n  struct WarpCurveExactInputSingleParams {\\n    address tokenOut;\\n    address pool;\\n    uint8 tokenIndexIn;\\n    uint8 tokenIndexOut;\\n    uint8 kind;\\n    bool underlying;\\n  }\\n\\n  struct JumpStargateParams {\\n    uint16 dstChainId;\\n    uint256 srcPoolId;\\n    uint256 dstPoolId;\\n    uint256 dstGasForCall;\\n    bytes payload;\\n  }\\n\\n  struct TransientState {\\n    address paramPartner;\\n    uint16 paramFeeBps;\\n    address paramRecipient;\\n    address paramTokenIn;\\n    uint256 paramAmountIn;\\n    uint256 paramAmountOut;\\n    uint16 paramSlippageBps;\\n    uint48 paramDeadline;\\n    uint256 amount;\\n    address payer;\\n    address token;\\n    /**\\n     * 0 or 1\\n     */\\n    uint256 jumped;\\n    /**\\n     * The amount of native value not spent. The native value starts off as\\n     * `msg.value - params.amount` and is decreased by spending money on jumps.\\n     *\\n     * Any leftover native value is returned to `msg.sender`\\n     */\\n    uint256 nativeValueRemaining;\\n  }\\n\\n  function processSplit(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    uint256 parts = stream.readUint8();\\n    uint256 amountRemaining = t.amount;\\n    uint256 amountOutSum;\\n\\n    if (parts < 2) {\\n      revert NotEnoughParts();\\n    }\\n\\n    // Store the token out for the previous part to ensure every part has the same output token\\n    address firstPartTokenOut;\\n    address firstPartPayerOut;\\n\\n    for (uint256 partIndex; partIndex < parts; ) {\\n      // TODO: Unchecked?\\n      // For the last part, use the remaining amount. Else read the % from the stream\\n      uint256 partAmount = partIndex < parts - 1\\n        ? (t.amount * stream.readUint16()) / 10_000\\n        : amountRemaining;\\n\\n      if (partAmount > amountRemaining) {\\n        revert InsufficientAmountRemaining();\\n      }\\n\\n      amountRemaining -= partAmount;\\n\\n      TransientState memory tPart;\\n\\n      tPart.amount = partAmount;\\n      tPart.payer = t.payer;\\n      tPart.token = t.token;\\n\\n      tPart = engageInternal(stream, tPart);\\n\\n      if (tPart.jumped == 1) {\\n        revert IllegalJumpInSplit();\\n      }\\n\\n      if (partIndex == 0) {\\n        firstPartPayerOut = tPart.payer;\\n        firstPartTokenOut = tPart.token;\\n      } else {\\n        if (tPart.token != firstPartTokenOut) {\\n          revert InconsistentPartTokenOut();\\n        }\\n\\n        if (tPart.payer != firstPartPayerOut) {\\n          revert InconsistentPartPayerOut();\\n        }\\n      }\\n\\n      // NOTE: Checked\\n      amountOutSum += tPart.amount;\\n\\n      unchecked {\\n        partIndex++;\\n      }\\n    }\\n\\n    t.payer = firstPartPayerOut;\\n    t.token = firstPartTokenOut;\\n    t.amount = amountOutSum;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Wrap ETH into WETH using the WETH contract\\n   *\\n   * The ETH must already be in this contract\\n   *\\n   * The next token will be WETH, with the amount and payer unchanged\\n   */\\n  function processWrap(TransientState memory t) internal returns (TransientState memory) {\\n    LibWarp.State storage s = LibWarp.state();\\n\\n    if (t.token != address(0)) {\\n      revert UnexpectedTokenForWrap();\\n    }\\n\\n    if (t.payer != address(this)) {\\n      // It's not possible to move a user's ETH\\n      revert UnexpectedPayerForWrap();\\n    }\\n\\n    t.token = address(s.weth);\\n\\n    s.weth.deposit{value: t.amount}();\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Unwrap WETH into ETH using the WETH contract\\n   *\\n   * The payer can be the sender or this contract. After this operation, the\\n   * token will be ETH (0) and the amount will be unchanged. The next payer\\n   * will be this contract.\\n   */\\n  function processUnwrap(TransientState memory t) internal returns (TransientState memory) {\\n    LibWarp.State storage s = LibWarp.state();\\n\\n    if (t.token != address(s.weth)) {\\n      revert UnexpectedTokenForUnwrap();\\n    }\\n\\n    address prevPayer = t.payer;\\n    bool shouldMoveTokensFirst = prevPayer != address(this);\\n\\n    if (shouldMoveTokensFirst) {\\n      t.payer = address(this);\\n    }\\n\\n    t.token = address(0);\\n\\n    if (shouldMoveTokensFirst) {\\n      s.permit2.transferFrom(prevPayer, address(this), (uint160)(t.amount), address(s.weth));\\n    }\\n\\n    s.weth.withdraw(t.amount);\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Uniswap V2-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *   - tokenOut (address)\\n   *   - pool (address)\\n   *   - zeroForOne (0 or 1, uint8)\\n   *   - poolFeeBps (uint16)\\n   */\\n  function processWarpUniV2LikeExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    if (t.token == address(0)) {\\n      revert NativeTokenNotSupported();\\n    }\\n\\n    WarpUniV2LikeWarpSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n    params.zeroForOne = stream.readUint8() == 1;\\n    params.poolFeeBps = stream.readUint16();\\n\\n    if (t.payer == address(this)) {\\n      // Transfer tokens to the pool\\n      IERC20(t.token).safeTransfer(params.pool, t.amount);\\n    } else {\\n      // Transfer tokens from the sender to the pool\\n      LibWarp.state().permit2.transferFrom(t.payer, params.pool, (uint160)(t.amount), t.token);\\n\\n      // Update the payer to this contract\\n      t.payer = address(this);\\n    }\\n\\n    (uint256 reserveIn, uint256 reserveOut, ) = IUniswapV2Pair(params.pool).getReserves();\\n\\n    if (!params.zeroForOne) {\\n      // Token in > token out\\n      (reserveIn, reserveOut) = (reserveOut, reserveIn);\\n    }\\n\\n    unchecked {\\n      // For 30 bps, multiply by 997\\n      uint256 feeFactor = 10_000 - params.poolFeeBps;\\n\\n      t.amount =\\n        ((t.amount * feeFactor) * reserveOut) /\\n        ((reserveIn * 10_000) + (t.amount * feeFactor));\\n    }\\n\\n    // NOTE: This check can be avoided if the factory is trusted\\n    uint256 balancePrev = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    IUniswapV2Pair(params.pool).swap(\\n      params.zeroForOne ? 0 : t.amount,\\n      params.zeroForOne ? t.amount : 0,\\n      address(this),\\n      ''\\n    );\\n\\n    uint256 balanceNext = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (balanceNext < balancePrev || balanceNext < balancePrev + t.amount) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    t.token = params.tokenOut;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp multiple tokens in a series of Uniswap V2-like pools\\n   *\\n   * Since the pools are not trusted, the balance of `params.tokenOut` is checked\\n   * before the first swap and after the last swap to ensure the correct amount\\n   * was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the last swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - pool length (uint8)\\n   *  - tokens (address 0, address 1, address pool length - 1) excluding the first\\n   *  - pools (address 0, address 1, address pool length - 1)\\n   *  - pool fees (uint16 0, uint16 1, uint16 pool length - 1)\\n   */\\n  function processWarpUniV2LikeExactInput(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV2LikeExactInputParams memory params;\\n\\n    uint256 poolLength = stream.readUint8();\\n\\n    params.tokens = new address[](poolLength + 1);\\n\\n    // The params will contain all tokens including the first to remain compatible\\n    // with the LibUniV2Like library's getAmountsOut function\\n    params.tokens[0] = t.token;\\n\\n    for (uint256 index; index < poolLength; ) {\\n      params.tokens[index + 1] = stream.readAddress();\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    params.pools = stream.readAddresses(poolLength);\\n    params.poolFeesBps = stream.readUint16s(poolLength);\\n\\n    uint256 tokenOutBalancePrev = IERC20(params.tokens[poolLength]).balanceOf(address(this));\\n\\n    uint256[] memory amounts = LibUniV2Like.getAmountsOut(\\n      params.poolFeesBps,\\n      t.amount,\\n      params.tokens,\\n      params.pools\\n    );\\n\\n    if (t.payer == address(this)) {\\n      // Transfer tokens from this contract to the first pool\\n      IERC20(t.token).safeTransfer(params.pools[0], t.amount);\\n    } else {\\n      // Transfer tokens from the sender to the first pool\\n      LibWarp.state().permit2.transferFrom(t.payer, params.pools[0], (uint160)(t.amount), t.token);\\n\\n      // Update the payer to this contract\\n      t.payer = address(this);\\n    }\\n\\n    // Same as UniV2Like\\n    for (uint index; index < poolLength; ) {\\n      uint256 indexPlusOne = index + 1;\\n      bool zeroForOne = params.tokens[index] < params.tokens[indexPlusOne] ? true : false;\\n      address to = index < params.tokens.length - 2 ? params.pools[indexPlusOne] : address(this);\\n\\n      IUniswapV2Pair(params.pools[index]).swap(\\n        zeroForOne ? 0 : amounts[indexPlusOne],\\n        zeroForOne ? amounts[indexPlusOne] : 0,\\n        to,\\n        ''\\n      );\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    uint256 nextTokenOutBalance = IERC20(params.tokens[poolLength]).balanceOf(address(this));\\n\\n    t.amount = amounts[amounts.length - 1];\\n\\n    if (\\n      // TOOD: Is this overflow check necessary?\\n      nextTokenOutBalance < tokenOutBalancePrev ||\\n      nextTokenOutBalance < tokenOutBalancePrev + t.amount\\n    ) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    t.token = params.tokens[poolLength];\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Uniswap V3-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - tokenOut (address)\\n   *  - pool (address)\\n   */\\n  function processWarpUniV3LikeExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV3LikeExactInputSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n\\n    if (t.token == address(0)) {\\n      revert NativeTokenNotSupported();\\n    }\\n\\n    // NOTE: The pool is untrusted\\n    uint256 balancePrev = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    bool zeroForOne = t.token < params.tokenOut;\\n\\n    LibUniV3Like.beforeCallback(\\n      LibUniV3Like.CallbackState({payer: t.payer, token: t.token, amount: t.amount})\\n    );\\n\\n    if (zeroForOne) {\\n      (, int256 amountOutSigned) = IUniswapV3Pool(params.pool).swap(\\n        address(this),\\n        zeroForOne,\\n        int256(t.amount),\\n        LibUniV3Like.MIN_SQRT_RATIO,\\n        ''\\n      );\\n\\n      t.amount = uint256(-amountOutSigned);\\n    } else {\\n      (int256 amountOutSigned, ) = IUniswapV3Pool(params.pool).swap(\\n        address(this),\\n        zeroForOne,\\n        int256(t.amount),\\n        LibUniV3Like.MAX_SQRT_RATIO,\\n        ''\\n      );\\n\\n      t.amount = uint256(-amountOutSigned);\\n    }\\n\\n    LibUniV3Like.afterCallback();\\n\\n    uint256 balanceNext = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (balanceNext < balancePrev || balanceNext < balancePrev + t.amount) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    t.token = params.tokenOut;\\n\\n    // TODO: Compare check-and-set vs set\\n    t.payer = address(this);\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp multiple tokens in a series of Uniswap V3-like pools\\n   *\\n   * Since the pools are not trusted, the balance of `params.tokenOut` is checked\\n   * before the first swap and after the last swap to ensure the correct amount\\n   * was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the last swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - pool length (uint8)\\n   *  - tokens (address 0, address 1, address pool length - 1) excluding the first\\n   *  - pools (address 0, address 1, address pool length - 1)\\n   */\\n  function processWarpUniV3LikeExactInput(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV2LikeExactInputParams memory params;\\n\\n    uint256 poolLength = stream.readUint8();\\n\\n    // The first token is not included\\n    params.tokens = stream.readAddresses(poolLength);\\n    params.pools = stream.readAddresses(poolLength);\\n\\n    address lastToken = params.tokens[poolLength - 1];\\n\\n    uint256 tokenOutBalancePrev = IERC20(lastToken).balanceOf(address(this));\\n\\n    for (uint index; index < poolLength; ) {\\n      address tokenIn = index == 0 ? t.token : params.tokens[index - 1]; // TOOD: unchecked\\n      t.token = params.tokens[index];\\n      bool zeroForOne = tokenIn < t.token;\\n\\n      LibUniV3Like.beforeCallback(\\n        LibUniV3Like.CallbackState({payer: t.payer, token: tokenIn, amount: t.amount})\\n      );\\n\\n      if (index == 0) {\\n        // Update the payer to this contract\\n        // TODO: Compare check-and-set vs set\\n        t.payer = address(this);\\n      }\\n\\n      address pool = params.pools[index];\\n\\n      if (zeroForOne) {\\n        (, int256 amountOutSigned) = IUniswapV3Pool(pool).swap(\\n          address(this),\\n          zeroForOne,\\n          int256(t.amount),\\n          LibUniV3Like.MIN_SQRT_RATIO,\\n          ''\\n        );\\n\\n        t.amount = uint256(-amountOutSigned);\\n      } else {\\n        (int256 amountOutSigned, ) = IUniswapV3Pool(pool).swap(\\n          address(this),\\n          zeroForOne,\\n          int256(t.amount),\\n          LibUniV3Like.MAX_SQRT_RATIO,\\n          ''\\n        );\\n\\n        t.amount = uint256(-amountOutSigned);\\n      }\\n\\n      LibUniV3Like.afterCallback();\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    uint256 nextTokenOutBalance = IERC20(t.token).balanceOf(address(this));\\n\\n    if (\\n      // TOOD: Is this overflow check necessary?\\n      nextTokenOutBalance < tokenOutBalancePrev ||\\n      nextTokenOutBalance < tokenOutBalancePrev + t.amount\\n    ) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Curve-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token may be ETH (0)\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - tokenOut (address)\\n   *  - pool (address)\\n   */\\n  function processWarpCurveExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpCurveExactInputSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n    params.tokenIndexIn = stream.readUint8();\\n    params.tokenIndexOut = stream.readUint8();\\n    params.kind = stream.readUint8();\\n    params.underlying = stream.readUint8() == 1;\\n\\n    // NOTE: The pool is untrusted\\n    bool isFromEth = t.token == address(0);\\n    bool isToEth = params.tokenOut == address(0);\\n\\n    if (t.payer != address(this)) {\\n      // Transfer tokens from the sender to this contract\\n      LibWarp.state().permit2.transferFrom(t.payer, address(this), (uint160)(t.amount), t.token);\\n\\n      // Update the payer to this contract\\n      t.payer = address(this);\\n    }\\n\\n    uint256 balancePrev = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (!isFromEth) {\\n      // TODO: Is this necessary to support USDT?\\n      IERC20(t.token).forceApprove(params.pool, t.amount);\\n    }\\n\\n    LibCurve.exchange({\\n      kind: params.kind,\\n      underlying: params.underlying,\\n      pool: params.pool,\\n      eth: isFromEth ? t.amount : 0,\\n      i: params.tokenIndexIn,\\n      j: params.tokenIndexOut,\\n      dx: t.amount,\\n      // NOTE: There is no need to set a min out since the balance will be verified\\n      min_dy: 0\\n    });\\n\\n    uint256 balanceNext = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    t.token = params.tokenOut;\\n    t.amount = balanceNext - balancePrev;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Cross-chain callback from Stargate\\n   *\\n   * The tokens have already been received by this contract, `t.payer` is set to this contract\\n   * before `sgReceive` is called by the router.\\n   *\\n   * The `_nonce` field is not checked since it's assumed that LayerZero will not deliver the\\n   * same message more than once.\\n   *\\n   * The Stargate composer is trusted, meaning `_token` and `amountLD` is not verified. Should the\\n   * Stargate composer be compromised, an attacker can drain this contract.\\n   *\\n   * If the payload can not be decoded, tokens are left in this contract.\\n   * If execution runs out of gas, tokens are left in this contract.\\n   *\\n   * If an error occurs during engage, such as insufficient output amount, tokens are refunded\\n   * to the recipient.\\n   *\\n   * See https://stargateprotocol.gitbook.io/stargate/interfaces/evm-solidity-interfaces/istargatereceiver.sol\\n   */\\n  function sgReceive(\\n    uint16, // _srcChainId\\n    bytes memory _srcAddress,\\n    uint256, // _nonce\\n    address _token,\\n    uint256 amountLD,\\n    bytes memory payload\\n  ) external {\\n    if (msg.sender != address(LibWarp.state().stargateComposer)) {\\n      revert InvalidSgReceiverSender();\\n    }\\n\\n    // NOTE: Addresses cannot be decode from bytes using `abi.decode`\\n    // From https://ethereum.stackexchange.com/a/50528\\n    address srcAddress;\\n\\n    assembly {\\n      srcAddress := mload(add(_srcAddress, 20))\\n    }\\n\\n    if (srcAddress != address(this)) {\\n      // NOTE: This assumes that this contract is deployed at the same address on every chain\\n      revert InvalidSgReceiveSrcAddress();\\n    }\\n\\n    Params memory params = abi.decode(payload, (Params));\\n\\n    if (params.tokenIn == address(0)) {\\n      // Distinguish between receiving ETH and SGETH. Note that the `params.tokenIn` address is useless\\n      // otherwise because `_token` may be different on this chain\\n      _token = address(0);\\n    }\\n\\n    try\\n      IWarpLink(this).warpLinkEngage{value: _token == address(0) ? amountLD : 0}(\\n        Params({\\n          partner: params.partner,\\n          feeBps: params.feeBps,\\n          slippageBps: params.slippageBps,\\n          recipient: params.recipient,\\n          tokenIn: _token,\\n          tokenOut: params.tokenOut,\\n          amountIn: amountLD,\\n          amountOut: params.amountOut,\\n          deadline: params.deadline,\\n          commands: params.commands\\n        }),\\n        PermitParams({nonce: 0, signature: ''})\\n      )\\n    {} catch {\\n      // Refund tokens to the recipient\\n      if (_token == address(0)) {\\n        payable(params.recipient).transfer(amountLD);\\n      } else {\\n        IERC20(_token).safeTransfer(params.recipient, amountLD);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Jump to another chain using the Stargate bridge\\n   *\\n   * After this operation, the token will be unchanged and `t.amount` will\\n   * be how much was sent. `t.jumped` will be set to `1` to indicate\\n   * that no more commands should be run\\n   *\\n   * The user may construct a command where `srcPoolId` is not for `t.token`. This is harmless\\n   * because only `t.token` can be moved by Stargate.\\n   *\\n   * This command must not run inside of a split.\\n   *\\n   * If the jump is the final operation, meaning the tokens will be delivered to the recipient on\\n   * the other chain without further processing, the fee is charged and the `Warp` event is emitted\\n   * in this function.\\n   *\\n   * A bridge fee must be paid in the native token. This fee is determined with\\n   * `IStargateRouter.quoteLayerZeroFee`\\n   *\\n   * The value for `t.token` remains the same and is not chained.\\n   *\\n   * Params are read from the stream as:\\n   *   - dstChainId (uint16)\\n   *   - srcPoolId (uint8)\\n   *   - dstPoolId (uint8)\\n   *   - dstGasForCall (uint32)\\n   *   - tokenOut (address) when `dstGasForCall` > 0\\n   *   - amountOut (uint256) when `dstGasForCall` > 0\\n   *   - commands (uint256 length, ...bytes) when `dstGasForCall` > 0\\n   */\\n  function processJumpStargate(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    // TODO: Does this use the same gas than (a, b, c,) = (stream.read, ...)?\\n    JumpStargateParams memory params;\\n    params.dstChainId = stream.readUint16();\\n    params.srcPoolId = stream.readUint8();\\n    params.dstPoolId = stream.readUint8();\\n    params.dstGasForCall = stream.readUint32();\\n\\n    if (params.dstGasForCall > 0) {\\n      // NOTE: `amountIn` is left as zero\\n      Params memory destParams;\\n      destParams.partner = t.paramPartner;\\n      destParams.feeBps = t.paramFeeBps;\\n      destParams.slippageBps = t.paramSlippageBps;\\n      destParams.recipient = t.paramRecipient;\\n      // NOTE: Used to distinguish ETH vs SGETH. Tokens on the other chain do not not necessarily have\\n      // the same address as on this chain\\n      destParams.tokenIn = t.token;\\n      destParams.tokenOut = stream.readAddress();\\n      destParams.amountOut = stream.readUint256();\\n      destParams.deadline = t.paramDeadline;\\n      destParams.commands = stream.readBytes();\\n      params.payload = abi.encode(destParams);\\n    }\\n\\n    if (t.token != t.paramTokenIn) {\\n      if (params.payload.length == 0) {\\n        // If the tokens are being delivered directly to the recipient without a second\\n        // WarpLink engage, the fee is charged on this chain\\n        // NOTE: It is not possible to know how many tokens were delivered. Therfore positive slippage\\n        // is never charged\\n        t.amount = LibStarVault.calculateAndRegisterFee(\\n          t.paramPartner,\\n          t.token,\\n          t.paramFeeBps,\\n          t.amount,\\n          t.amount\\n        );\\n      }\\n\\n      emit LibWarp.Warp(t.paramPartner, t.paramTokenIn, t.token, t.paramAmountIn, t.amount);\\n    }\\n\\n    // Enforce minimum amount/max slippage\\n    if (t.amount < LibWarp.applySlippage(t.paramAmountOut, t.paramSlippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    IStargateComposer stargateComposer = LibWarp.state().stargateComposer;\\n\\n    if (t.token != address(0)) {\\n      if (t.payer != address(this)) {\\n        // Transfer tokens from the sender to this contract\\n        LibWarp.state().permit2.transferFrom(t.payer, address(this), (uint160)(t.amount), t.token);\\n\\n        // Update the payer to this contract\\n        t.payer = address(this);\\n      }\\n\\n      // Allow Stargate to transfer the tokens. When there is a payload, the composer is used, else the router\\n      IERC20(t.token).forceApprove(\\n        params.payload.length == 0 ? stargateComposer.stargateRouter() : address(stargateComposer),\\n        t.amount\\n      );\\n    }\\n\\n    t.jumped = 1;\\n\\n    // Swap on the composer if there is a payload, else the router\\n    IStargateRouter(\\n      params.payload.length == 0 ? stargateComposer.stargateRouter() : address(stargateComposer)\\n    ).swap{\\n      value: t.token == address(0) ? t.amount + t.nativeValueRemaining : t.nativeValueRemaining\\n    }({\\n      _dstChainId: params.dstChainId,\\n      _srcPoolId: params.srcPoolId,\\n      _dstPoolId: params.dstPoolId,\\n      //  NOTE: There is no guarantee that `msg.sender` can handle receiving tokens/ETH\\n      // TODO: Use `msg.sender` if it's EOA, else use this contract\\n      _refundAddress: payable(address(this)),\\n      _amountLD: t.amount,\\n      // NOTE: This is imperfect because the user may already have eaten some slippage and may eat\\n      // more on the other chain. It also assumes the tokens are of nearly equal value\\n      _minAmountLD: LibWarp.applySlippage(t.amount, t.paramSlippageBps),\\n      _lzTxParams: IStargateRouter.lzTxObj({\\n        dstGasForCall: params.dstGasForCall,\\n        dstNativeAmount: 0,\\n        dstNativeAddr: ''\\n      }),\\n      // NOTE: This assumes the contract is deployed at the same address on every chain.\\n      // If this is not the case, a new param needs to be added with the next WarpLink address\\n      _to: abi.encodePacked(params.payload.length > 0 ? address(this) : t.paramRecipient),\\n      _payload: params.payload\\n    });\\n\\n    t.nativeValueRemaining = 0;\\n\\n    return t;\\n  }\\n\\n  function engageInternal(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    uint256 commandCount = stream.readUint8();\\n\\n    // TODO: End of stream check?\\n    for (uint256 commandIndex; commandIndex < commandCount; commandIndex++) {\\n      // TODO: Unchecked?\\n      uint256 commandType = stream.readUint8();\\n\\n      if (commandType == COMMAND_TYPE_WRAP) {\\n        t = processWrap(t);\\n      } else if (commandType == COMMAND_TYPE_UNWRAP) {\\n        t = processUnwrap(t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT_SINGLE) {\\n        t = processWarpUniV2LikeExactInputSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_SPLIT) {\\n        t = processSplit(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT) {\\n        t = processWarpUniV2LikeExactInput(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT_SINGLE) {\\n        t = processWarpUniV3LikeExactInputSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT) {\\n        t = processWarpUniV3LikeExactInput(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_CURVE_EXACT_INPUT_SINGLE) {\\n        t = processWarpCurveExactInputSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_JUMP_STARGATE) {\\n        if (commandIndex != commandCount - 1) {\\n          revert JumpMustBeLastCommand();\\n        }\\n\\n        t = processJumpStargate(stream, t);\\n      } else {\\n        revert UnhandledCommand();\\n      }\\n    }\\n\\n    return t;\\n  }\\n\\n  function warpLinkEngage(Params memory params, PermitParams calldata permit) external payable {\\n    if (block.timestamp > params.deadline) {\\n      revert DeadlineExpired();\\n    }\\n\\n    TransientState memory t;\\n    t.paramPartner = params.partner;\\n    t.paramFeeBps = params.feeBps;\\n    t.paramSlippageBps = params.slippageBps;\\n    t.paramRecipient = params.recipient;\\n    t.paramTokenIn = params.tokenIn;\\n    t.paramAmountIn = params.amountIn;\\n    t.paramAmountOut = params.amountOut;\\n    t.paramSlippageBps = params.slippageBps;\\n    t.paramDeadline = params.deadline;\\n    t.amount = params.amountIn;\\n    t.token = params.tokenIn;\\n\\n    if (params.tokenIn == address(0)) {\\n      if (msg.value < params.amountIn) {\\n        revert InsufficientEthValue();\\n      }\\n\\n      t.nativeValueRemaining = msg.value - params.amountIn;\\n\\n      // The ETH has already been moved to this contract\\n      t.payer = address(this);\\n    } else {\\n      // Tokens will initially moved from the sender\\n      t.payer = msg.sender;\\n\\n      t.nativeValueRemaining = msg.value;\\n\\n      // Permit tokens / set allowance\\n      // The signature is omitted when `warpLinkEngage` is called from `sgReceive`\\n      if (permit.signature.length > 0) {\\n        LibWarp.state().permit2.permit(\\n          msg.sender,\\n          IAllowanceTransfer.PermitSingle({\\n            details: IAllowanceTransfer.PermitDetails({\\n              token: params.tokenIn,\\n              amount: (uint160)(params.amountIn),\\n              expiration: (uint48)(params.deadline),\\n              nonce: (uint48)(permit.nonce)\\n            }),\\n            spender: address(this),\\n            sigDeadline: (uint256)(params.deadline)\\n          }),\\n          permit.signature\\n        );\\n      }\\n    }\\n\\n    uint256 stream = Stream.createStream(params.commands);\\n\\n    t = engageInternal(stream, t);\\n\\n    uint256 amountOut = t.amount;\\n    address tokenOut = t.token;\\n\\n    if (tokenOut != params.tokenOut) {\\n      revert UnexpectedTokenOut();\\n    }\\n\\n    // Enforce minimum amount/max slippage\\n    if (amountOut < LibWarp.applySlippage(params.amountOut, params.slippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    if (t.jumped == 1) {\\n      // The coins have jumped away from this chain. Fees are colelcted before\\n      // the jump or on the other chain.\\n      //\\n      // `t.nativeValueRemaining` is not checked since it should be zero\\n      return;\\n    }\\n\\n    // Collect fees\\n    amountOut = LibStarVault.calculateAndRegisterFee(\\n      params.partner,\\n      params.tokenOut,\\n      params.feeBps,\\n      params.amountOut,\\n      amountOut\\n    );\\n\\n    if (amountOut == 0) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    // Deliver tokens\\n    if (tokenOut == address(0)) {\\n      payable(params.recipient).transfer(amountOut);\\n    } else {\\n      IERC20(tokenOut).safeTransfer(params.recipient, amountOut);\\n    }\\n\\n    if (t.nativeValueRemaining > 0) {\\n      // TODO: Is this the correct recipient?\\n      payable(msg.sender).transfer(t.nativeValueRemaining);\\n    }\\n\\n    emit LibWarp.Warp(params.partner, params.tokenIn, params.tokenOut, params.amountIn, amountOut);\\n  }\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IAllowanceTransfer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IEIP712} from './IEIP712.sol';\\n\\n/// @title AllowanceTransfer\\n/// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface IAllowanceTransfer is IEIP712 {\\n  /// @notice Thrown when an allowance on a token has expired.\\n  /// @param deadline The timestamp at which the allowed amount is no longer valid\\n  error AllowanceExpired(uint256 deadline);\\n\\n  /// @notice Thrown when an allowance on a token has been depleted.\\n  /// @param amount The maximum amount allowed\\n  error InsufficientAllowance(uint256 amount);\\n\\n  /// @notice Thrown when too many nonces are invalidated.\\n  error ExcessiveInvalidation();\\n\\n  /// @notice Emits an event when the owner successfully invalidates an ordered nonce.\\n  event NonceInvalidation(\\n    address indexed owner,\\n    address indexed token,\\n    address indexed spender,\\n    uint48 newNonce,\\n    uint48 oldNonce\\n  );\\n\\n  /// @notice Emits an event when the owner successfully sets permissions on a token for the spender.\\n  event Approval(\\n    address indexed owner,\\n    address indexed token,\\n    address indexed spender,\\n    uint160 amount,\\n    uint48 expiration\\n  );\\n\\n  /// @notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\\n  event Permit(\\n    address indexed owner,\\n    address indexed token,\\n    address indexed spender,\\n    uint160 amount,\\n    uint48 expiration,\\n    uint48 nonce\\n  );\\n\\n  /// @notice Emits an event when the owner sets the allowance back to 0 with the lockdown function.\\n  event Lockdown(address indexed owner, address token, address spender);\\n\\n  /// @notice The permit data for a token\\n  struct PermitDetails {\\n    // ERC20 token address\\n    address token;\\n    // the maximum amount allowed to spend\\n    uint160 amount;\\n    // timestamp at which a spender's token allowances become invalid\\n    uint48 expiration;\\n    // an incrementing value indexed per owner,token,and spender for each signature\\n    uint48 nonce;\\n  }\\n\\n  /// @notice The permit message signed for a single token allownce\\n  struct PermitSingle {\\n    // the permit data for a single token alownce\\n    PermitDetails details;\\n    // address permissioned on the allowed tokens\\n    address spender;\\n    // deadline on the permit signature\\n    uint256 sigDeadline;\\n  }\\n\\n  /// @notice The permit message signed for multiple token allowances\\n  struct PermitBatch {\\n    // the permit data for multiple token allowances\\n    PermitDetails[] details;\\n    // address permissioned on the allowed tokens\\n    address spender;\\n    // deadline on the permit signature\\n    uint256 sigDeadline;\\n  }\\n\\n  /// @notice The saved permissions\\n  /// @dev This info is saved per owner, per token, per spender and all signed over in the permit message\\n  /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n  struct PackedAllowance {\\n    // amount allowed\\n    uint160 amount;\\n    // permission expiry\\n    uint48 expiration;\\n    // an incrementing value indexed per owner,token,and spender for each signature\\n    uint48 nonce;\\n  }\\n\\n  /// @notice A token spender pair.\\n  struct TokenSpenderPair {\\n    // the token the spender is approved\\n    address token;\\n    // the spender address\\n    address spender;\\n  }\\n\\n  /// @notice Details for a token transfer.\\n  struct AllowanceTransferDetails {\\n    // the owner of the token\\n    address from;\\n    // the recipient of the token\\n    address to;\\n    // the amount of the token\\n    uint160 amount;\\n    // the token to be transferred\\n    address token;\\n  }\\n\\n  /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\\n  /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\\n  /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\\n  function allowance(\\n    address user,\\n    address token,\\n    address spender\\n  ) external view returns (uint160 amount, uint48 expiration, uint48 nonce);\\n\\n  /// @notice Approves the spender to use up to amount of the specified token up until the expiration\\n  /// @param token The token to approve\\n  /// @param spender The spender address to approve\\n  /// @param amount The approved amount of the token\\n  /// @param expiration The timestamp at which the approval is no longer valid\\n  /// @dev The packed allowance also holds a nonce, which will stay unchanged in approve\\n  /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n  function approve(address token, address spender, uint160 amount, uint48 expiration) external;\\n\\n  /// @notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\\n  /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n  /// @param owner The owner of the tokens being approved\\n  /// @param permitSingle Data signed over by the owner specifying the terms of approval\\n  /// @param signature The owner's signature over the permit data\\n  function permit(\\n    address owner,\\n    PermitSingle memory permitSingle,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\\n  /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n  /// @param owner The owner of the tokens being approved\\n  /// @param permitBatch Data signed over by the owner specifying the terms of approval\\n  /// @param signature The owner's signature over the permit data\\n  function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\\n\\n  /// @notice Transfer approved tokens from one address to another\\n  /// @param from The address to transfer from\\n  /// @param to The address of the recipient\\n  /// @param amount The amount of the token to transfer\\n  /// @param token The token address to transfer\\n  /// @dev Requires the from address to have approved at least the desired amount\\n  /// of tokens to msg.sender.\\n  function transferFrom(address from, address to, uint160 amount, address token) external;\\n\\n  /// @notice Transfer approved tokens in a batch\\n  /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\\n  /// @dev Requires the from addresses to have approved at least the desired amount\\n  /// of tokens to msg.sender.\\n  function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\\n\\n  /// @notice Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity\\n  /// by batch revoking approvals\\n  /// @param approvals Array of approvals to revoke.\\n  function lockdown(TokenSpenderPair[] calldata approvals) external;\\n\\n  /// @notice Invalidate nonces for a given (token, spender) pair\\n  /// @param token The token to invalidate nonces for\\n  /// @param spender The spender to invalidate nonces for\\n  /// @param newNonce The new nonce to set. Invalidates all nonces less than it.\\n  /// @dev Can't invalidate more than 2**16 nonces per transaction.\\n  function invalidateNonces(address token, address spender, uint48 newNonce) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/external/ICurvePool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// Kind 1\\n// Example v0.2.4 tripool (stables)\\n// See https://etherscan.io/address/0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7\\ninterface ICurvePoolKind1 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function base_coins(uint256 index) external view returns (address);\\n\\n  function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable;\\n\\n  function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable;\\n}\\n\\n// Kind 2\\n// Example v0.2.8, Stableswap, v0.2.5 Curve GUSD Metapool\\n// See https://etherscan.io/address/0xdc24316b9ae028f1497c275eb9192a3ea0f67022\\ninterface ICurvePoolKind2 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function base_coins(uint256 index) external view returns (address);\\n\\n  // 0x3df02124\\n  function exchange(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n\\n  function exchange_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n}\\n\\n// Kind 3\\n// Example v0.3.0, \\\"# EUR/3crv pool where 3crv is _second_, not first\\\"\\n// See https://etherscan.io/address/0x5D0F47B32fDd343BfA74cE221808e2abE4A53827\\n// NOTE: This contract has an `exchange_underlying` with a receiver also\\ninterface ICurvePoolKind3 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function underlying_coins(uint256 index) external view returns (address);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n\\n  function exchange_underlying(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IEIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IEIP712 {\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IPermit2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ISignatureTransfer} from './ISignatureTransfer.sol';\\nimport {IAllowanceTransfer} from './IAllowanceTransfer.sol';\\n\\n/// @notice Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\\n/// @dev Users must approve Permit2 before calling any of the transfer functions.\\ninterface IPermit2 is ISignatureTransfer, IAllowanceTransfer {\\n  // IPermit2 unifies the two interfaces so users have maximal flexibility with their approval.\\n}\\n\"\n    },\n    \"contracts/interfaces/external/ISignatureTransfer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IEIP712} from './IEIP712.sol';\\n\\n/// @title SignatureTransfer\\n/// @notice Handles ERC20 token transfers through signature based actions\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface ISignatureTransfer is IEIP712 {\\n  /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\\n  /// @param maxAmount The maximum amount a spender can request to transfer\\n  error InvalidAmount(uint256 maxAmount);\\n\\n  /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\\n  /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\\n  error LengthMismatch();\\n\\n  /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\\n  event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\\n\\n  /// @notice The token and amount details for a transfer signed in the permit transfer signature\\n  struct TokenPermissions {\\n    // ERC20 token address\\n    address token;\\n    // the maximum amount that can be spent\\n    uint256 amount;\\n  }\\n\\n  /// @notice The signed permit message for a single token transfer\\n  struct PermitTransferFrom {\\n    TokenPermissions permitted;\\n    // a unique value for every token owner's signature to prevent signature replays\\n    uint256 nonce;\\n    // deadline on the permit signature\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Specifies the recipient address and amount for batched transfers.\\n  /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount.\\n  struct SignatureTransferDetails {\\n    // recipient address\\n    address to;\\n    // spender requested amount\\n    uint256 requestedAmount;\\n  }\\n\\n  /// @notice Used to reconstruct the signed permit message for multiple token transfers\\n  /// @dev Do not need to pass in spender address as it is required that it is msg.sender\\n  /// @dev Note that a user still signs over a spender address\\n  struct PermitBatchTransferFrom {\\n    // the tokens and corresponding amounts permitted for a transfer\\n    TokenPermissions[] permitted;\\n    // a unique value for every token owner's signature to prevent signature replays\\n    uint256 nonce;\\n    // deadline on the permit signature\\n    uint256 deadline;\\n  }\\n\\n  /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\\n  /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\\n  /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\\n  /// @dev It returns a uint256 bitmap\\n  /// @dev The index, or wordPosition is capped at type(uint248).max\\n  function nonceBitmap(address, uint256) external view returns (uint256);\\n\\n  /// @notice Transfers a token using a signed permit message\\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails The spender's requested transfer details for the permitted token\\n  /// @param signature The signature to verify\\n  function permitTransferFrom(\\n    PermitTransferFrom memory permit,\\n    SignatureTransferDetails calldata transferDetails,\\n    address owner,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Transfers a token using a signed permit message\\n  /// @notice Includes extra data provided by the caller to verify signature over\\n  /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails The spender's requested transfer details for the permitted token\\n  /// @param witness Extra data to include when checking the user signature\\n  /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n  /// @param signature The signature to verify\\n  function permitWitnessTransferFrom(\\n    PermitTransferFrom memory permit,\\n    SignatureTransferDetails calldata transferDetails,\\n    address owner,\\n    bytes32 witness,\\n    string calldata witnessTypeString,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Transfers multiple tokens using a signed permit message\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n  /// @param signature The signature to verify\\n  function permitTransferFrom(\\n    PermitBatchTransferFrom memory permit,\\n    SignatureTransferDetails[] calldata transferDetails,\\n    address owner,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Transfers multiple tokens using a signed permit message\\n  /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n  /// @notice Includes extra data provided by the caller to verify signature over\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n  /// @param witness Extra data to include when checking the user signature\\n  /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n  /// @param signature The signature to verify\\n  function permitWitnessTransferFrom(\\n    PermitBatchTransferFrom memory permit,\\n    SignatureTransferDetails[] calldata transferDetails,\\n    address owner,\\n    bytes32 witness,\\n    string calldata witnessTypeString,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Invalidates the bits specified in mask for the bitmap at the word position\\n  /// @dev The wordPos is maxed at type(uint248).max\\n  /// @param wordPos A number to index the nonceBitmap at\\n  /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\\n  function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IStargateComposer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\nimport {IStargateRouter} from './IStargateRouter.sol';\\n\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IStargateComposer is IStargateRouter {\\n  function stargateRouter() external view returns (address);\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IStargateReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.6;\\n\\ninterface IStargateReceiver {\\n  function sgReceive(\\n    uint16 _srcChainId, // the remote chainId sending the tokens\\n    bytes memory _srcAddress, // the remote Bridge address\\n    uint256 _nonce,\\n    address _token, // the token contract on the local chain\\n    uint256 amountLD, // the qty of local _token contract tokens\\n    bytes memory payload\\n  ) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IStargateRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IStargateRouter {\\n  struct lzTxObj {\\n    uint256 dstGasForCall;\\n    uint256 dstNativeAmount;\\n    bytes dstNativeAddr;\\n  }\\n\\n  function swap(\\n    uint16 _dstChainId,\\n    uint256 _srcPoolId,\\n    uint256 _dstPoolId,\\n    address payable _refundAddress,\\n    uint256 _amountLD,\\n    uint256 _minAmountLD,\\n    lzTxObj memory _lzTxParams,\\n    bytes calldata _to,\\n    bytes calldata _payload\\n  ) external payable;\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IUniswapV2Pair.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n  function getReserves()\\n    external\\n    view\\n    returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IUniswapV3Pool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapV3Pool {\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function liquidity() external view returns (uint128);\\n}\\n\"\n    },\n    \"contracts/interfaces/ICurve.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\nimport {ILibCurve} from '../interfaces/ILibCurve.sol';\\nimport {ILibStarVault} from '../interfaces/ILibStarVault.sol';\\nimport {ILibWarp} from '../interfaces/ILibWarp.sol';\\n\\ninterface ICurve is ILibCurve, ILibStarVault, ILibWarp {\\n  error DeadlineExpired();\\n  error InsufficientOutputAmount();\\n  error EthTransferFailed();\\n\\n  struct ExactInputSingleParams {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address recipient;\\n    address pool;\\n    uint16 feeBps;\\n    uint16 slippageBps;\\n    address partner;\\n    address tokenIn;\\n    address tokenOut;\\n    uint48 deadline;\\n    uint8 tokenIndexIn;\\n    uint8 tokenIndexOut;\\n    uint8 kind;\\n    bool underlying;\\n  }\\n\\n  function curveExactInputSingle(\\n    ExactInputSingleParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut);\\n}\\n\"\n    },\n    \"contracts/interfaces/IDiamondCut.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n  enum FacetCutAction {\\n    Add,\\n    Replace,\\n    Remove\\n  }\\n  // Add=0, Replace=1, Remove=2\\n\\n  struct FacetCut {\\n    address facetAddress;\\n    FacetCutAction action;\\n    bytes4[] functionSelectors;\\n  }\\n\\n  /// @notice Add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function diamondCut(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external;\\n\\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\n    },\n    \"contracts/interfaces/ILibCurve.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibCurve {\\n  error UnhandledPoolKind();\\n}\\n\"\n    },\n    \"contracts/interfaces/ILibStarVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibStarVault {\\n  /**\\n   * The swap fee is over the maximum allowed\\n   */\\n  error FeeTooHigh(uint256 maxFeeBps);\\n\\n  event Fee(\\n    address indexed partner,\\n    address indexed token,\\n    uint256 partnerFee,\\n    uint256 protocolFee\\n  );\\n}\\n\"\n    },\n    \"contracts/interfaces/ILibUniV3Like.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibUniV3Like {\\n  error CallbackAlreadyActive();\\n  error CallbackStillActive();\\n}\\n\"\n    },\n    \"contracts/interfaces/ILibWarp.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibWarp {\\n  event Warp(\\n    address indexed partner,\\n    address indexed tokenIn,\\n    address indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n}\\n\"\n    },\n    \"contracts/interfaces/IStargate.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\nimport {ILibStarVault} from '../interfaces/ILibStarVault.sol';\\n\\ninterface IStargate is ILibStarVault {\\n  error InsufficientEthValue();\\n\\n  struct JumpTokenParams {\\n    address token;\\n    uint160 amountIn;\\n    /**\\n     * The amount the user was quoted. Used to calculate the minimum acceptable\\n     * amount of tokens to receive.\\n     */\\n    uint160 amountOutExpected;\\n    address recipient;\\n    uint16 slippageBps;\\n    uint16 feeBps;\\n    uint48 deadline;\\n    address partner;\\n    uint16 dstChainId;\\n    uint8 srcPoolId;\\n    uint8 dstPoolId;\\n  }\\n\\n  struct JumpNativeParams {\\n    /**\\n     * The amount in is passed to distinguish the amount to bridge from the fee\\n     */\\n    uint160 amountIn;\\n    /**\\n     * The amount the user was quoted. Used to calculate the minimum acceptable\\n     * amount of tokens to receive.\\n     */\\n    uint160 amountOutExpected;\\n    address recipient;\\n    uint16 slippageBps;\\n    uint16 feeBps;\\n    uint48 deadline;\\n    address partner;\\n    uint16 dstChainId;\\n    uint8 srcPoolId;\\n    uint8 dstPoolId;\\n  }\\n\\n  function stargateJumpToken(\\n    JumpTokenParams calldata params,\\n    PermitParams calldata permit\\n  ) external payable;\\n\\n  function stargateJumpNative(JumpNativeParams calldata params) external payable;\\n}\\n\"\n    },\n    \"contracts/interfaces/IStarVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IStarVault {\\n  error EthTransferFailed();\\n\\n  event Withdraw(address indexed partner, address indexed token, uint256 amount);\\n\\n  function partnerTokenBalance(address partner, address token) external view returns (uint256);\\n\\n  function partnerWithdraw(address token) external;\\n\\n  function ownerWithdraw(address token, uint256 amount, address payable to) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IUniV2Like.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\nimport {ILibStarVault} from '../interfaces/ILibStarVault.sol';\\nimport {ILibWarp} from '../interfaces/ILibWarp.sol';\\n\\ninterface IUniV2Like is ILibStarVault, ILibWarp {\\n  error InsufficienTokensDelivered();\\n  error DeadlineExpired();\\n  error InsufficientOutputAmount();\\n  error EthTransferFailed();\\n  error IncorrectEthValue();\\n\\n  struct ExactInputParams {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    uint16[] poolFeesBps;\\n    address recipient;\\n    uint16 slippageBps;\\n    uint16 feeBps;\\n    uint48 deadline;\\n    address partner;\\n    address[] tokens;\\n    address[] pools;\\n  }\\n\\n  struct ExactInputSingleParams {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address recipient;\\n    address pool;\\n    uint16 feeBps;\\n    uint16 slippageBps;\\n    address partner;\\n    address tokenIn;\\n    address tokenOut;\\n    uint16 poolFeeBps;\\n    uint48 deadline;\\n  }\\n\\n  function uniswapV2LikeExactInputSingle(\\n    ExactInputSingleParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut);\\n\\n  function uniswapV2LikeExactInput(\\n    ExactInputParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut);\\n}\\n\"\n    },\n    \"contracts/interfaces/IUniV2Router.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\nimport {ILibStarVault} from '../interfaces/ILibStarVault.sol';\\nimport {ILibWarp} from '../interfaces/ILibWarp.sol';\\n\\ninterface IUniV2Router is ILibStarVault, ILibWarp {\\n  error EthTransferFailed();\\n  error ZeroAmountOut();\\n  error IncorrectEthValue();\\n  error InsufficientOutputAmount();\\n  error DeadlineExpired();\\n\\n  struct ExactInputParams {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address recipient;\\n    uint16 slippage;\\n    uint16 feeBps;\\n    uint48 deadline;\\n    address partner;\\n    address[] path;\\n  }\\n\\n  struct ExactInputSingleParams {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address recipient;\\n    uint16 slippage;\\n    uint16 feeBps;\\n    uint48 deadline;\\n    address partner;\\n    address tokenIn;\\n    address tokenOut;\\n  }\\n\\n  function uniswapV2ExactInputSingle(\\n    ExactInputSingleParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut);\\n\\n  function uniswapV2ExactInput(\\n    ExactInputParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut);\\n}\\n\"\n    },\n    \"contracts/interfaces/IUniV3Callback.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUniV3Callback {\\n  error CallbackInactive();\\n}\\n\"\n    },\n    \"contracts/interfaces/IUniV3Like.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IAllowanceTransfer} from '../interfaces/external/IAllowanceTransfer.sol';\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\nimport {ILibStarVault} from '../interfaces/ILibStarVault.sol';\\nimport {ILibUniV3Like} from '../interfaces/ILibUniV3Like.sol';\\nimport {ILibWarp} from '../interfaces/ILibWarp.sol';\\n\\ninterface IUniV3Like is ILibStarVault, ILibUniV3Like, ILibWarp {\\n  error InsufficienTokensDelivered();\\n  error DeadlineExpired();\\n  error InsufficientOutputAmount();\\n  error EthTransferFailed();\\n  error IncorrectEthValue();\\n\\n  struct ExactInputParams {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address recipient;\\n    uint16 slippageBps;\\n    uint16 feeBps;\\n    uint48 deadline;\\n    address partner;\\n    address[] tokens;\\n    address[] pools;\\n  }\\n\\n  struct ExactInputSingleParams {\\n    address recipient;\\n    address partner;\\n    uint16 feeBps;\\n    uint16 slippageBps;\\n    uint256 amountIn;\\n    uint48 deadline;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 amountOut;\\n    address pool;\\n  }\\n\\n  function uniswapV3LikeExactInputSingle(\\n    ExactInputSingleParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut);\\n\\n  function uniswapV3LikeExactInput(\\n    ExactInputParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut);\\n}\\n\"\n    },\n    \"contracts/interfaces/IWarpLink.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\nimport {ILibCurve} from '../interfaces/ILibCurve.sol';\\nimport {ILibStarVault} from '../interfaces/ILibStarVault.sol';\\nimport {ILibUniV3Like} from '../interfaces/ILibUniV3Like.sol';\\nimport {ILibWarp} from '../interfaces/ILibWarp.sol';\\n\\ninterface IWarpLink is ILibCurve, ILibStarVault, ILibUniV3Like, ILibWarp {\\n  error UnhandledCommand();\\n  error InsufficientEthValue();\\n  error InsufficientOutputAmount();\\n  error InsufficientTokensDelivered();\\n  error UnexpectedTokenForWrap();\\n  error UnexpectedTokenForUnwrap();\\n  error UnexpectedTokenOut();\\n  error InsufficientAmountRemaining();\\n  error NotEnoughParts();\\n  error InconsistentPartTokenOut();\\n  error InconsistentPartPayerOut();\\n  error UnexpectedPayerForWrap();\\n  error NativeTokenNotSupported();\\n  error DeadlineExpired();\\n  error IllegalJumpInSplit();\\n  error JumpMustBeLastCommand();\\n  error InvalidSgReceiverSender();\\n  error InvalidSgReceiveSrcAddress();\\n\\n  struct Params {\\n    address partner;\\n    uint16 feeBps;\\n    /**\\n     * How much below `amountOut` the user will accept\\n     */\\n    uint16 slippageBps;\\n    address recipient;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 amountIn;\\n    /**\\n     * The amount the user was quoted\\n     */\\n    uint256 amountOut;\\n    uint48 deadline;\\n    bytes commands;\\n  }\\n\\n  function warpLinkEngage(Params memory params, PermitParams calldata permit) external payable;\\n}\\n\"\n    },\n    \"contracts/libraries/LibCurve.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {ICurvePoolKind1, ICurvePoolKind2, ICurvePoolKind3} from '../interfaces/external/ICurvePool.sol';\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibCurve\\n */\\nlibrary LibCurve {\\n  error UnhandledPoolKind();\\n\\n  function exchange(\\n    uint8 kind,\\n    bool underlying,\\n    address pool,\\n    uint256 eth,\\n    uint8 i,\\n    uint8 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) internal {\\n    if (kind == 1) {\\n      if (underlying) {\\n        ICurvePoolKind1(pool).exchange_underlying{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      } else {\\n        ICurvePoolKind1(pool).exchange{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      }\\n    } else if (kind == 2) {\\n      if (underlying) {\\n        ICurvePoolKind2(pool).exchange_underlying{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      } else {\\n        ICurvePoolKind2(pool).exchange{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      }\\n    } else if (kind == 3) {\\n      if (underlying) {\\n        ICurvePoolKind3(pool).exchange_underlying{value: eth}(uint256(i), uint256(j), dx, min_dy);\\n      } else {\\n        ICurvePoolKind3(pool).exchange{value: eth}(uint256(i), uint256(j), dx, min_dy);\\n      }\\n    } else {\\n      revert UnhandledPoolKind();\\n    }\\n  }\\n}\\n\"\n    },\n    \"contracts/libraries/LibDiamond.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from '../interfaces/IDiamondCut.sol';\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256('diamond.standard.diamond.storage');\\n\\n  struct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n  }\\n\\n  struct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n  }\\n\\n  struct DiamondStorage {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    address contractOwner;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  function setContractOwner(address _newOwner) internal {\\n    DiamondStorage storage ds = diamondStorage();\\n    address previousOwner = ds.contractOwner;\\n    ds.contractOwner = _newOwner;\\n    emit OwnershipTransferred(previousOwner, _newOwner);\\n  }\\n\\n  function contractOwner() internal view returns (address contractOwner_) {\\n    contractOwner_ = diamondStorage().contractOwner;\\n  }\\n\\n  function enforceIsContractOwner() internal view {\\n    require(msg.sender == diamondStorage().contractOwner, 'LibDiamond: Must be contract owner');\\n  }\\n\\n  event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  // Internal function version of diamondCut\\n  function diamondCut(\\n    IDiamondCut.FacetCut[] memory _diamondCut,\\n    address _init,\\n    bytes memory _calldata\\n  ) internal {\\n    for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n      IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n      if (action == IDiamondCut.FacetCutAction.Add) {\\n        addFunctions(\\n          _diamondCut[facetIndex].facetAddress,\\n          _diamondCut[facetIndex].functionSelectors\\n        );\\n      } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n        replaceFunctions(\\n          _diamondCut[facetIndex].facetAddress,\\n          _diamondCut[facetIndex].functionSelectors\\n        );\\n      } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n        removeFunctions(\\n          _diamondCut[facetIndex].facetAddress,\\n          _diamondCut[facetIndex].functionSelectors\\n        );\\n      } else {\\n        revert('LibDiamondCut: Incorrect FacetCutAction');\\n      }\\n    }\\n    emit DiamondCut(_diamondCut, _init, _calldata);\\n    initializeDiamondCut(_init, _calldata);\\n  }\\n\\n  function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n    uint96 selectorPosition = uint96(\\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n    );\\n    // add new facet address if it does not exist\\n    if (selectorPosition == 0) {\\n      addFacet(ds, _facetAddress);\\n    }\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      require(\\n        oldFacetAddress == address(0),\\n        \\\"LibDiamondCut: Can't add function that already exists\\\"\\n      );\\n      addFunction(ds, selector, selectorPosition, _facetAddress);\\n      selectorPosition++;\\n    }\\n  }\\n\\n  function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n    uint96 selectorPosition = uint96(\\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n    );\\n    // add new facet address if it does not exist\\n    if (selectorPosition == 0) {\\n      addFacet(ds, _facetAddress);\\n    }\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      require(\\n        oldFacetAddress != _facetAddress,\\n        \\\"LibDiamondCut: Can't replace function with same function\\\"\\n      );\\n      removeFunction(ds, oldFacetAddress, selector);\\n      addFunction(ds, selector, selectorPosition, _facetAddress);\\n      selectorPosition++;\\n    }\\n  }\\n\\n  function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\\n    DiamondStorage storage ds = diamondStorage();\\n    // if function does not exist then do nothing and return\\n    require(_facetAddress == address(0), 'LibDiamondCut: Remove facet address must be address(0)');\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      removeFunction(ds, oldFacetAddress, selector);\\n    }\\n  }\\n\\n  function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n    enforceHasContractCode(_facetAddress, 'LibDiamondCut: New facet has no code');\\n    ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n    ds.facetAddresses.push(_facetAddress);\\n  }\\n\\n  function addFunction(\\n    DiamondStorage storage ds,\\n    bytes4 _selector,\\n    uint96 _selectorPosition,\\n    address _facetAddress\\n  ) internal {\\n    ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n    ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n  }\\n\\n  function removeFunction(\\n    DiamondStorage storage ds,\\n    address _facetAddress,\\n    bytes4 _selector\\n  ) internal {\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n    // an immutable function is a function defined directly in a diamond\\n    require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n    // replace selector with last selector, then delete last selector\\n    uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n    uint256 lastSelectorPosition = ds\\n      .facetFunctionSelectors[_facetAddress]\\n      .functionSelectors\\n      .length - 1;\\n    // if not the same then replace _selector with lastSelector\\n    if (selectorPosition != lastSelectorPosition) {\\n      bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n        lastSelectorPosition\\n      ];\\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n      ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(\\n        selectorPosition\\n      );\\n    }\\n    // delete the last selector\\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n    delete ds.selectorToFacetAndPosition[_selector];\\n\\n    // if no more selectors for facet address then delete the facet address\\n    if (lastSelectorPosition == 0) {\\n      // replace facet address with last facet address and delete last facet address\\n      uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n      uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n      if (facetAddressPosition != lastFacetAddressPosition) {\\n        address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n        ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n        ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n      }\\n      ds.facetAddresses.pop();\\n      delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n    }\\n  }\\n\\n  function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n    if (_init == address(0)) {\\n      return;\\n    }\\n    enforceHasContractCode(_init, 'LibDiamondCut: _init address has no code');\\n    (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n    if (!success) {\\n      if (error.length > 0) {\\n        // bubble up error\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(error)\\n          revert(add(32, error), returndata_size)\\n        }\\n      } else {\\n        revert InitializationFunctionReverted(_init, _calldata);\\n      }\\n    }\\n  }\\n\\n  function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n    uint256 contractSize;\\n    assembly {\\n      contractSize := extcodesize(_contract)\\n    }\\n    require(contractSize > 0, _errorMessage);\\n  }\\n}\\n\"\n    },\n    \"contracts/libraries/LibStarVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibStarVault\\n */\\nlibrary LibStarVault {\\n  /**\\n   * The swap fee is over the maximum allowed\\n   */\\n  error FeeTooHigh(uint256 maxFeeBps);\\n\\n  event Fee(\\n    address indexed partner,\\n    address indexed token,\\n    uint256 partnerFee,\\n    uint256 protocolFee\\n  );\\n\\n  struct State {\\n    /**\\n     * Token balances per partner\\n     * Mapping: Partner -> token -> balance\\n     */\\n    mapping(address => mapping(address => uint256)) partnerBalances;\\n    /**\\n     * Total balances per token for all partners.\\n     * Mapping: token -> balance\\n     */\\n    mapping(address => uint256) partnerBalancesTotal;\\n  }\\n\\n  uint256 private constant MAX_FEE_BPS = 2_000;\\n\\n  function state() internal pure returns (State storage s) {\\n    /**\\n     * NOTE: Three storage slots used to store all partners addresses and partner tokens were\\n     * removed to save gas.\\n     */\\n    unchecked {\\n      uint256 storagePosition = uint256(keccak256('diamond.storage.LibStarVault')) + 3;\\n\\n      assembly {\\n        s.slot := storagePosition\\n      }\\n    }\\n  }\\n\\n  /**\\n   * By using a library function we ensure that the storage used by the library is whichever contract\\n   * is calling this function\\n   */\\n  function registerCollectedFee(\\n    address partner,\\n    address token,\\n    uint256 partnerFee,\\n    uint256 protocolFee\\n  ) internal {\\n    State storage s = state();\\n\\n    unchecked {\\n      s.partnerBalances[partner][token] += partnerFee;\\n      s.partnerBalancesTotal[token] += partnerFee;\\n    }\\n\\n    emit Fee(partner, token, partnerFee, protocolFee);\\n  }\\n\\n  function calculateAndRegisterFee(\\n    address partner,\\n    address token,\\n    uint256 feeBps,\\n    uint256 amountOutQuoted,\\n    uint256 amountOutActual\\n  ) internal returns (uint256 amountOutUser_) {\\n    if (feeBps > MAX_FEE_BPS) {\\n      revert FeeTooHigh(MAX_FEE_BPS);\\n    }\\n\\n    unchecked {\\n      uint256 feeTotal;\\n      uint256 feeBasis = amountOutActual;\\n\\n      if (amountOutActual > amountOutQuoted) {\\n        // Positive slippage\\n        feeTotal = amountOutActual - amountOutQuoted;\\n\\n        // Change the fee basis for use below\\n        feeBasis = amountOutQuoted;\\n      }\\n\\n      // Fee taken from actual\\n      feeTotal += (feeBasis * feeBps) / 10_000;\\n\\n      // If a partner is set, split the fee in half\\n      uint256 feePartner = partner == address(0) ? 0 : (feeTotal * 50) / 100;\\n      uint256 feeProtocol = feeTotal - feePartner;\\n\\n      if (feeProtocol > 0) {\\n        registerCollectedFee(partner, token, feePartner, feeProtocol);\\n      }\\n\\n      return amountOutActual - feeTotal;\\n    }\\n  }\\n}\\n\"\n    },\n    \"contracts/libraries/LibUniV2Like.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IUniswapV2Pair} from 'contracts/interfaces/external/IUniswapV2Pair.sol';\\n\\nlibrary LibUniV2Like {\\n  function getAmountsOut(\\n    uint16[] memory poolFeesBps,\\n    uint256 amountIn,\\n    address[] memory tokens,\\n    address[] memory pools\\n  ) internal view returns (uint256[] memory amounts) {\\n    uint256 poolLength = pools.length;\\n\\n    amounts = new uint256[](tokens.length);\\n    amounts[0] = amountIn;\\n\\n    for (uint256 index; index < poolLength; ) {\\n      address token0 = tokens[index];\\n      address token1 = tokens[index + 1];\\n\\n      // For 30 bps, multiply by 9970\\n      uint256 feeFactor = 10_000 - poolFeesBps[index];\\n\\n      (uint256 reserveIn, uint256 reserveOut, ) = IUniswapV2Pair(pools[index]).getReserves();\\n\\n      if (token0 > token1) {\\n        (reserveIn, reserveOut) = (reserveOut, reserveIn);\\n      }\\n\\n      unchecked {\\n        amountIn =\\n          ((amountIn * feeFactor) * reserveOut) /\\n          ((reserveIn * 10_000) + (amountIn * feeFactor));\\n      }\\n\\n      // Recycling `amountIn`\\n      amounts[index + 1] = amountIn;\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n}\\n\"\n    },\n    \"contracts/libraries/LibUniV2Router.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IUniswapV2Pair} from 'contracts/interfaces/external/IUniswapV2Pair.sol';\\nimport {IUniswapV2Router02} from '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport {IWETH} from '@uniswap/v2-periphery/contracts/interfaces/IWETH.sol';\\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibUniV2Router {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256('diamond.storage.LibUniV2Router');\\n\\n  struct DiamondStorage {\\n    bool isInitialized;\\n    IWETH weth;\\n    IUniswapV2Router02 uniswapV2router02;\\n    address uniswapV2Factory;\\n    IPermit2 permit2;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage s) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n\\n    assembly {\\n      s.slot := position\\n    }\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  // NOTE: Modified to work with newer Solidity\\n  function pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal pure returns (address pair) {\\n    if (tokenA > tokenB) {\\n      (tokenA, tokenB) = (tokenB, tokenA);\\n    }\\n\\n    pair = address(\\n      uint160(\\n        uint256(\\n          keccak256(\\n            abi.encodePacked(\\n              hex'ff',\\n              factory,\\n              keccak256(abi.encodePacked(tokenA, tokenB)),\\n              hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            )\\n          )\\n        )\\n      )\\n    );\\n  }\\n\\n  function getPairsAndAmountsFromPath(\\n    address factory,\\n    uint256 amountIn,\\n    address[] memory path\\n  ) internal view returns (address[] memory pairs, uint256[] memory amounts) {\\n    uint256 pathLengthMinusOne = path.length - 1;\\n\\n    pairs = new address[](pathLengthMinusOne);\\n    amounts = new uint256[](path.length);\\n    amounts[0] = amountIn;\\n\\n    for (uint256 index; index < pathLengthMinusOne; ) {\\n      address token0 = path[index];\\n      address token1 = path[index + 1];\\n\\n      pairs[index] = pairFor(factory, token0, token1);\\n\\n      (uint256 reserveIn, uint256 reserveOut, ) = IUniswapV2Pair(pairFor(factory, token0, token1))\\n        .getReserves();\\n\\n      if (token0 > token1) {\\n        (reserveIn, reserveOut) = (reserveOut, reserveIn);\\n      }\\n\\n      unchecked {\\n        amountIn = ((amountIn * 997) * reserveOut) / ((reserveIn * 1000) + (amountIn * 997));\\n      }\\n\\n      // Recycling `amountIn`\\n      amounts[index + 1] = amountIn;\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n}\\n\"\n    },\n    \"contracts/libraries/LibUniV3Like.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibUniV3Like\\n */\\nlibrary LibUniV3Like {\\n  error CallbackAlreadyActive();\\n  error CallbackStillActive();\\n\\n  bytes32 constant DIAMOND_STORAGE_SLOT = keccak256('diamond.storage.LibUniV3Like');\\n\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739 + 1;\\n\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342 - 1;\\n\\n  struct CallbackState {\\n    uint256 amount;\\n    address payer;\\n    address token;\\n  }\\n\\n  struct State {\\n    // TODO: Does this help by using `MSTORE8`?\\n    uint8 isActive;\\n    /**\\n     * Transient storage variable used in the callback\\n     */\\n    CallbackState callback;\\n  }\\n\\n  function state() internal pure returns (State storage s) {\\n    bytes32 slot = DIAMOND_STORAGE_SLOT;\\n\\n    assembly {\\n      s.slot := slot\\n    }\\n  }\\n\\n  function beforeCallback(CallbackState memory callback) internal {\\n    if (state().isActive == 1) {\\n      revert CallbackAlreadyActive();\\n    }\\n\\n    state().isActive = 1;\\n    state().callback = callback;\\n  }\\n\\n  function afterCallback() internal view {\\n    if (state().isActive == 1) {\\n      // The field is expected to be zeroed out by the callback\\n      revert CallbackStillActive();\\n    }\\n  }\\n}\\n\"\n    },\n    \"contracts/libraries/LibWarp.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IWETH} from '@uniswap/v2-periphery/contracts/interfaces/IWETH.sol';\\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\\nimport {IStargateComposer} from '../interfaces/external/IStargateComposer.sol';\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibWarp\\n */\\nlibrary LibWarp {\\n  event Warp(\\n    address indexed partner,\\n    address indexed tokenIn,\\n    address indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  struct State {\\n    IWETH weth;\\n    IPermit2 permit2;\\n    IStargateComposer stargateComposer;\\n  }\\n\\n  bytes32 constant DIAMOND_STORAGE_SLOT = keccak256('diamond.storage.LibWarp');\\n\\n  function state() internal pure returns (State storage s) {\\n    bytes32 slot = DIAMOND_STORAGE_SLOT;\\n\\n    assembly {\\n      s.slot := slot\\n    }\\n  }\\n\\n  function applySlippage(uint256 amount, uint16 slippage) internal pure returns (uint256) {\\n    return (amount * (10_000 - slippage)) / 10_000;\\n  }\\n}\\n\"\n    },\n    \"contracts/libraries/PermitParams.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nstruct PermitParams {\\n  uint256 nonce;\\n  bytes signature;\\n}\\n\"\n    },\n    \"contracts/libraries/Stream.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * Stream reader\\n *\\n * Note that the stream position is always behind by one as per the\\n * original implementation\\n *\\n * See https://github.com/sushiswap/sushiswap/blob/master/protocols/route-processor/contracts/InputStream.sol\\n */\\nlibrary Stream {\\n  function createStream(bytes memory data) internal pure returns (uint256 stream) {\\n    assembly {\\n      // Get a pointer to the next free memory\\n      stream := mload(0x40)\\n\\n      // Move the free memory pointer forward by 64 bytes, since\\n      // this function will store 2 words (64 bytes) to memory.\\n      mstore(0x40, add(stream, 64))\\n\\n      // Store a pointer to the data in the first word of the stream\\n      mstore(stream, data)\\n\\n      // Store a pointer to the end of the data in the second word of the stream\\n      let length := mload(data)\\n      mstore(add(stream, 32), add(data, length))\\n    }\\n  }\\n\\n  function isNotEmpty(uint256 stream) internal pure returns (bool) {\\n    uint256 pos;\\n    uint256 finish;\\n    assembly {\\n      pos := mload(stream)\\n      finish := mload(add(stream, 32))\\n    }\\n    return pos < finish;\\n  }\\n\\n  function readUint8(uint256 stream) internal pure returns (uint8 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 1)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint16(uint256 stream) internal pure returns (uint16 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 2)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint24(uint256 stream) internal pure returns (uint24 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 3)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint32(uint256 stream) internal pure returns (uint32 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 4)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint48(uint256 stream) internal pure returns (uint48 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 6)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint160(uint256 stream) internal pure returns (uint160 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 20)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint256(uint256 stream) internal pure returns (uint256 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 32)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readBytes32(uint256 stream) internal pure returns (bytes32 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 32)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readAddress(uint256 stream) internal pure returns (address res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 20)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readBytes(uint256 stream) internal pure returns (bytes memory res) {\\n    assembly {\\n      let pos := mload(stream)\\n      res := add(pos, 32)\\n      let length := mload(res)\\n      mstore(stream, add(res, length))\\n    }\\n  }\\n\\n  function readAddresses(\\n    uint256 stream,\\n    uint256 count\\n  ) internal pure returns (address[] memory res) {\\n    res = new address[](count);\\n\\n    for (uint256 index; index < count; ) {\\n      res[index] = readAddress(stream);\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n\\n  function readUint16s(uint256 stream, uint256 count) internal pure returns (uint16[] memory res) {\\n    res = new uint16[](count);\\n\\n    for (uint256 index; index < count; ) {\\n      res[index] = readUint16(stream);\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 999999\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    },\n    \"remappings\": [\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\n      \"forge-std/=lib/forge-std/src/\",\n      \"solidity-stringutils/=lib/solidity-stringutils/src/\",\n      \"@openzeppelin/=@openzeppelin/\",\n      \"@uniswap/=@uniswap/\",\n      \"hardhat-deploy/=hardhat-deploy/\",\n      \"hardhat/=hardhat/\"\n    ]\n  }\n}",
      "solcInputHash": "ff01f08786a3c11b5ff43becb123a9a3",
      "transactionHash": "0xed75f778428e413b7102b4f2bea94fe2792f88073ac152683d281ba35520fecd",
      "args": []
    },
    "decoded": {
      "from": "0x67E21394bBC46c010D9B8DCf00172Ab7996964BE",
      "gasPrice": "61278610091",
      "maxFeePerGas": "61278610091",
      "maxPriorityFeePerGas": "31462995399",
      "gasLimit": "686933",
      "to": null,
      "value": "0",
      "nonce": 99,
      "data": "0x608060405234801561001057600080fd5b50610b8b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063044edc3c1461004657806378f91e371461005b578063b85eaaef14610080575b600080fd5b6100596100543660046109b0565b610093565b005b61006e6100693660046109f2565b610324565b60405190815260200160405180910390f35b61005961008e366004610a2b565b61037d565b61009b610539565b73ffffffffffffffffffffffffffffffffffffffff831660008181527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc9160205260408120547f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc90929091901561019d576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8716906370a0823190602401602060405180830381865afa158015610174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101989190610a4f565b61019f565b475b905060006101ad8383610a68565b9050808611156101f1576040517f366cb4bc000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b60405186815273ffffffffffffffffffffffffffffffffffffffff8816906000907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a373ffffffffffffffffffffffffffffffffffffffff87166102fa5760008573ffffffffffffffffffffffffffffffffffffffff168760405160006040518083038185875af1925050503d80600081146102b4576040519150601f19603f3d011682016040523d82523d6000602084013e6102b9565b606091505b50509050806102f4576040517f6d963f8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061031b565b61031b73ffffffffffffffffffffffffffffffffffffffff88168688610604565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff82811660009081527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc9060209081526040808320938516835292905220545b92915050565b3360009081527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc906020818152604080842073ffffffffffffffffffffffffffffffffffffffff86168552909152909120548015610534573360009081526020838152604080832073ffffffffffffffffffffffffffffffffffffffff871684528252808320839055600185019091528120805483929061041e908490610a68565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff84169033907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a373ffffffffffffffffffffffffffffffffffffffff831661051357604051600090339083908381818185875af1925050503d80600081146104cd576040519150601f19603f3d011682016040523d82523d6000602084013e6104d2565b606091505b505090508061050d576040517f6d963f8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b61053473ffffffffffffffffffffffffffffffffffffffff84163383610604565b505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6003015473ffffffffffffffffffffffffffffffffffffffff163314610602576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016101e8565b565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610534928692916000916106cf91851690849061077c565b90508051600014806106f05750808060200190518101906106f09190610aa2565b610534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101e8565b606061078b8484600085610793565b949350505050565b606082471015610825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101e8565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161084e9190610ae8565b60006040518083038185875af1925050503d806000811461088b576040519150601f19603f3d011682016040523d82523d6000602084013e610890565b606091505b50915091506108a1878383876108ac565b979650505050505050565b6060831561094257825160000361093b5773ffffffffffffffffffffffffffffffffffffffff85163b61093b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101e8565b508161078b565b61078b83838151156109575781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e89190610b04565b73ffffffffffffffffffffffffffffffffffffffff811681146109ad57600080fd5b50565b6000806000606084860312156109c557600080fd5b83356109d08161098b565b92506020840135915060408401356109e78161098b565b809150509250925092565b60008060408385031215610a0557600080fd5b8235610a108161098b565b91506020830135610a208161098b565b809150509250929050565b600060208284031215610a3d57600080fd5b8135610a488161098b565b9392505050565b600060208284031215610a6157600080fd5b5051919050565b81810381811115610377577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610ab457600080fd5b81518015158114610a4857600080fd5b60005b83811015610adf578181015183820152602001610ac7565b50506000910152565b60008251610afa818460208701610ac4565b9190910192915050565b6020815260008251806020840152610b23816040850160208701610ac4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220ead75095d3bbe2ebdcba0053dc3c0e5df5bd8311a059c54e3500ba9823841ff364736f6c63430008130033",
      "r": "0x164e18d2c9ff9257d0a0b015649dffece9b3cf16de28950013a29a9942b39674",
      "s": "0x7cdf35c5facc0010fa6237d3435f43d1e6c1f7a6fc3863670f2a81bc148d6639",
      "v": 0,
      "chainId": 137
    }
  }
}