{
  "0xbeb5a39e2c8c1c269cbfd9262beb350c385f39f65076e69d173ebf103a3ab1e9": {
    "name": "WarpLink",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "WarpLink",
      "sourceName": "contracts/facets/WarpLink.sol",
      "abi": [
        {
          "inputs": [],
          "name": "CallbackAlreadyActive",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "CallbackAlreadyActive",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "CallbackStillActive",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "CallbackStillActive",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "DeadlineExpired",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "maxFeeBps",
              "type": "uint256"
            }
          ],
          "name": "FeeTooHigh",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "maxFeeBps",
              "type": "uint256"
            }
          ],
          "name": "FeeTooHigh",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "IllegalJumpInSplit",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InconsistentPartPayerOut",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InconsistentPartTokenOut",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InsufficientAmountRemaining",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InsufficientEthValue",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InsufficientOutputAmount",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InsufficientTokensDelivered",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidSgReceiveSrcAddress",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidSgReceiverSender",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "JumpMustBeLastCommand",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "NativeTokenNotSupported",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "NotEnoughParts",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "UnexpectedPayerForWrap",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "UnexpectedTokenForUnwrap",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "UnexpectedTokenForWrap",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "UnexpectedTokenOut",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "UnhandledCommand",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "UnhandledPoolKind",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "UnhandledPoolKind",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "partner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "partnerFee",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            }
          ],
          "name": "Fee",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "partner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            }
          ],
          "name": "Warp",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "_srcAddress",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountLD",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            }
          ],
          "name": "sgReceive",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "partner",
                  "type": "address"
                },
                {
                  "internalType": "uint16",
                  "name": "feeBps",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "slippageBps",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOut",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountOut",
                  "type": "uint256"
                },
                {
                  "internalType": "uint48",
                  "name": "deadline",
                  "type": "uint48"
                },
                {
                  "internalType": "bytes",
                  "name": "commands",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IWarpLink.Params",
              "name": "params",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct PermitParams",
              "name": "permit",
              "type": "tuple"
            }
          ],
          "name": "warpLinkEngage",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        }
      ],
      "bytecode": "",
      "deployedBytecode": "",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {},
          "generatedSources": [],
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50615400806100206000396000f3fe6080604052600436106100295760003560e01c8063ab8236f31461002e578063dc7b39db14610050575b600080fd5b34801561003a57600080fd5b5061004e610049366004614a1e565b610063565b005b61004e61005e366004614af2565b61036f565b7f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e106002015473ffffffffffffffffffffffffffffffffffffffff1633146100d6576040517fcebf3f7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601485015173ffffffffffffffffffffffffffffffffffffffff8116301461012a576040517fa9d0d13300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828060200190518101906101409190614c9f565b608081015190915073ffffffffffffffffffffffffffffffffffffffff1661016757600094505b3063dc7b39db73ffffffffffffffffffffffffffffffffffffffff871615610190576000610192565b855b604051806101400160405280856000015173ffffffffffffffffffffffffffffffffffffffff168152602001856020015161ffff168152602001856040015161ffff168152602001856060015173ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018560a0015173ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018560e00151815260200185610100015165ffffffffffff168152602001856101200151815250604051806040016040528060008152602001604051806020016040528060008152508152506040518463ffffffff1660e01b81526004016102a4929190614efc565b6000604051808303818588803b1580156102bd57600080fd5b505af1935050505080156102cf575060015b6103655773ffffffffffffffffffffffffffffffffffffffff851661033e57806060015173ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f19350505050158015610338573d6000803e3d6000fd5b50610365565b60608101516103659073ffffffffffffffffffffffffffffffffffffffff87169086610981565b5050505050505050565b81610100015165ffffffffffff164211156103b6576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101829052610180810191909152825173ffffffffffffffffffffffffffffffffffffffff908116825260208085015161ffff9081169184019190915260408086018051831660c08087019182526060808a01518716948801949094526080808a01805188169589019590955290890180519188019190915260e0808a015160a0890152925190941690526101008088015165ffffffffffff169186019190915291519184019190915280518216610140840152511661052a578260c00151341015610509576040517f1985c73500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60c08301516105189034614f63565b610180820152306101208201526106bd565b336101208201523461018082015260006105476020840184614f76565b905011156106bd577f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e1060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632b67b5703360405180606001604052806040518060800160405280896080015173ffffffffffffffffffffffffffffffffffffffff1681526020018960c0015173ffffffffffffffffffffffffffffffffffffffff16815260200189610100015165ffffffffffff168152602001886000013565ffffffffffff1681525081526020013073ffffffffffffffffffffffffffffffffffffffff16815260200187610100015165ffffffffffff1681525085806020019061066b9190614f76565b6040518563ffffffff1660e01b815260040161068a9493929190614fe2565b600060405180830381600087803b1580156106a457600080fd5b505af11580156106b8573d6000803e3d6000fd5b505050505b60006106e2846101200151604080518082019091528181528151909101602082015290565b90506106ee8183610a5a565b61010081015161014082015160a0870151929450909173ffffffffffffffffffffffffffffffffffffffff808316911614610755576040517fae39073000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107678660e001518760400151610c37565b8210156107a0576040517f42301c2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8361016001516001036107b557505050505050565b6107d686600001518760a00151886020015161ffff168960e0015186610c65565b915081600003610812576040517f42301c2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811661087d57856060015173ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610877573d6000803e3d6000fd5b506108a4565b60608601516108a49073ffffffffffffffffffffffffffffffffffffffff83169084610981565b610180840151156108e257610180840151604051339180156108fc02916000818181858888f193505050501580156108e0573d6000803e3d6000fd5b505b8560a0015173ffffffffffffffffffffffffffffffffffffffff16866080015173ffffffffffffffffffffffffffffffffffffffff16876000015173ffffffffffffffffffffffffffffffffffffffff167f1d81b4318b379c644b5546ae9cf37d861a5c7547bf3dae6cfaecffa12f8748f38960c0015186604051610971929190918252602082015260400190565b60405180910390a4505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610a559084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610d1e565b505050565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101919091526000610ad58480516001018051915290565b60ff16905060005b81811015610c2b576000610af78680516001018051915290565b60ff16905060018103610b1457610b0d85610e2d565b9450610c18565b60028103610b2557610b0d85610ff5565b60038103610b3757610b0d8686611254565b60048103610b4957610b0d8686611832565b60058103610b5b57610b0d8686611bb9565b60068103610b6d57610b0d8686612367565b60078103610b7f57610b0d8686612891565b60088103610b9157610b0d8686612dcf565b60098103610be657610ba4600184614f63565b8214610bdc576040517fe31c95e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b0d8686613205565b6040517f8ccd166700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5080610c23816150a4565b915050610add565b50829150505b92915050565b6000612710610c4683826150dc565b610c549061ffff16856150f7565b610c5e919061513d565b9392505050565b60006107d0841115610cac576040517f7b9314200000000000000000000000000000000000000000000000000000000081526107d060048201526024015b60405180910390fd5b60008284811115610cbe575050828203835b612710818702049190910190600073ffffffffffffffffffffffffffffffffffffffff891615610cf45760646032840204610cf7565b60005b9050808303838214610d0f57610d0f8a8a84846139d7565b50505090910395945050505050565b6000610d80826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613a9f9092919063ffffffff16565b9050805160001480610da1575080806020019051810190610da19190615178565b610a55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610ca3565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408082018390526101608201839052610180820192909252908201517f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e109073ffffffffffffffffffffffffffffffffffffffff1615610f0a576040517f45369fbb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012083015173ffffffffffffffffffffffffffffffffffffffff163014610f5e576040517f32d40df100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805473ffffffffffffffffffffffffffffffffffffffff166101408401819052610100840151604080517fd0e30db0000000000000000000000000000000000000000000000000000000008152905163d0e30db0929160048082019260009290919082900301818588803b158015610fd557600080fd5b505af1158015610fe9573d6000803e3d6000fd5b50959695505050505050565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101829052907f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e10805461014085015191925073ffffffffffffffffffffffffffffffffffffffff9182169116146110db576040517fb2ee070800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012083015173ffffffffffffffffffffffffffffffffffffffff8116301480159061110957306101208601525b600061014086015280156111bc57600183015461010086015184546040517f36c7851600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152306024830152928316604482015290821660648201529116906336c7851690608401600060405180830381600087803b1580156111a357600080fd5b505af11580156111b7573d6000803e3d6000fd5b505050505b82546101008601516040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691632e1a7d4d916112199160040190815260200190565b600060405180830381600087803b15801561123357600080fd5b505af1158015611247573d6000803e3d6000fd5b5096979650505050505050565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081019190915261014082015173ffffffffffffffffffffffffffffffffffffffff1661130f576040517fb10b947e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160808101825260008082526020820181905291810182905260608101919091528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1681528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1660208201528351600101805190855260ff1660011460408201528351600201805190855261ffff1660608201526101208301513073ffffffffffffffffffffffffffffffffffffffff90911603611404576113ff816020015184610100015185610140015173ffffffffffffffffffffffffffffffffffffffff166109819092919063ffffffff16565b6114e0565b7f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e106001015461012084015160208301516101008601516101408701516040517f36c7851600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff948516600482015292841660248401529083166044830152821660648201529116906336c7851690608401600060405180830381600087803b1580156114c057600080fd5b505af11580156114d4573d6000803e3d6000fd5b50503061012086015250505b600080826020015173ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611532573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155691906151b8565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150826040015161158657905b606083015161010086015161ffff61271092830316918402908202908101908302816115b4576115b461510e565b046101008701525082516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa15801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190615208565b9050836020015173ffffffffffffffffffffffffffffffffffffffff1663022c0d9f856040015161168457876101000151611687565b60005b866040015161169757600061169e565b8861010001515b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152306044820152608060648201526000608482015260a401600060405180830381600087803b15801561170857600080fd5b505af115801561171c573d6000803e3d6000fd5b505085516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000935073ffffffffffffffffffffffffffffffffffffffff90911691506370a0823190602401602060405180830381865afa158015611790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b49190615208565b9050818110806117d257506101008701516117cf9083615221565b81105b15611809576040517f946beb5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050915173ffffffffffffffffffffffffffffffffffffffff1661014085015250919392505050565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081019190915260006118ad8480516001018051915290565b60ff16905060008361010001519050600060028310156118f9576040517f1d6beb5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060005b85811015611b84576000611914600188614f63565b82106119205785611951565b6127106119338b80516002018051915290565b61ffff168a610100015161194791906150f7565b611951919061513d565b90508581111561198d576040517f0f24c51700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6119978187614f63565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261012080820183815261014080840185815261016085018690526101808501959095526101008401879052918e015173ffffffffffffffffffffffffffffffffffffffff908116909152908d015116909152909650611a368b82610a5a565b9050806101600151600103611a77576040517fd35869f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600003611a945780610120015193508061014001519450611b68565b8473ffffffffffffffffffffffffffffffffffffffff1681610140015173ffffffffffffffffffffffffffffffffffffffff1614611afe576040517fd7af48f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1681610120015173ffffffffffffffffffffffffffffffffffffffff1614611b68576040517f51a769fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610100810151611b789087615221565b955050506001016118ff565b5073ffffffffffffffffffffffffffffffffffffffff9081166101208801521661014086015261010085015250919392505050565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101829052610180810191909152611c4660405180606001604052806060815260200160608152602001606081525090565b6000611c588580516001018051915290565b60ff169050611c68816001615221565b67ffffffffffffffff811115611c8057611c806148ad565b604051908082528060200260200182016040528015611ca9578160200160208202803683370190505b508083526101408501518151909190600090611cc757611cc7615234565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060005b81811015611d6057855160140180519087528351611d23836001615221565b81518110611d3357611d33615234565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101611d04565b50611d6b8582613ab6565b6020830152611d7a8582613b58565b6040830152815180516000919083908110611d9757611d97615234565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611e0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e319190615208565b90506000611e52846040015187610100015186600001518760200151613be1565b90503073ffffffffffffffffffffffffffffffffffffffff1686610120015173ffffffffffffffffffffffffffffffffffffffff1603611ee457611edf8460200151600081518110611ea657611ea6615234565b602002602001015187610100015188610140015173ffffffffffffffffffffffffffffffffffffffff166109819092919063ffffffff16565b611fe3565b7f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e11546101208701516020860151805173ffffffffffffffffffffffffffffffffffffffff909316926336c78516929190600090611f4357611f43615234565b60200260200101518961010001518a61014001516040518563ffffffff1660e01b8152600401611fa9949392919073ffffffffffffffffffffffffffffffffffffffff948516815292841660208401529083166040830152909116606082015260800190565b600060405180830381600087803b158015611fc357600080fd5b505af1158015611fd7573d6000803e3d6000fd5b50503061012089015250505b60005b838110156121e7576000611ffb826001615221565b905060008660000151828151811061201557612015615234565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168760000151848151811061204957612049615234565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1610612073576000612076565b60015b90506000600288600001515161208c9190614f63565b841061209857306120b7565b876020015183815181106120ae576120ae615234565b60200260200101515b9050876020015184815181106120cf576120cf615234565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663022c0d9f836121165786858151811061210957612109615234565b6020026020010151612119565b60005b84612125576000612140565b87868151811061213757612137615234565b60200260200101515b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526004810192909252602482015273ffffffffffffffffffffffffffffffffffffffff84166044820152608060648201526000608482015260a401600060405180830381600087803b1580156121c057600080fd5b505af11580156121d4573d6000803e3d6000fd5b505060019095019450611fe69350505050565b5060008460000151848151811061220057612200615234565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229a9190615208565b905081600183516122ab9190614f63565b815181106122bb576122bb615234565b602002602001015187610100018181525050828110806122e957506101008701516122e69084615221565b81105b15612320576040517f946beb5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845180518590811061233457612334615234565b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff1661014088015250949695505050505050565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101919091526040805160808101825260008082526020820181905291810182905260608101919091528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1681528351601401805190855273ffffffffffffffffffffffffffffffffffffffff90811660208301526101408401511661247a576040517fb10b947e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156124e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250c9190615208565b90506000826000015173ffffffffffffffffffffffffffffffffffffffff1685610140015173ffffffffffffffffffffffffffffffffffffffff161090506125a86040518060600160405280876101000151815260200187610120015173ffffffffffffffffffffffffffffffffffffffff16815260200187610140015173ffffffffffffffffffffffffffffffffffffffff16815250613e16565b801561268c5760208301516101008601516040517f128acb08000000000000000000000000000000000000000000000000000000008152306004820152831515602482015260448101919091526401000276a4606482015260a06084820152600060a482018190529173ffffffffffffffffffffffffffffffffffffffff169063128acb089060c40160408051808303816000875af115801561264f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126739190615263565b9150508061268090615287565b61010087015250612774565b60208301516101008601516040517f128acb080000000000000000000000000000000000000000000000000000000081523060048201528315156024820152604481019190915273fffd8963efd1fc6a506488495d951d5263988d25606482015260a06084820152600060a482018190529173ffffffffffffffffffffffffffffffffffffffff169063128acb089060c40160408051808303816000875af115801561273c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127609190615263565b50905061276c81615287565b610100870152505b61277c613f7f565b82516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156127ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280e9190615208565b90508281108061282c57506101008601516128299084615221565b81105b15612863576040517f946beb5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050905173ffffffffffffffffffffffffffffffffffffffff16610140840152505030610120820152919050565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081019190915261291e60405180606001604052806060815260200160608152602001606081525090565b60006129308580516001018051915290565b60ff16905061293f8582613ab6565b825261294b8582613ab6565b60208301528151600090612960600184614f63565b8151811061297057612970615234565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa1580156129eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0f9190615208565b905060005b83811015612cd75760008115612a4e578551612a31600184614f63565b81518110612a4157612a41615234565b6020026020010151612a55565b8761014001515b905085600001518281518110612a6d57612a6d615234565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff9081166101408b01819052604080516060810182526101008d015181526101208d01518416948101949094529184169183018290521190612ace90613e16565b82600003612ade57306101208a01525b600087602001518481518110612af657612af6615234565b602002602001015190508115612be0576101008a01516040517f128acb08000000000000000000000000000000000000000000000000000000008152306004820152831515602482015260448101919091526401000276a4606482015260a06084820152600060a482018190529073ffffffffffffffffffffffffffffffffffffffff83169063128acb089060c40160408051808303816000875af1158015612ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc79190615263565b91505080612bd490615287565b6101008c015250612cc4565b6101008a01516040517f128acb080000000000000000000000000000000000000000000000000000000081523060048201528315156024820152604481019190915273fffd8963efd1fc6a506488495d951d5263988d25606482015260a06084820152600060a482018190529073ffffffffffffffffffffffffffffffffffffffff83169063128acb089060c40160408051808303816000875af1158015612c8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb09190615263565b509050612cbc81615287565b6101008c0152505b612ccc613f7f565b505050600101612a14565b506101408601516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015612d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6e9190615208565b905081811080612d8c5750610100870151612d899083615221565b81105b15612dc3576040517f946beb5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50949695505050505050565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101919091526040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1681528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1660208201528351600101805190855260ff1660408201528351600101805190855260ff1660608201528351600101805190855260ff1660808201528351600101805190855260ff1660011460a0820152610140830151815161012085015173ffffffffffffffffffffffffffffffffffffffff9283161592918216159130911614613006577f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e10600101546101208601516101008701516101408801516040517f36c7851600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201523060248201529183166044830152821660648201529116906336c7851690608401600060405180830381600087803b158015612fe657600080fd5b505af1158015612ffa573d6000803e3d6000fd5b50503061012088015250505b6000816130a35783516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561307a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309e9190615208565b6130a5565b475b9050826130e5576130e5846020015187610100015188610140015173ffffffffffffffffffffffffffffffffffffffff16613fdf9092919063ffffffff16565b61312a84608001518560a0015186602001518661310357600061310a565b8961010001515b886040015189606001518c610100015160008b8061312557508a5b6140d5565b6000826131c75784516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561319e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c29190615208565b6131c9565b475b855173ffffffffffffffffffffffffffffffffffffffff1661014089015290506131f38282614f63565b61010088015250949695505050505050565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101919091526132a46040518060a00160405280600061ffff168152602001600081526020016000815260200160008152602001606081525090565b8351600201805190855261ffff1681528351600101805190855260ff1660208201528351600101805190855260ff1660408201528351600401805190855263ffffffff166060820181905215613431576040805161014080820183526000808352602080840182815284860183815260608087018581526080880186815260a0890187905260c0808a0188905260e08a018890526101008a01979097526101208901929092528b5173ffffffffffffffffffffffffffffffffffffffff9081168952948c015161ffff908116909452948b0151909216905294880151811690915290860151169091528451601401805190865273ffffffffffffffffffffffffffffffffffffffff1660a08201528451602001805190865260e08281019190915284015165ffffffffffff166101008201528451602080820180519092010186526101208201526040516133fc9082906020016152bf565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526080830152505b826060015173ffffffffffffffffffffffffffffffffffffffff1683610140015173ffffffffffffffffffffffffffffffffffffffff1614613543578060800151516000036134a5578251610140840151602085015161010086015161349e93929161ffff169080610c65565b6101008401525b82610140015173ffffffffffffffffffffffffffffffffffffffff16836060015173ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff167f1d81b4318b379c644b5546ae9cf37d861a5c7547bf3dae6cfaecffa12f8748f3866080015187610100015160405161353a929190918252602082015260400190565b60405180910390a45b6135558360a001518460c00151610c37565b8361010001511015613593576040517f42301c2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e125461014084015173ffffffffffffffffffffffffffffffffffffffff91821691161561377f5761012084015173ffffffffffffffffffffffffffffffffffffffff1630146136d1577f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e10600101546101208501516101008601516101408701516040517f36c7851600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201523060248201529183166044830152821660648201529116906336c7851690608401600060405180830381600087803b1580156136b157600080fd5b505af11580156136c5573d6000803e3d6000fd5b50503061012087015250505b61377f8260800151516000146136e75781613756565b8173ffffffffffffffffffffffffffffffffffffffff1663a9e56f3c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613732573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061375691906152d2565b61010086015161014087015173ffffffffffffffffffffffffffffffffffffffff169190613fdf565b6001610160850152608082015151156137985780613807565b8073ffffffffffffffffffffffffffffffffffffffff1663a9e56f3c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380791906152d2565b73ffffffffffffffffffffffffffffffffffffffff16639fbf10fc600073ffffffffffffffffffffffffffffffffffffffff1686610140015173ffffffffffffffffffffffffffffffffffffffff16146138665785610180015161387c565b85610180015186610100015161387c9190615221565b8451602086015160408701516101008a015160c08b01513091906138a1908290610c37565b60405180606001604052808c606001518152602001600081526020016040518060200160405280600081525081525060008c6080015151116138e7578d604001516138e9565b305b604051602001613924919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905260808e01517fffffffff0000000000000000000000000000000000000000000000000000000060e08d901b16835261399499989796959493926004016152ef565b6000604051808303818588803b1580156139ad57600080fd5b505af11580156139c1573d6000803e3d6000fd5b5050600061018088015250949695505050505050565b73ffffffffffffffffffffffffffffffffffffffff84811660008181527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc90602081815260408084209589168085529582528084208054890190557f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc9182529283902080548801905582518781529081018690528251919493927f3d2a5b5aa3c9e4a41eed8ae2e9e470c5cfb96fa51eb0935c607c0fd8ec3f3f5792918290030190a35050505050565b6060613aae84846000856145d1565b949350505050565b60608167ffffffffffffffff811115613ad157613ad16148ad565b604051908082528060200260200182016040528015613afa578160200160208202803683370190505b50905060005b82811015613b515783516014018051908552828281518110613b2457613b24615234565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101613b00565b5092915050565b60608167ffffffffffffffff811115613b7357613b736148ad565b604051908082528060200260200182016040528015613b9c578160200160208202803683370190505b50905060005b82811015613b515783516002018051908552828281518110613bc657613bc6615234565b61ffff90921660209283029190910190910152600101613ba2565b805182516060919067ffffffffffffffff811115613c0157613c016148ad565b604051908082528060200260200182016040528015613c2a578160200160208202803683370190505b5091508482600081518110613c4157613c41615234565b60200260200101818152505060005b81811015613e0c576000858281518110613c6c57613c6c615234565b60200260200101519050600086836001613c869190615221565b81518110613c9657613c96615234565b602002602001015190506000898481518110613cb457613cb4615234565b6020026020010151612710613cc991906150dc565b61ffff169050600080888681518110613ce457613ce4615234565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d5a91906151b8565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161115613db557905b828b0282612710020181848d020281613dd057613dd061510e565b049a508a88613de0886001615221565b81518110613df057613df0615234565b6020908102919091010152505060019093019250613c50915050565b5050949350505050565b7f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7a5460ff16600103613e74576040517f65d4e04900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7a805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911617905580517f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7b5560208101517f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7c80547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff938416179091556040909201517f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7d80549093169116179055565b7f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7a5460ff16600103613fdd576040517f129c8cdb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261406b84826146ea565b6140cf5760405173ffffffffffffffffffffffffffffffffffffffff84166024820152600060448201526140c59085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016109d3565b6140cf8482610d1e565b50505050565b8860ff1660010361420357871561418e576040517fa6417ed600000000000000000000000000000000000000000000000000000000815260ff808716600f90810b6004840152908616900b6024820152604481018490526064810183905273ffffffffffffffffffffffffffffffffffffffff88169063a6417ed69088906084015b6000604051808303818588803b15801561417057600080fd5b505af1158015614184573d6000803e3d6000fd5b50505050506145c6565b6040517f3df0212400000000000000000000000000000000000000000000000000000000815260ff808716600f90810b6004840152908616900b6024820152604481018490526064810183905273ffffffffffffffffffffffffffffffffffffffff881690633df02124908890608401614157565b8860ff166002036143435787156142ce576040517fa6417ed600000000000000000000000000000000000000000000000000000000815260ff808716600f90810b6004840152908616900b6024820152604481018490526064810183905273ffffffffffffffffffffffffffffffffffffffff88169063a6417ed69088906084015b60206040518083038185885af11580156142a3573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906142c89190615208565b506145c6565b6040517f3df0212400000000000000000000000000000000000000000000000000000000815260ff808716600f90810b6004840152908616900b6024820152604481018490526064810183905273ffffffffffffffffffffffffffffffffffffffff881690633df02124908890608401614285565b8860ff166003036144e45787156143c1576040517f65b2489b00000000000000000000000000000000000000000000000000000000815260ff808716600483015285166024820152604481018490526064810183905273ffffffffffffffffffffffffffffffffffffffff8816906365b2489b908890608401614285565b801561443b576040517f394747c500000000000000000000000000000000000000000000000000000000815260ff80871660048301528516602482015260448101849052606481018390526001608482015273ffffffffffffffffffffffffffffffffffffffff88169063394747c590889060a401614285565b6040517f5b41b90800000000000000000000000000000000000000000000000000000000815260ff868116600483015285166024820152604481018490526064810183905273ffffffffffffffffffffffffffffffffffffffff881690635b41b908906084016020604051808303816000875af11580156144c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142c89190615208565b8860ff16600403614594578715614527576040517ff1c43ede00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f5b41b90800000000000000000000000000000000000000000000000000000000815260ff808716600483015285166024820152604481018490526064810183905273ffffffffffffffffffffffffffffffffffffffff881690635b41b908908890608401614157565b6040517ff1c43ede00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050565b606082471015614663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610ca3565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161468c919061539b565b60006040518083038185875af1925050503d80600081146146c9576040519150601f19603f3d011682016040523d82523d6000602084013e6146ce565b606091505b50915091506146df878383876147ab565b979650505050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051614714919061539b565b6000604051808303816000865af19150503d8060008114614751576040519150601f19603f3d011682016040523d82523d6000602084013e614756565b606091505b50915091508180156147805750805115806147805750808060200190518101906147809190615178565b80156147a2575073ffffffffffffffffffffffffffffffffffffffff85163b15155b95945050505050565b6060831561484157825160000361483a5773ffffffffffffffffffffffffffffffffffffffff85163b61483a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ca3565b5081613aae565b613aae83838151156148565781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca391906153b7565b61ffff8116811461489a57600080fd5b50565b80356148a88161488a565b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715614900576149006148ad565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561494d5761494d6148ad565b604052919050565b600067ffffffffffffffff82111561496f5761496f6148ad565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126149ac57600080fd5b81356149bf6149ba82614955565b614906565b8181528460208386010111156149d457600080fd5b816020850160208301376000918101602001919091529392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461489a57600080fd5b80356148a8816149f1565b60008060008060008060c08789031215614a3757600080fd5b8635614a428161488a565b9550602087013567ffffffffffffffff80821115614a5f57600080fd5b614a6b8a838b0161499b565b96506040890135955060608901359150614a84826149f1565b9093506080880135925060a08801359080821115614aa157600080fd5b50614aae89828a0161499b565b9150509295509295509295565b65ffffffffffff8116811461489a57600080fd5b80356148a881614abb565b600060408284031215614aec57600080fd5b50919050565b60008060408385031215614b0557600080fd5b823567ffffffffffffffff80821115614b1d57600080fd5b908401906101408287031215614b3257600080fd5b614b3a6148dc565b614b4383614a13565b8152614b516020840161489d565b6020820152614b626040840161489d565b6040820152614b7360608401614a13565b6060820152614b8460808401614a13565b6080820152614b9560a08401614a13565b60a082015260c083013560c082015260e083013560e0820152610100614bbc818501614acf565b908201526101208381013583811115614bd457600080fd5b614be08982870161499b565b828401525050809450506020850135915080821115614bfe57600080fd5b50614c0b85828601614ada565b9150509250929050565b80516148a8816149f1565b80516148a88161488a565b80516148a881614abb565b60005b83811015614c51578181015183820152602001614c39565b50506000910152565b600082601f830112614c6b57600080fd5b8151614c796149ba82614955565b818152846020838601011115614c8e57600080fd5b613aae826020830160208701614c36565b600060208284031215614cb157600080fd5b815167ffffffffffffffff80821115614cc957600080fd5b908301906101408286031215614cde57600080fd5b614ce66148dc565b614cef83614c15565b8152614cfd60208401614c20565b6020820152614d0e60408401614c20565b6040820152614d1f60608401614c15565b6060820152614d3060808401614c15565b6080820152614d4160a08401614c15565b60a082015260c083015160c082015260e083015160e0820152610100614d68818501614c2b565b908201526101208381015183811115614d8057600080fd5b614d8c88828701614c5a565b918301919091525095945050505050565b60008151808452614db5816020860160208601614c36565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805173ffffffffffffffffffffffffffffffffffffffff16825260006101406020830151614e1b602086018261ffff169052565b506040830151614e31604086018261ffff169052565b506060830151614e59606086018273ffffffffffffffffffffffffffffffffffffffff169052565b506080830151614e81608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a0830151614ea960a086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160c085015260e083015160e085015261010080840151614ed88287018265ffffffffffff169052565b5050610120808401518282870152614ef283870182614d9d565b9695505050505050565b604081526000614f0f6040830185614de7565b828103602084015283518152602084015160406020830152614ef26040830182614d9d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610c3157610c31614f34565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614fab57600080fd5b83018035915067ffffffffffffffff821115614fc657600080fd5b602001915036819003821315614fdb57600080fd5b9250929050565b600061010073ffffffffffffffffffffffffffffffffffffffff80881684528651818151166020860152816020820151166040860152604081015165ffffffffffff80821660608801528060608401511660808801525050508060208801511660a085015250604086015160c08401528060e08401528381840152506101208385828501376000838501820152601f9093017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909101909101949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036150d5576150d5614f34565b5060010190565b61ffff828116828216039080821115613b5157613b51614f34565b8082028115828204841417610c3157610c31614f34565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082615173577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561518a57600080fd5b81518015158114610c5e57600080fd5b80516dffffffffffffffffffffffffffff811681146148a857600080fd5b6000806000606084860312156151cd57600080fd5b6151d68461519a565b92506151e46020850161519a565b9150604084015163ffffffff811681146151fd57600080fd5b809150509250925092565b60006020828403121561521a57600080fd5b5051919050565b80820180821115610c3157610c31614f34565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000806040838503121561527657600080fd5b505080516020909101519092909150565b60007f800000000000000000000000000000000000000000000000000000000000000082036152b8576152b8614f34565b5060000390565b602081526000610c5e6020830184614de7565b6000602082840312156152e457600080fd5b8151610c5e816149f1565b600061012061ffff8c1683528a602084015289604084015273ffffffffffffffffffffffffffffffffffffffff891660608401528760808401528660a08401528060c084015285518184015250602085015161014083015260408501516060610160840152615362610180840182614d9d565b905082810360e08401526153768186614d9d565b905082810361010084015261538b8185614d9d565b9c9b505050505050505050505050565b600082516153ad818460208701614c36565b9190910192915050565b602081526000610c5e6020830184614d9d56fea26469706673582212204eecdc76d361ea4a608ec1291a66f39b61f591d844e03c8f4164adb5e8c419c464736f6c63430008130033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5400 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x29 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAB8236F3 EQ PUSH2 0x2E JUMPI DUP1 PUSH4 0xDC7B39DB EQ PUSH2 0x50 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A1E JUMP JUMPDEST PUSH2 0x63 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4E PUSH2 0x5E CALLDATASIZE PUSH1 0x4 PUSH2 0x4AF2 JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E10 PUSH1 0x2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xD6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCEBF3F7700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x14 DUP6 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ADDRESS EQ PUSH2 0x12A JUMPI PUSH1 0x40 MLOAD PUSH32 0xA9D0D13300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x140 SWAP2 SWAP1 PUSH2 0x4C9F JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x167 JUMPI PUSH1 0x0 SWAP5 POP JUMPDEST ADDRESS PUSH4 0xDC7B39DB PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND ISZERO PUSH2 0x190 JUMPI PUSH1 0x0 PUSH2 0x192 JUMP JUMPDEST DUP6 JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0xE0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH2 0x100 ADD MLOAD PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH2 0x120 ADD MLOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A4 SWAP3 SWAP2 SWAP1 PUSH2 0x4EFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2CF JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x365 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x33E JUMPI DUP1 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP6 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x338 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x365 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x365 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 DUP7 PUSH2 0x981 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x100 ADD MLOAD PUSH6 0xFFFFFFFFFFFF AND TIMESTAMP GT ISZERO PUSH2 0x3B6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1AB7DA6B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP6 ADD MLOAD PUSH2 0xFFFF SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP7 ADD DUP1 MLOAD DUP4 AND PUSH1 0xC0 DUP1 DUP8 ADD SWAP2 DUP3 MSTORE PUSH1 0x60 DUP1 DUP11 ADD MLOAD DUP8 AND SWAP5 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x80 DUP1 DUP11 ADD DUP1 MLOAD DUP9 AND SWAP6 DUP10 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP1 DUP10 ADD DUP1 MLOAD SWAP2 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP1 DUP11 ADD MLOAD PUSH1 0xA0 DUP10 ADD MSTORE SWAP3 MLOAD SWAP1 SWAP5 AND SWAP1 MSTORE PUSH2 0x100 DUP1 DUP9 ADD MLOAD PUSH6 0xFFFFFFFFFFFF AND SWAP2 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD DUP3 AND PUSH2 0x140 DUP5 ADD MSTORE MLOAD AND PUSH2 0x52A JUMPI DUP3 PUSH1 0xC0 ADD MLOAD CALLVALUE LT ISZERO PUSH2 0x509 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1985C73500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x518 SWAP1 CALLVALUE PUSH2 0x4F63 JUMP JUMPDEST PUSH2 0x180 DUP3 ADD MSTORE ADDRESS PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x6BD JUMP JUMPDEST CALLER PUSH2 0x120 DUP3 ADD MSTORE CALLVALUE PUSH2 0x180 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x547 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x4F76 JUMP JUMPDEST SWAP1 POP GT ISZERO PUSH2 0x6BD JUMPI PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E10 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2B67B570 CALLER PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0xC0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH2 0x100 ADD MLOAD PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD CALLDATALOAD PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH2 0x100 ADD MLOAD PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE POP DUP6 DUP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x66B SWAP2 SWAP1 PUSH2 0x4F76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x68A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4FE2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x0 PUSH2 0x6E2 DUP5 PUSH2 0x120 ADD MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE DUP2 DUP2 MSTORE DUP2 MLOAD SWAP1 SWAP2 ADD PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x6EE DUP2 DUP4 PUSH2 0xA5A JUMP JUMPDEST PUSH2 0x100 DUP2 ADD MLOAD PUSH2 0x140 DUP3 ADD MLOAD PUSH1 0xA0 DUP8 ADD MLOAD SWAP3 SWAP5 POP SWAP1 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND SWAP2 AND EQ PUSH2 0x755 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAE39073000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x767 DUP7 PUSH1 0xE0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0xC37 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x42301C2300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH2 0x160 ADD MLOAD PUSH1 0x1 SUB PUSH2 0x7B5 JUMPI POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7D6 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0xFFFF AND DUP10 PUSH1 0xE0 ADD MLOAD DUP7 PUSH2 0xC65 JUMP JUMPDEST SWAP2 POP DUP2 PUSH1 0x0 SUB PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH32 0x42301C2300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x87D JUMPI DUP6 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x877 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x8A4 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x8A4 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP5 PUSH2 0x981 JUMP JUMPDEST PUSH2 0x180 DUP5 ADD MLOAD ISZERO PUSH2 0x8E2 JUMPI PUSH2 0x180 DUP5 ADD MLOAD PUSH1 0x40 MLOAD CALLER SWAP2 DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x8E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST DUP6 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1D81B4318B379C644B5546AE9CF37D861A5C7547BF3DAE6CFAECFFA12F8748F3 DUP10 PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0x40 MLOAD PUSH2 0x971 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xA55 SWAP1 DUP5 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xD1E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 PUSH2 0xAD5 DUP5 DUP1 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC2B JUMPI PUSH1 0x0 PUSH2 0xAF7 DUP7 DUP1 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x1 DUP2 SUB PUSH2 0xB14 JUMPI PUSH2 0xB0D DUP6 PUSH2 0xE2D JUMP JUMPDEST SWAP5 POP PUSH2 0xC18 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0xB25 JUMPI PUSH2 0xB0D DUP6 PUSH2 0xFF5 JUMP JUMPDEST PUSH1 0x3 DUP2 SUB PUSH2 0xB37 JUMPI PUSH2 0xB0D DUP7 DUP7 PUSH2 0x1254 JUMP JUMPDEST PUSH1 0x4 DUP2 SUB PUSH2 0xB49 JUMPI PUSH2 0xB0D DUP7 DUP7 PUSH2 0x1832 JUMP JUMPDEST PUSH1 0x5 DUP2 SUB PUSH2 0xB5B JUMPI PUSH2 0xB0D DUP7 DUP7 PUSH2 0x1BB9 JUMP JUMPDEST PUSH1 0x6 DUP2 SUB PUSH2 0xB6D JUMPI PUSH2 0xB0D DUP7 DUP7 PUSH2 0x2367 JUMP JUMPDEST PUSH1 0x7 DUP2 SUB PUSH2 0xB7F JUMPI PUSH2 0xB0D DUP7 DUP7 PUSH2 0x2891 JUMP JUMPDEST PUSH1 0x8 DUP2 SUB PUSH2 0xB91 JUMPI PUSH2 0xB0D DUP7 DUP7 PUSH2 0x2DCF JUMP JUMPDEST PUSH1 0x9 DUP2 SUB PUSH2 0xBE6 JUMPI PUSH2 0xBA4 PUSH1 0x1 DUP5 PUSH2 0x4F63 JUMP JUMPDEST DUP3 EQ PUSH2 0xBDC JUMPI PUSH1 0x40 MLOAD PUSH32 0xE31C95E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB0D DUP7 DUP7 PUSH2 0x3205 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8CCD166700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP1 PUSH2 0xC23 DUP2 PUSH2 0x50A4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xADD JUMP JUMPDEST POP DUP3 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 PUSH2 0xC46 DUP4 DUP3 PUSH2 0x50DC JUMP JUMPDEST PUSH2 0xC54 SWAP1 PUSH2 0xFFFF AND DUP6 PUSH2 0x50F7 JUMP JUMPDEST PUSH2 0xC5E SWAP2 SWAP1 PUSH2 0x513D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7D0 DUP5 GT ISZERO PUSH2 0xCAC JUMPI PUSH1 0x40 MLOAD PUSH32 0x7B93142000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x7D0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 GT ISZERO PUSH2 0xCBE JUMPI POP POP DUP3 DUP3 SUB DUP4 JUMPDEST PUSH2 0x2710 DUP2 DUP8 MUL DIV SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND ISZERO PUSH2 0xCF4 JUMPI PUSH1 0x64 PUSH1 0x32 DUP5 MUL DIV PUSH2 0xCF7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP DUP1 DUP4 SUB DUP4 DUP3 EQ PUSH2 0xD0F JUMPI PUSH2 0xD0F DUP11 DUP11 DUP5 DUP5 PUSH2 0x39D7 JUMP JUMPDEST POP POP POP SWAP1 SWAP2 SUB SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD80 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3A9F SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0xDA1 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xDA1 SWAP2 SWAP1 PUSH2 0x5178 JUMP JUMPDEST PUSH2 0xA55 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP1 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x160 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x180 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MLOAD PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E10 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0xF0A JUMPI PUSH1 0x40 MLOAD PUSH32 0x45369FBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x120 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS EQ PUSH2 0xF5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x32D40DF100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x140 DUP5 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP5 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xD0E30DB000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH4 0xD0E30DB0 SWAP3 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFE9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP6 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E10 DUP1 SLOAD PUSH2 0x140 DUP6 ADD MLOAD SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND SWAP2 AND EQ PUSH2 0x10DB JUMPI PUSH1 0x40 MLOAD PUSH32 0xB2EE070800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x120 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ADDRESS EQ DUP1 ISZERO SWAP1 PUSH2 0x1109 JUMPI ADDRESS PUSH2 0x120 DUP7 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP7 ADD MSTORE DUP1 ISZERO PUSH2 0x11BC JUMPI PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0x100 DUP7 ADD MLOAD DUP5 SLOAD PUSH1 0x40 MLOAD PUSH32 0x36C7851600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE SWAP3 DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE SWAP1 DUP3 AND PUSH1 0x64 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0x36C78516 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP3 SLOAD PUSH2 0x100 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0x2E1A7D4D SWAP2 PUSH2 0x1219 SWAP2 PUSH1 0x4 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1247 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP7 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x140 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x130F JUMPI PUSH1 0x40 MLOAD PUSH32 0xB10B947E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE DUP4 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH1 0xFF AND PUSH1 0x1 EQ PUSH1 0x40 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x2 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH2 0xFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x120 DUP4 ADD MLOAD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SUB PUSH2 0x1404 JUMPI PUSH2 0x13FF DUP2 PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x100 ADD MLOAD DUP6 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x981 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x14E0 JUMP JUMPDEST PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E10 PUSH1 0x1 ADD SLOAD PUSH2 0x120 DUP5 ADD MLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x140 DUP8 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x36C7851600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP5 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x44 DUP4 ADD MSTORE DUP3 AND PUSH1 0x64 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0x36C78516 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP ADDRESS PUSH2 0x120 DUP7 ADD MSTORE POP POP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1532 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1556 SWAP2 SWAP1 PUSH2 0x51B8 JUMP JUMPDEST POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x1586 JUMPI SWAP1 JUMPDEST PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0xFFFF PUSH2 0x2710 SWAP3 DUP4 SUB AND SWAP2 DUP5 MUL SWAP1 DUP3 MUL SWAP1 DUP2 ADD SWAP1 DUP4 MUL DUP2 PUSH2 0x15B4 JUMPI PUSH2 0x15B4 PUSH2 0x510E JUMP JUMPDEST DIV PUSH2 0x100 DUP8 ADD MSTORE POP DUP3 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x162A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x164E SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x22C0D9F DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x1684 JUMPI DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0x1687 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x1697 JUMPI PUSH1 0x0 PUSH2 0x169E JUMP JUMPDEST DUP9 PUSH2 0x100 ADD MLOAD JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x171C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP6 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 POP PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1790 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17B4 SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT DUP1 PUSH2 0x17D2 JUMPI POP PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0x17CF SWAP1 DUP4 PUSH2 0x5221 JUMP JUMPDEST DUP2 LT JUMPDEST ISZERO PUSH2 0x1809 JUMPI PUSH1 0x40 MLOAD PUSH32 0x946BEB5300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP SWAP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x140 DUP6 ADD MSTORE POP SWAP2 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 PUSH2 0x18AD DUP5 DUP1 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 DUP4 PUSH2 0x100 ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP4 LT ISZERO PUSH2 0x18F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1D6BEB5700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1B84 JUMPI PUSH1 0x0 PUSH2 0x1914 PUSH1 0x1 DUP9 PUSH2 0x4F63 JUMP JUMPDEST DUP3 LT PUSH2 0x1920 JUMPI DUP6 PUSH2 0x1951 JUMP JUMPDEST PUSH2 0x2710 PUSH2 0x1933 DUP12 DUP1 MLOAD PUSH1 0x2 ADD DUP1 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x1947 SWAP2 SWAP1 PUSH2 0x50F7 JUMP JUMPDEST PUSH2 0x1951 SWAP2 SWAP1 PUSH2 0x513D JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x198D JUMPI PUSH1 0x40 MLOAD PUSH32 0xF24C51700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1997 DUP2 DUP8 PUSH2 0x4F63 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP1 DUP3 ADD DUP4 DUP2 MSTORE PUSH2 0x140 DUP1 DUP5 ADD DUP6 DUP2 MSTORE PUSH2 0x160 DUP6 ADD DUP7 SWAP1 MSTORE PUSH2 0x180 DUP6 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH2 0x100 DUP5 ADD DUP8 SWAP1 MSTORE SWAP2 DUP15 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE SWAP1 DUP14 ADD MLOAD AND SWAP1 SWAP2 MSTORE SWAP1 SWAP7 POP PUSH2 0x1A36 DUP12 DUP3 PUSH2 0xA5A JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x160 ADD MLOAD PUSH1 0x1 SUB PUSH2 0x1A77 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD35869F800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x0 SUB PUSH2 0x1A94 JUMPI DUP1 PUSH2 0x120 ADD MLOAD SWAP4 POP DUP1 PUSH2 0x140 ADD MLOAD SWAP5 POP PUSH2 0x1B68 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1AFE JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7AF48F200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH2 0x120 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x51A769FD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x100 DUP2 ADD MLOAD PUSH2 0x1B78 SWAP1 DUP8 PUSH2 0x5221 JUMP JUMPDEST SWAP6 POP POP POP PUSH1 0x1 ADD PUSH2 0x18FF JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH2 0x120 DUP9 ADD MSTORE AND PUSH2 0x140 DUP7 ADD MSTORE PUSH2 0x100 DUP6 ADD MSTORE POP SWAP2 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x1C46 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C58 DUP6 DUP1 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH2 0x1C68 DUP2 PUSH1 0x1 PUSH2 0x5221 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C80 JUMPI PUSH2 0x1C80 PUSH2 0x48AD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1CA9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP1 DUP4 MSTORE PUSH2 0x140 DUP6 ADD MLOAD DUP2 MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x1CC7 JUMPI PUSH2 0x1CC7 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1D60 JUMPI DUP6 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP8 MSTORE DUP4 MLOAD PUSH2 0x1D23 DUP4 PUSH1 0x1 PUSH2 0x5221 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1D33 JUMPI PUSH2 0x1D33 PUSH2 0x5234 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x1D04 JUMP JUMPDEST POP PUSH2 0x1D6B DUP6 DUP3 PUSH2 0x3AB6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1D7A DUP6 DUP3 PUSH2 0x3B58 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE DUP2 MLOAD DUP1 MLOAD PUSH1 0x0 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x1D97 JUMPI PUSH2 0x1D97 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E0D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E31 SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1E52 DUP5 PUSH1 0x40 ADD MLOAD DUP8 PUSH2 0x100 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x3BE1 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH2 0x120 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1EE4 JUMPI PUSH2 0x1EDF DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1EA6 JUMPI PUSH2 0x1EA6 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH2 0x100 ADD MLOAD DUP9 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x981 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1FE3 JUMP JUMPDEST PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E11 SLOAD PUSH2 0x120 DUP8 ADD MLOAD PUSH1 0x20 DUP7 ADD MLOAD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND SWAP3 PUSH4 0x36C78516 SWAP3 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x1F43 JUMPI PUSH2 0x1F43 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH2 0x100 ADD MLOAD DUP11 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FA9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1FD7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP ADDRESS PUSH2 0x120 DUP10 ADD MSTORE POP POP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x21E7 JUMPI PUSH1 0x0 PUSH2 0x1FFB DUP3 PUSH1 0x1 PUSH2 0x5221 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2015 JUMPI PUSH2 0x2015 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x0 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2049 JUMPI PUSH2 0x2049 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x2073 JUMPI PUSH1 0x0 PUSH2 0x2076 JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP9 PUSH1 0x0 ADD MLOAD MLOAD PUSH2 0x208C SWAP2 SWAP1 PUSH2 0x4F63 JUMP JUMPDEST DUP5 LT PUSH2 0x2098 JUMPI ADDRESS PUSH2 0x20B7 JUMP JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x20AE JUMPI PUSH2 0x20AE PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST SWAP1 POP DUP8 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x20CF JUMPI PUSH2 0x20CF PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x22C0D9F DUP4 PUSH2 0x2116 JUMPI DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2109 JUMPI PUSH2 0x2109 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2119 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 PUSH2 0x2125 JUMPI PUSH1 0x0 PUSH2 0x2140 JUMP JUMPDEST DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2137 JUMPI PUSH2 0x2137 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x21D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 SWAP1 SWAP6 ADD SWAP5 POP PUSH2 0x1FE6 SWAP4 POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 DUP5 PUSH1 0x0 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2200 JUMPI PUSH2 0x2200 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2276 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x229A SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x1 DUP4 MLOAD PUSH2 0x22AB SWAP2 SWAP1 PUSH2 0x4F63 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x22BB JUMPI PUSH2 0x22BB PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH2 0x100 ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 LT DUP1 PUSH2 0x22E9 JUMPI POP PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0x22E6 SWAP1 DUP5 PUSH2 0x5221 JUMP JUMPDEST DUP2 LT JUMPDEST ISZERO PUSH2 0x2320 JUMPI PUSH1 0x40 MLOAD PUSH32 0x946BEB5300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 MLOAD DUP1 MLOAD DUP6 SWAP1 DUP2 LT PUSH2 0x2334 JUMPI PUSH2 0x2334 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x140 DUP9 ADD MSTORE POP SWAP5 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE DUP4 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x140 DUP5 ADD MLOAD AND PUSH2 0x247A JUMPI PUSH1 0x40 MLOAD PUSH32 0xB10B947E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x250C SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT SWAP1 POP PUSH2 0x25A8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH2 0x100 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH2 0x120 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH2 0x3E16 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x268C JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x100 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x128ACB0800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH5 0x1000276A4 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x128ACB08 SWAP1 PUSH1 0xC4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x264F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2673 SWAP2 SWAP1 PUSH2 0x5263 JUMP JUMPDEST SWAP2 POP POP DUP1 PUSH2 0x2680 SWAP1 PUSH2 0x5287 JUMP JUMPDEST PUSH2 0x100 DUP8 ADD MSTORE POP PUSH2 0x2774 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x100 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x128ACB0800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x128ACB08 SWAP1 PUSH1 0xC4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x273C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2760 SWAP2 SWAP1 PUSH2 0x5263 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x276C DUP2 PUSH2 0x5287 JUMP JUMPDEST PUSH2 0x100 DUP8 ADD MSTORE POP JUMPDEST PUSH2 0x277C PUSH2 0x3F7F JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x280E SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT DUP1 PUSH2 0x282C JUMPI POP PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x2829 SWAP1 DUP5 PUSH2 0x5221 JUMP JUMPDEST DUP2 LT JUMPDEST ISZERO PUSH2 0x2863 JUMPI PUSH1 0x40 MLOAD PUSH32 0x946BEB5300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x140 DUP5 ADD MSTORE POP POP ADDRESS PUSH2 0x120 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x291E PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2930 DUP6 DUP1 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH2 0x293F DUP6 DUP3 PUSH2 0x3AB6 JUMP JUMPDEST DUP3 MSTORE PUSH2 0x294B DUP6 DUP3 PUSH2 0x3AB6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2960 PUSH1 0x1 DUP5 PUSH2 0x4F63 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2970 JUMPI PUSH2 0x2970 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29EB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A0F SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2CD7 JUMPI PUSH1 0x0 DUP2 ISZERO PUSH2 0x2A4E JUMPI DUP6 MLOAD PUSH2 0x2A31 PUSH1 0x1 DUP5 PUSH2 0x4F63 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2A41 JUMPI PUSH2 0x2A41 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2A55 JUMP JUMPDEST DUP8 PUSH2 0x140 ADD MLOAD JUMPDEST SWAP1 POP DUP6 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2A6D JUMPI PUSH2 0x2A6D PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH2 0x140 DUP12 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH2 0x100 DUP14 ADD MLOAD DUP2 MSTORE PUSH2 0x120 DUP14 ADD MLOAD DUP5 AND SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 DUP5 AND SWAP2 DUP4 ADD DUP3 SWAP1 MSTORE GT SWAP1 PUSH2 0x2ACE SWAP1 PUSH2 0x3E16 JUMP JUMPDEST DUP3 PUSH1 0x0 SUB PUSH2 0x2ADE JUMPI ADDRESS PUSH2 0x120 DUP11 ADD MSTORE JUMPDEST PUSH1 0x0 DUP8 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2AF6 JUMPI PUSH2 0x2AF6 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP2 ISZERO PUSH2 0x2BE0 JUMPI PUSH2 0x100 DUP11 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x128ACB0800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH5 0x1000276A4 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x128ACB08 SWAP1 PUSH1 0xC4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2BA3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BC7 SWAP2 SWAP1 PUSH2 0x5263 JUMP JUMPDEST SWAP2 POP POP DUP1 PUSH2 0x2BD4 SWAP1 PUSH2 0x5287 JUMP JUMPDEST PUSH2 0x100 DUP13 ADD MSTORE POP PUSH2 0x2CC4 JUMP JUMPDEST PUSH2 0x100 DUP11 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x128ACB0800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x128ACB08 SWAP1 PUSH1 0xC4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C8C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CB0 SWAP2 SWAP1 PUSH2 0x5263 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x2CBC DUP2 PUSH2 0x5287 JUMP JUMPDEST PUSH2 0x100 DUP13 ADD MSTORE POP JUMPDEST PUSH2 0x2CCC PUSH2 0x3F7F JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x2A14 JUMP JUMPDEST POP PUSH2 0x140 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D4A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D6E SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT DUP1 PUSH2 0x2D8C JUMPI POP PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0x2D89 SWAP1 DUP4 PUSH2 0x5221 JUMP JUMPDEST DUP2 LT JUMPDEST ISZERO PUSH2 0x2DC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x946BEB5300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP5 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE DUP4 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH1 0xFF AND PUSH1 0x40 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH1 0xFF AND PUSH1 0x60 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH1 0xFF AND PUSH1 0x80 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH1 0xFF AND PUSH1 0x1 EQ PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x140 DUP4 ADD MLOAD DUP2 MLOAD PUSH2 0x120 DUP6 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND ISZERO SWAP3 SWAP2 DUP3 AND ISZERO SWAP2 ADDRESS SWAP2 AND EQ PUSH2 0x3006 JUMPI PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E10 PUSH1 0x1 ADD SLOAD PUSH2 0x120 DUP7 ADD MLOAD PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0x140 DUP9 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x36C7851600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x44 DUP4 ADD MSTORE DUP3 AND PUSH1 0x64 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0x36C78516 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2FE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2FFA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP ADDRESS PUSH2 0x120 DUP9 ADD MSTORE POP POP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x30A3 JUMPI DUP4 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x307A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x309E SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST PUSH2 0x30A5 JUMP JUMPDEST SELFBALANCE JUMPDEST SWAP1 POP DUP3 PUSH2 0x30E5 JUMPI PUSH2 0x30E5 DUP5 PUSH1 0x20 ADD MLOAD DUP8 PUSH2 0x100 ADD MLOAD DUP9 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3FDF SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x312A DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0xA0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP7 PUSH2 0x3103 JUMPI PUSH1 0x0 PUSH2 0x310A JUMP JUMPDEST DUP10 PUSH2 0x100 ADD MLOAD JUMPDEST DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP13 PUSH2 0x100 ADD MLOAD PUSH1 0x0 DUP12 DUP1 PUSH2 0x3125 JUMPI POP DUP11 JUMPDEST PUSH2 0x40D5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x31C7 JUMPI DUP5 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x319E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x31C2 SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST PUSH2 0x31C9 JUMP JUMPDEST SELFBALANCE JUMPDEST DUP6 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x140 DUP10 ADD MSTORE SWAP1 POP PUSH2 0x31F3 DUP3 DUP3 PUSH2 0x4F63 JUMP JUMPDEST PUSH2 0x100 DUP9 ADD MSTORE POP SWAP5 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x32A4 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x2 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH2 0xFFFF AND DUP2 MSTORE DUP4 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH1 0xFF AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH1 0xFF AND PUSH1 0x40 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x4 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH4 0xFFFFFFFF AND PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE ISZERO PUSH2 0x3431 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH2 0x140 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD DUP3 DUP2 MSTORE DUP5 DUP7 ADD DUP4 DUP2 MSTORE PUSH1 0x60 DUP1 DUP8 ADD DUP6 DUP2 MSTORE PUSH1 0x80 DUP9 ADD DUP7 DUP2 MSTORE PUSH1 0xA0 DUP10 ADD DUP8 SWAP1 MSTORE PUSH1 0xC0 DUP1 DUP11 ADD DUP9 SWAP1 MSTORE PUSH1 0xE0 DUP11 ADD DUP9 SWAP1 MSTORE PUSH2 0x100 DUP11 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH2 0x120 DUP10 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP12 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP10 MSTORE SWAP5 DUP13 ADD MLOAD PUSH2 0xFFFF SWAP1 DUP2 AND SWAP1 SWAP5 MSTORE SWAP5 DUP12 ADD MLOAD SWAP1 SWAP3 AND SWAP1 MSTORE SWAP5 DUP9 ADD MLOAD DUP2 AND SWAP1 SWAP2 MSTORE SWAP1 DUP7 ADD MLOAD AND SWAP1 SWAP2 MSTORE DUP5 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP7 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE DUP5 MLOAD PUSH1 0x20 ADD DUP1 MLOAD SWAP1 DUP7 MSTORE PUSH1 0xE0 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 ADD MLOAD PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x100 DUP3 ADD MSTORE DUP5 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD SWAP1 SWAP3 ADD ADD DUP7 MSTORE PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0x33FC SWAP1 DUP3 SWAP1 PUSH1 0x20 ADD PUSH2 0x52BF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD MSTORE POP JUMPDEST DUP3 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3543 JUMPI DUP1 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 SUB PUSH2 0x34A5 JUMPI DUP3 MLOAD PUSH2 0x140 DUP5 ADD MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x349E SWAP4 SWAP3 SWAP2 PUSH2 0xFFFF AND SWAP1 DUP1 PUSH2 0xC65 JUMP JUMPDEST PUSH2 0x100 DUP5 ADD MSTORE JUMPDEST DUP3 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1D81B4318B379C644B5546AE9CF37D861A5C7547BF3DAE6CFAECFFA12F8748F3 DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH2 0x100 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x353A SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST PUSH2 0x3555 DUP4 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0xC37 JUMP JUMPDEST DUP4 PUSH2 0x100 ADD MLOAD LT ISZERO PUSH2 0x3593 JUMPI PUSH1 0x40 MLOAD PUSH32 0x42301C2300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E12 SLOAD PUSH2 0x140 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND SWAP2 AND ISZERO PUSH2 0x377F JUMPI PUSH2 0x120 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS EQ PUSH2 0x36D1 JUMPI PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E10 PUSH1 0x1 ADD SLOAD PUSH2 0x120 DUP6 ADD MLOAD PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x140 DUP8 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x36C7851600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x44 DUP4 ADD MSTORE DUP3 AND PUSH1 0x64 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0x36C78516 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x36C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP ADDRESS PUSH2 0x120 DUP8 ADD MSTORE POP POP JUMPDEST PUSH2 0x377F DUP3 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 EQ PUSH2 0x36E7 JUMPI DUP2 PUSH2 0x3756 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9E56F3C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3732 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3756 SWAP2 SWAP1 PUSH2 0x52D2 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x140 DUP8 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x3FDF JUMP JUMPDEST PUSH1 0x1 PUSH2 0x160 DUP6 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD MLOAD ISZERO PUSH2 0x3798 JUMPI DUP1 PUSH2 0x3807 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9E56F3C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37E3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3807 SWAP2 SWAP1 PUSH2 0x52D2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9FBF10FC PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3866 JUMPI DUP6 PUSH2 0x180 ADD MLOAD PUSH2 0x387C JUMP JUMPDEST DUP6 PUSH2 0x180 ADD MLOAD DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0x387C SWAP2 SWAP1 PUSH2 0x5221 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x40 DUP8 ADD MLOAD PUSH2 0x100 DUP11 ADD MLOAD PUSH1 0xC0 DUP12 ADD MLOAD ADDRESS SWAP2 SWAP1 PUSH2 0x38A1 SWAP1 DUP3 SWAP1 PUSH2 0xC37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP13 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP PUSH1 0x0 DUP13 PUSH1 0x80 ADD MLOAD MLOAD GT PUSH2 0x38E7 JUMPI DUP14 PUSH1 0x40 ADD MLOAD PUSH2 0x38E9 JUMP JUMPDEST ADDRESS JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3924 SWAP2 SWAP1 PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x80 DUP15 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP14 SWAP1 SHL AND DUP4 MSTORE PUSH2 0x3994 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 PUSH1 0x4 ADD PUSH2 0x52EF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x39AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x39C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x0 PUSH2 0x180 DUP9 ADD MSTORE POP SWAP5 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x77FBD1C38A5EAD50A5764A860FEF6B91E5432A95F91228E67197EDAF911CFC90 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP6 DUP10 AND DUP1 DUP6 MSTORE SWAP6 DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD DUP10 ADD SWAP1 SSTORE PUSH32 0x77FBD1C38A5EAD50A5764A860FEF6B91E5432A95F91228E67197EDAF911CFC91 DUP3 MSTORE SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP9 ADD SWAP1 SSTORE DUP3 MLOAD DUP8 DUP2 MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE DUP3 MLOAD SWAP2 SWAP5 SWAP4 SWAP3 PUSH32 0x3D2A5B5AA3C9E4A41EED8AE2E9E470C5CFB96FA51EB0935C607C0FD8EC3F3F57 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3AAE DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x45D1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3AD1 JUMPI PUSH2 0x3AD1 PUSH2 0x48AD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3AFA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3B51 JUMPI DUP4 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B24 JUMPI PUSH2 0x3B24 PUSH2 0x5234 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3B00 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B73 JUMPI PUSH2 0x3B73 PUSH2 0x48AD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3B9C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3B51 JUMPI DUP4 MLOAD PUSH1 0x2 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3BC6 JUMPI PUSH2 0x3BC6 PUSH2 0x5234 JUMP JUMPDEST PUSH2 0xFFFF SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3BA2 JUMP JUMPDEST DUP1 MLOAD DUP3 MLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C01 JUMPI PUSH2 0x3C01 PUSH2 0x48AD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3C2A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP5 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3C41 JUMPI PUSH2 0x3C41 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3E0C JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3C6C JUMPI PUSH2 0x3C6C PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP7 DUP4 PUSH1 0x1 PUSH2 0x3C86 SWAP2 SWAP1 PUSH2 0x5221 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x3C96 JUMPI PUSH2 0x3C96 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3CB4 JUMPI PUSH2 0x3CB4 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 PUSH2 0x3CC9 SWAP2 SWAP1 PUSH2 0x50DC JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 POP PUSH1 0x0 DUP1 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3CE4 JUMPI PUSH2 0x3CE4 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3D36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3D5A SWAP2 SWAP1 PUSH2 0x51B8 JUMP JUMPDEST POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x3DB5 JUMPI SWAP1 JUMPDEST DUP3 DUP12 MUL DUP3 PUSH2 0x2710 MUL ADD DUP2 DUP5 DUP14 MUL MUL DUP2 PUSH2 0x3DD0 JUMPI PUSH2 0x3DD0 PUSH2 0x510E JUMP JUMPDEST DIV SWAP11 POP DUP11 DUP9 PUSH2 0x3DE0 DUP9 PUSH1 0x1 PUSH2 0x5221 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x3DF0 JUMPI PUSH2 0x3DF0 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 POP PUSH2 0x3C50 SWAP2 POP POP JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x3029B773E586DA235D6A0709BACD2CB14A2E6562F997F3C8684513A487BCBF7A SLOAD PUSH1 0xFF AND PUSH1 0x1 SUB PUSH2 0x3E74 JUMPI PUSH1 0x40 MLOAD PUSH32 0x65D4E04900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x3029B773E586DA235D6A0709BACD2CB14A2E6562F997F3C8684513A487BCBF7A DUP1 SLOAD PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 SWAP1 SWAP2 AND OR SWAP1 SSTORE DUP1 MLOAD PUSH32 0x3029B773E586DA235D6A0709BACD2CB14A2E6562F997F3C8684513A487BCBF7B SSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH32 0x3029B773E586DA235D6A0709BACD2CB14A2E6562F997F3C8684513A487BCBF7C DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x40 SWAP1 SWAP3 ADD MLOAD PUSH32 0x3029B773E586DA235D6A0709BACD2CB14A2E6562F997F3C8684513A487BCBF7D DUP1 SLOAD SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH32 0x3029B773E586DA235D6A0709BACD2CB14A2E6562F997F3C8684513A487BCBF7A SLOAD PUSH1 0xFF AND PUSH1 0x1 SUB PUSH2 0x3FDD JUMPI PUSH1 0x40 MLOAD PUSH32 0x129C8CDB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x406B DUP5 DUP3 PUSH2 0x46EA JUMP JUMPDEST PUSH2 0x40CF JUMPI PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x40C5 SWAP1 DUP6 SWAP1 PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD PUSH2 0x9D3 JUMP JUMPDEST PUSH2 0x40CF DUP5 DUP3 PUSH2 0xD1E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP9 PUSH1 0xFF AND PUSH1 0x1 SUB PUSH2 0x4203 JUMPI DUP8 ISZERO PUSH2 0x418E JUMPI PUSH1 0x40 MLOAD PUSH32 0xA6417ED600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP1 DUP8 AND PUSH1 0xF SWAP1 DUP2 SIGNEXTEND PUSH1 0x4 DUP5 ADD MSTORE SWAP1 DUP7 AND SWAP1 SIGNEXTEND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0xA6417ED6 SWAP1 DUP9 SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4170 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4184 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x45C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3DF0212400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP1 DUP8 AND PUSH1 0xF SWAP1 DUP2 SIGNEXTEND PUSH1 0x4 DUP5 ADD MSTORE SWAP1 DUP7 AND SWAP1 SIGNEXTEND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0x3DF02124 SWAP1 DUP9 SWAP1 PUSH1 0x84 ADD PUSH2 0x4157 JUMP JUMPDEST DUP9 PUSH1 0xFF AND PUSH1 0x2 SUB PUSH2 0x4343 JUMPI DUP8 ISZERO PUSH2 0x42CE JUMPI PUSH1 0x40 MLOAD PUSH32 0xA6417ED600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP1 DUP8 AND PUSH1 0xF SWAP1 DUP2 SIGNEXTEND PUSH1 0x4 DUP5 ADD MSTORE SWAP1 DUP7 AND SWAP1 SIGNEXTEND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0xA6417ED6 SWAP1 DUP9 SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x42A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x42C8 SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST POP PUSH2 0x45C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3DF0212400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP1 DUP8 AND PUSH1 0xF SWAP1 DUP2 SIGNEXTEND PUSH1 0x4 DUP5 ADD MSTORE SWAP1 DUP7 AND SWAP1 SIGNEXTEND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0x3DF02124 SWAP1 DUP9 SWAP1 PUSH1 0x84 ADD PUSH2 0x4285 JUMP JUMPDEST DUP9 PUSH1 0xFF AND PUSH1 0x3 SUB PUSH2 0x44E4 JUMPI DUP8 ISZERO PUSH2 0x43C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x65B2489B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0x65B2489B SWAP1 DUP9 SWAP1 PUSH1 0x84 ADD PUSH2 0x4285 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x443B JUMPI PUSH1 0x40 MLOAD PUSH32 0x394747C500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x84 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0x394747C5 SWAP1 DUP9 SWAP1 PUSH1 0xA4 ADD PUSH2 0x4285 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x5B41B90800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0x5B41B908 SWAP1 PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x44C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x42C8 SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST DUP9 PUSH1 0xFF AND PUSH1 0x4 SUB PUSH2 0x4594 JUMPI DUP8 ISZERO PUSH2 0x4527 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF1C43EDE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x5B41B90800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0x5B41B908 SWAP1 DUP9 SWAP1 PUSH1 0x84 ADD PUSH2 0x4157 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF1C43EDE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x4663 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x468C SWAP2 SWAP1 PUSH2 0x539B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x46C9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x46CE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x46DF DUP8 DUP4 DUP4 DUP8 PUSH2 0x47AB JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x4714 SWAP2 SWAP1 PUSH2 0x539B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4751 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4756 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x4780 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x4780 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4780 SWAP2 SWAP1 PUSH2 0x5178 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x47A2 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x4841 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x483A JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x483A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCA3 JUMP JUMPDEST POP DUP2 PUSH2 0x3AAE JUMP JUMPDEST PUSH2 0x3AAE DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x4856 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA3 SWAP2 SWAP1 PUSH2 0x53B7 JUMP JUMPDEST PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x489A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x48A8 DUP2 PUSH2 0x488A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x4900 JUMPI PUSH2 0x4900 PUSH2 0x48AD JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x494D JUMPI PUSH2 0x494D PUSH2 0x48AD JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x496F JUMPI PUSH2 0x496F PUSH2 0x48AD JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x49AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x49BF PUSH2 0x49BA DUP3 PUSH2 0x4955 JUMP JUMPDEST PUSH2 0x4906 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x49D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x489A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x48A8 DUP2 PUSH2 0x49F1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4A37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x4A42 DUP2 PUSH2 0x488A JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4A5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4A6B DUP11 DUP4 DUP12 ADD PUSH2 0x499B JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH2 0x4A84 DUP3 PUSH2 0x49F1 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x4AA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AAE DUP10 DUP3 DUP11 ADD PUSH2 0x499B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x489A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x48A8 DUP2 PUSH2 0x4ABB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4AEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4B05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4B1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH2 0x140 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x4B32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B3A PUSH2 0x48DC JUMP JUMPDEST PUSH2 0x4B43 DUP4 PUSH2 0x4A13 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x4B51 PUSH1 0x20 DUP5 ADD PUSH2 0x489D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x4B62 PUSH1 0x40 DUP5 ADD PUSH2 0x489D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x4B73 PUSH1 0x60 DUP5 ADD PUSH2 0x4A13 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x4B84 PUSH1 0x80 DUP5 ADD PUSH2 0x4A13 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x4B95 PUSH1 0xA0 DUP5 ADD PUSH2 0x4A13 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x4BBC DUP2 DUP6 ADD PUSH2 0x4ACF JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP4 DUP2 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x4BD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4BE0 DUP10 DUP3 DUP8 ADD PUSH2 0x499B JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP DUP1 SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4BFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C0B DUP6 DUP3 DUP7 ADD PUSH2 0x4ADA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x48A8 DUP2 PUSH2 0x49F1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x48A8 DUP2 PUSH2 0x488A JUMP JUMPDEST DUP1 MLOAD PUSH2 0x48A8 DUP2 PUSH2 0x4ABB JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4C51 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4C39 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4C6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x4C79 PUSH2 0x49BA DUP3 PUSH2 0x4955 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x4C8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AAE DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x4C36 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4CC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH2 0x140 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x4CDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4CE6 PUSH2 0x48DC JUMP JUMPDEST PUSH2 0x4CEF DUP4 PUSH2 0x4C15 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x4CFD PUSH1 0x20 DUP5 ADD PUSH2 0x4C20 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x4D0E PUSH1 0x40 DUP5 ADD PUSH2 0x4C20 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x4D1F PUSH1 0x60 DUP5 ADD PUSH2 0x4C15 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x4D30 PUSH1 0x80 DUP5 ADD PUSH2 0x4C15 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x4D41 PUSH1 0xA0 DUP5 ADD PUSH2 0x4C15 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x4D68 DUP2 DUP6 ADD PUSH2 0x4C2B JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP4 DUP2 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x4D80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4D8C DUP9 DUP3 DUP8 ADD PUSH2 0x4C5A JUMP JUMPDEST SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4DB5 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4C36 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x0 PUSH2 0x140 PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x4E1B PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0xFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x4E31 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0xFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x4E59 PUSH1 0x60 DUP7 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x4E81 PUSH1 0x80 DUP7 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x4EA9 PUSH1 0xA0 DUP7 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD PUSH2 0x4ED8 DUP3 DUP8 ADD DUP3 PUSH6 0xFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x4EF2 DUP4 DUP8 ADD DUP3 PUSH2 0x4D9D JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x4F0F PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x4DE7 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE DUP4 MLOAD DUP2 MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4EF2 PUSH1 0x40 DUP4 ADD DUP3 PUSH2 0x4D9D JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xC31 JUMPI PUSH2 0xC31 PUSH2 0x4F34 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x4FAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4FC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x4FDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP5 MSTORE DUP7 MLOAD DUP2 DUP2 MLOAD AND PUSH1 0x20 DUP7 ADD MSTORE DUP2 PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH6 0xFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x60 DUP9 ADD MSTORE DUP1 PUSH1 0x60 DUP5 ADD MLOAD AND PUSH1 0x80 DUP9 ADD MSTORE POP POP POP DUP1 PUSH1 0x20 DUP9 ADD MLOAD AND PUSH1 0xA0 DUP6 ADD MSTORE POP PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE DUP1 PUSH1 0xE0 DUP5 ADD MSTORE DUP4 DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP4 DUP6 DUP3 DUP6 ADD CALLDATACOPY PUSH1 0x0 DUP4 DUP6 ADD DUP3 ADD MSTORE PUSH1 0x1F SWAP1 SWAP4 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x50D5 JUMPI PUSH2 0x50D5 PUSH2 0x4F34 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x3B51 JUMPI PUSH2 0x3B51 PUSH2 0x4F34 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0xC31 JUMPI PUSH2 0xC31 PUSH2 0x4F34 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5173 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x518A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x48A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x51CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x51D6 DUP5 PUSH2 0x519A JUMP JUMPDEST SWAP3 POP PUSH2 0x51E4 PUSH1 0x20 DUP6 ADD PUSH2 0x519A JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x51FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x521A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xC31 JUMPI PUSH2 0xC31 PUSH2 0x4F34 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x52B8 JUMPI PUSH2 0x52B8 PUSH2 0x4F34 JUMP JUMPDEST POP PUSH1 0x0 SUB SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC5E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4DE7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xC5E DUP2 PUSH2 0x49F1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 PUSH2 0xFFFF DUP13 AND DUP4 MSTORE DUP11 PUSH1 0x20 DUP5 ADD MSTORE DUP10 PUSH1 0x40 DUP5 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x60 DUP5 ADD MSTORE DUP8 PUSH1 0x80 DUP5 ADD MSTORE DUP7 PUSH1 0xA0 DUP5 ADD MSTORE DUP1 PUSH1 0xC0 DUP5 ADD MSTORE DUP6 MLOAD DUP2 DUP5 ADD MSTORE POP PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x140 DUP4 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 PUSH2 0x160 DUP5 ADD MSTORE PUSH2 0x5362 PUSH2 0x180 DUP5 ADD DUP3 PUSH2 0x4D9D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x5376 DUP2 DUP7 PUSH2 0x4D9D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x538B DUP2 DUP6 PUSH2 0x4D9D JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x53AD DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x4C36 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC5E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4D9D JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E 0xEC 0xDC PUSH23 0xD361EA4A608EC1291A66F39B61F591D844E03C8F4164AD 0xB5 0xE8 0xC4 NOT 0xC4 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
          "sourceMap": "1901:30063:6:-:0;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_callOptionalReturnBool_488": {
              "entryPoint": 18154,
              "id": 488,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_callOptionalReturn_440": {
              "entryPoint": 3358,
              "id": 440,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_revert_818": {
              "entryPoint": null,
              "id": 818,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@afterCallback_5399": {
              "entryPoint": 16255,
              "id": 5399,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@applySlippage_5468": {
              "entryPoint": 3127,
              "id": 5468,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@beforeCallback_5385": {
              "entryPoint": 15894,
              "id": 5385,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@calculateAndRegisterFee_5173": {
              "entryPoint": 3173,
              "id": 5173,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@createStream_5488": {
              "entryPoint": null,
              "id": 5488,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@engageInternal_3526": {
              "entryPoint": 2650,
              "id": 3526,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@exchange_4977": {
              "entryPoint": 16597,
              "id": 4977,
              "parameterSlots": 9,
              "returnSlots": 0
            },
            "@forceApprove_346": {
              "entryPoint": 16351,
              "id": 346,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@functionCallWithValue_643": {
              "entryPoint": 17873,
              "id": 643,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@functionCall_579": {
              "entryPoint": 15007,
              "id": 579,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@getAmountsOut_5305": {
              "entryPoint": 15329,
              "id": 5305,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@isContract_507": {
              "entryPoint": null,
              "id": 507,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@processJumpStargate_3369": {
              "entryPoint": 12805,
              "id": 3369,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@processSplit_1478": {
              "entryPoint": 6194,
              "id": 1478,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@processUnwrap_1649": {
              "entryPoint": 4085,
              "id": 1649,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@processWarpCurveExactInputSingle_2856": {
              "entryPoint": 11727,
              "id": 2856,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@processWarpUniV2LikeExactInputSingle_1893": {
              "entryPoint": 4692,
              "id": 1893,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@processWarpUniV2LikeExactInput_2192": {
              "entryPoint": 7097,
              "id": 2192,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@processWarpUniV3LikeExactInputSingle_2391": {
              "entryPoint": 9063,
              "id": 2391,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@processWarpUniV3LikeExactInput_2631": {
              "entryPoint": 10385,
              "id": 2631,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@processWrap_1544": {
              "entryPoint": 3629,
              "id": 1544,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@readAddress_5588": {
              "entryPoint": null,
              "id": 5588,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@readAddresses_5636": {
              "entryPoint": 15030,
              "id": 5636,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@readBytes_5597": {
              "entryPoint": null,
              "id": 5597,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@readUint16_5525": {
              "entryPoint": null,
              "id": 5525,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@readUint16s_5675": {
              "entryPoint": 15192,
              "id": 5675,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@readUint256_5570": {
              "entryPoint": null,
              "id": 5570,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@readUint32_5543": {
              "entryPoint": null,
              "id": 5543,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@readUint8_5516": {
              "entryPoint": null,
              "id": 5516,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@registerCollectedFee_5077": {
              "entryPoint": 14807,
              "id": 5077,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@safeTransfer_146": {
              "entryPoint": 2433,
              "id": 146,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@sgReceive_3000": {
              "entryPoint": 99,
              "id": 3000,
              "parameterSlots": 6,
              "returnSlots": 0
            },
            "@state_5032": {
              "entryPoint": null,
              "id": 5032,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@state_5356": {
              "entryPoint": null,
              "id": 5356,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@state_5448": {
              "entryPoint": null,
              "id": 5448,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@verifyCallResultFromTarget_774": {
              "entryPoint": 18347,
              "id": 774,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@warpLinkEngage_3870": {
              "entryPoint": 879,
              "id": 3870,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_decode_address": {
              "entryPoint": 18963,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_address_fromMemory": {
              "entryPoint": 19477,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_bytes": {
              "entryPoint": 18843,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_bytes_fromMemory": {
              "entryPoint": 19546,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_struct_PermitParams_calldata": {
              "entryPoint": 19162,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_fromMemory": {
              "entryPoint": 21202,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 20856,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_int256t_int256_fromMemory": {
              "entryPoint": 21091,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_struct$_Params_$4065_memory_ptr_fromMemory": {
              "entryPoint": 19615,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_struct$_Params_$4065_memory_ptrt_struct$_PermitParams_$5476_calldata_ptr": {
              "entryPoint": 19186,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory": {
              "entryPoint": 20920,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_uint16t_bytes_memory_ptrt_uint256t_addresst_uint256t_bytes_memory_ptr": {
              "entryPoint": 18974,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 6
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 21000,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_uint112_fromMemory": {
              "entryPoint": 20890,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_uint16": {
              "entryPoint": 18589,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_uint16_fromMemory": {
              "entryPoint": 19488,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_uint48": {
              "entryPoint": 19151,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_uint48_fromMemory": {
              "entryPoint": 19499,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_address": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_bytes": {
              "entryPoint": 19869,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_struct_Params": {
              "entryPoint": 19943,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 21403,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint160_t_address__to_t_address_t_address_t_uint160_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_bool_t_int256_t_uint160_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_rational_0_by_1__to_t_address_t_uint8__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_struct$_PermitSingle_$4162_memory_ptr_t_bytes_calldata_ptr__to_t_address_t_struct$_PermitSingle_$4162_memory_ptr_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 20450,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_int128_t_int128_t_uint256_t_uint256__to_t_int128_t_int128_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 21431,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_struct$_Params_$4065_memory_ptr__to_t_struct$_Params_$4065_memory_ptr__fromStack_reversed": {
              "entryPoint": 21183,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_struct$_Params_$4065_memory_ptr_t_struct$_PermitParams_$5476_memory_ptr__to_t_struct$_Params_$4065_memory_ptr_t_struct$_PermitParams_$5476_memory_ptr__fromStack_reversed": {
              "entryPoint": 20220,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint16_t_uint256_t_uint256_t_address_payable_t_uint256_t_uint256_t_struct$_lzTxObj_$4651_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_uint16_t_uint256_t_uint256_t_address_payable_t_uint256_t_uint256_t_struct$_lzTxObj_$4651_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 21231,
              "id": null,
              "parameterSlots": 10,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_address_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_uint256_t_uint256_t_address_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_uint16": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_uint48": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "access_calldata_tail_t_bytes_calldata_ptr": {
              "entryPoint": 20342,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "allocate_memory": {
              "entryPoint": 18694,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_memory_2449": {
              "entryPoint": 18652,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_allocation_size_bytes": {
              "entryPoint": 18773,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 21025,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 20797,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 20727,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint16": {
              "entryPoint": 20700,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 20323,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 19510,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "increment_t_uint256": {
              "entryPoint": 20644,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "negate_t_int256": {
              "entryPoint": 21127,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 20276,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": 20750,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 21044,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 18605,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 18929,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_uint16": {
              "entryPoint": 18570,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_uint48": {
              "entryPoint": 19131,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:22827:31",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:31",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "58:73:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "109:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "118:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "121:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "111:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "111:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "111:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "81:5:31"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "92:5:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "99:6:31",
                                        "type": "",
                                        "value": "0xffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "88:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "88:18:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "78:2:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "78:29:31"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "71:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "71:37:31"
                          },
                          "nodeType": "YulIf",
                          "src": "68:57:31"
                        }
                      ]
                    },
                    "name": "validator_revert_uint16",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "47:5:31",
                        "type": ""
                      }
                    ],
                    "src": "14:117:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "184:84:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "194:29:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "216:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "203:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "203:20:31"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "194:5:31"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "256:5:31"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_uint16",
                              "nodeType": "YulIdentifier",
                              "src": "232:23:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "232:30:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "232:30:31"
                        }
                      ]
                    },
                    "name": "abi_decode_uint16",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "163:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "174:5:31",
                        "type": ""
                      }
                    ],
                    "src": "136:132:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "305:152:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "322:1:31",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "325:77:31",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "315:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "315:88:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "315:88:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "419:1:31",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "422:4:31",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "412:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "412:15:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "412:15:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "443:1:31",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "446:4:31",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "436:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "436:15:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "436:15:31"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "273:184:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "508:209:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "518:19:31",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "534:2:31",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "528:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "528:9:31"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "518:6:31"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "546:37:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "568:6:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "576:6:31",
                                "type": "",
                                "value": "0x0140"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "564:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "564:19:31"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "550:10:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "658:22:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "660:16:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "660:18:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "660:18:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "601:10:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "613:18:31",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "598:2:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "598:34:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "637:10:31"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "649:6:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "634:2:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "634:22:31"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "595:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "595:62:31"
                          },
                          "nodeType": "YulIf",
                          "src": "592:88:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "696:2:31",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "700:10:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "689:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "689:22:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "689:22:31"
                        }
                      ]
                    },
                    "name": "allocate_memory_2449",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "497:6:31",
                        "type": ""
                      }
                    ],
                    "src": "462:255:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "767:289:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "777:19:31",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "793:2:31",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "787:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "787:9:31"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "777:6:31"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "805:117:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "827:6:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nodeType": "YulIdentifier",
                                        "src": "843:4:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "849:2:31",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "839:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "839:13:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "854:66:31",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "835:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "835:86:31"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "823:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "823:99:31"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "809:10:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "997:22:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "999:16:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "999:18:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "999:18:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "940:10:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "952:18:31",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "937:2:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "937:34:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "976:10:31"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "988:6:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "973:2:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "973:22:31"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "934:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "934:62:31"
                          },
                          "nodeType": "YulIf",
                          "src": "931:88:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1035:2:31",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1039:10:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1028:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1028:22:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1028:22:31"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "747:4:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "756:6:31",
                        "type": ""
                      }
                    ],
                    "src": "722:334:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1118:188:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1162:22:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1164:16:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1164:18:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1164:18:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1134:6:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1142:18:31",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1131:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1131:30:31"
                          },
                          "nodeType": "YulIf",
                          "src": "1128:56:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1193:107:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "1213:6:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1221:2:31",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1209:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1209:15:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1226:66:31",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1205:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1205:88:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1295:4:31",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1201:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1201:99:31"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "1193:4:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "1098:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "1109:4:31",
                        "type": ""
                      }
                    ],
                    "src": "1061:245:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1363:410:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1412:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1421:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1424:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1414:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1414:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1414:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1391:6:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1399:4:31",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1387:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1387:17:31"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "1406:3:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1383:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1383:27:31"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1376:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1376:35:31"
                          },
                          "nodeType": "YulIf",
                          "src": "1373:55:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1437:30:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1460:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1447:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1447:20:31"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1441:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1476:63:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1535:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_bytes",
                                  "nodeType": "YulIdentifier",
                                  "src": "1507:27:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1507:31:31"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1491:15:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1491:48:31"
                          },
                          "variables": [
                            {
                              "name": "array_1",
                              "nodeType": "YulTypedName",
                              "src": "1480:7:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array_1",
                                "nodeType": "YulIdentifier",
                                "src": "1555:7:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1564:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1548:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1548:19:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1548:19:31"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1615:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1624:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1627:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1617:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1617:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1617:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1590:6:31"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1598:2:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1586:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1586:15:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1603:4:31",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1582:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1582:26:31"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1610:3:31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1579:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1579:35:31"
                          },
                          "nodeType": "YulIf",
                          "src": "1576:55:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1657:7:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1666:4:31",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1653:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1653:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1677:6:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1685:4:31",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1673:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1673:17:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1692:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "1640:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1640:55:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1640:55:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "array_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1719:7:31"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1728:2:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1715:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1715:16:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1733:4:31",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1711:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1711:27:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1740:1:31",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1704:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1704:38:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1704:38:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1751:16:31",
                          "value": {
                            "name": "array_1",
                            "nodeType": "YulIdentifier",
                            "src": "1760:7:31"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "1751:5:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1337:6:31",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1345:3:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "1353:5:31",
                        "type": ""
                      }
                    ],
                    "src": "1311:462:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1823:109:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1910:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1919:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1922:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1912:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1912:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1912:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1846:5:31"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1857:5:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1864:42:31",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1853:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1853:54:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1843:2:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1843:65:31"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1836:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1836:73:31"
                          },
                          "nodeType": "YulIf",
                          "src": "1833:93:31"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1812:5:31",
                        "type": ""
                      }
                    ],
                    "src": "1778:154:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1986:85:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1996:29:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2018:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2005:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2005:20:31"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "1996:5:31"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2059:5:31"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "2034:24:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2034:31:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2034:31:31"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1965:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1976:5:31",
                        "type": ""
                      }
                    ],
                    "src": "1937:134:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2248:780:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2295:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2304:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2307:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2297:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2297:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2297:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2269:7:31"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2278:9:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2265:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2265:23:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2290:3:31",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2261:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2261:33:31"
                          },
                          "nodeType": "YulIf",
                          "src": "2258:53:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2320:36:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2346:9:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2333:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2333:23:31"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2324:5:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2389:5:31"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_uint16",
                              "nodeType": "YulIdentifier",
                              "src": "2365:23:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2365:30:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2365:30:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2404:15:31",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2414:5:31"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2404:6:31"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2428:46:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2459:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2470:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2455:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2455:18:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2442:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2442:32:31"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "2432:6:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2483:28:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2493:18:31",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2487:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2538:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2547:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2550:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2540:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2540:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2540:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2526:6:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2534:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2523:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2523:14:31"
                          },
                          "nodeType": "YulIf",
                          "src": "2520:34:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2563:59:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2594:9:31"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2605:6:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2590:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2590:22:31"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2614:7:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "2573:16:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2573:49:31"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2563:6:31"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2631:42:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2658:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2669:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2654:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2654:18:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2641:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2641:32:31"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "2631:6:31"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2682:47:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2714:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2725:2:31",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2710:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2710:18:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2697:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2697:32:31"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "2686:7:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "2763:7:31"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "2738:24:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2738:33:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2738:33:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2780:17:31",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "2790:7:31"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "2780:6:31"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2806:43:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2833:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2844:3:31",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2829:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2829:19:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2816:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2816:33:31"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "2806:6:31"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2858:49:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2891:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2902:3:31",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2887:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2887:19:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2874:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2874:33:31"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "2862:8:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2936:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2945:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2948:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2938:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2938:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2938:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "2922:8:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2932:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2919:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2919:16:31"
                          },
                          "nodeType": "YulIf",
                          "src": "2916:36:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2961:61:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2992:9:31"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3003:8:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2988:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2988:24:31"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3014:7:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "2971:16:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2971:51:31"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "2961:6:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint16t_bytes_memory_ptrt_uint256t_addresst_uint256t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2174:9:31",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2185:7:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2197:6:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2205:6:31",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2213:6:31",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "2221:6:31",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "2229:6:31",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "2237:6:31",
                        "type": ""
                      }
                    ],
                    "src": "2076:952:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3077:81:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3136:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3145:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3148:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3138:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3138:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3138:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3100:5:31"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "3111:5:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3118:14:31",
                                        "type": "",
                                        "value": "0xffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3107:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3107:26:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "3097:2:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3097:37:31"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3090:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3090:45:31"
                          },
                          "nodeType": "YulIf",
                          "src": "3087:65:31"
                        }
                      ]
                    },
                    "name": "validator_revert_uint48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3066:5:31",
                        "type": ""
                      }
                    ],
                    "src": "3033:125:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3211:84:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3221:29:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3243:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3230:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3230:20:31"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "3221:5:31"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3283:5:31"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_uint48",
                              "nodeType": "YulIdentifier",
                              "src": "3259:23:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3259:30:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3259:30:31"
                        }
                      ]
                    },
                    "name": "abi_decode_uint48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "3190:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3201:5:31",
                        "type": ""
                      }
                    ],
                    "src": "3163:132:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3375:85:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3414:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3423:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3426:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3416:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3416:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3416:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "3396:3:31"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3401:6:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3392:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3392:16:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3410:2:31",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3388:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3388:25:31"
                          },
                          "nodeType": "YulIf",
                          "src": "3385:45:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3439:15:31",
                          "value": {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "3448:6:31"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "3439:5:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_struct_PermitParams_calldata",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "3349:6:31",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3357:3:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3365:5:31",
                        "type": ""
                      }
                    ],
                    "src": "3300:160:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3608:1323:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3654:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3663:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3666:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3656:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3656:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3656:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3629:7:31"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3638:9:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3625:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3625:23:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3650:2:31",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3621:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3621:32:31"
                          },
                          "nodeType": "YulIf",
                          "src": "3618:52:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3679:37:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3706:9:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3693:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3693:23:31"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3683:6:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3725:28:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3735:18:31",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "3729:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3780:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3789:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3792:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3782:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3782:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3782:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3768:6:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3776:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3765:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3765:14:31"
                          },
                          "nodeType": "YulIf",
                          "src": "3762:34:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3805:32:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3819:9:31"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3830:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3815:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3815:22:31"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "3809:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3879:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3888:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3891:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3881:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3881:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3881:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3857:7:31"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "3866:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3853:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3853:16:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3871:6:31",
                                "type": "",
                                "value": "0x0140"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3849:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3849:29:31"
                          },
                          "nodeType": "YulIf",
                          "src": "3846:49:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3904:35:31",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "allocate_memory_2449",
                              "nodeType": "YulIdentifier",
                              "src": "3917:20:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3917:22:31"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3908:5:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3955:5:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "3981:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "3962:18:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3962:22:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3948:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3948:37:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3948:37:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4005:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4012:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4001:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4001:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4039:2:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4043:2:31",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4035:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4035:11:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint16",
                                  "nodeType": "YulIdentifier",
                                  "src": "4017:17:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4017:30:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3994:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3994:54:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3994:54:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4068:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4075:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4064:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4064:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4102:2:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4106:2:31",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4098:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4098:11:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint16",
                                  "nodeType": "YulIdentifier",
                                  "src": "4080:17:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4080:30:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4057:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4057:54:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4057:54:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4131:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4138:2:31",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4127:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4127:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4166:2:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4170:2:31",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4162:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4162:11:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "4143:18:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4143:31:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4120:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4120:55:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4120:55:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4195:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4202:3:31",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4191:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4191:15:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4231:2:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4235:3:31",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4227:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4227:12:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "4208:18:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4208:32:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4184:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4184:57:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4184:57:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4261:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4268:3:31",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4257:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4257:15:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4297:2:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4301:3:31",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4293:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4293:12:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "4274:18:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4274:32:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4250:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4250:57:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4250:57:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4327:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4334:3:31",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4323:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4323:15:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4357:2:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4361:3:31",
                                        "type": "",
                                        "value": "192"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4353:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4353:12:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4340:12:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4340:26:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4316:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4316:51:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4316:51:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4387:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4394:3:31",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4383:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4383:15:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4417:2:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4421:3:31",
                                        "type": "",
                                        "value": "224"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4413:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4413:12:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4400:12:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4400:26:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4376:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4376:51:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4376:51:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4436:13:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4446:3:31",
                            "type": "",
                            "value": "256"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "4440:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4469:5:31"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "4476:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4465:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4465:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4503:2:31"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "4507:2:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4499:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4499:11:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint48",
                                  "nodeType": "YulIdentifier",
                                  "src": "4481:17:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4481:30:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4458:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4458:54:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4458:54:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4521:13:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4531:3:31",
                            "type": "",
                            "value": "288"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "4525:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4543:41:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4576:2:31"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "4580:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4572:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4572:11:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4559:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4559:25:31"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "4547:8:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4613:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4622:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4625:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4615:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4615:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4615:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "4599:8:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4609:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4596:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4596:16:31"
                          },
                          "nodeType": "YulIf",
                          "src": "4593:36:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4649:5:31"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "4656:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4645:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4645:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4682:2:31"
                                      },
                                      {
                                        "name": "offset_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4686:8:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4678:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4678:17:31"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4697:7:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_bytes",
                                  "nodeType": "YulIdentifier",
                                  "src": "4661:16:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4661:44:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4638:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4638:68:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4638:68:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4715:15:31",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4725:5:31"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4715:6:31"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4739:48:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4772:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4783:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4768:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4768:18:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4755:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4755:32:31"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "4743:8:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4816:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4825:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4828:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4818:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4818:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4818:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "4802:8:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4812:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4799:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4799:16:31"
                          },
                          "nodeType": "YulIf",
                          "src": "4796:36:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4841:84:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4895:9:31"
                                  },
                                  {
                                    "name": "offset_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4906:8:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4891:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4891:24:31"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4917:7:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_struct_PermitParams_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "4851:39:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4851:74:31"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4841:6:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_Params_$4065_memory_ptrt_struct$_PermitParams_$5476_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3566:9:31",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3577:7:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3589:6:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3597:6:31",
                        "type": ""
                      }
                    ],
                    "src": "3465:1466:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4996:78:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5006:22:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5021:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5015:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5015:13:31"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "5006:5:31"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5062:5:31"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "5037:24:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5037:31:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5037:31:31"
                        }
                      ]
                    },
                    "name": "abi_decode_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "4975:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4986:5:31",
                        "type": ""
                      }
                    ],
                    "src": "4936:138:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5138:77:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5148:22:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5163:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5157:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5157:13:31"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "5148:5:31"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5203:5:31"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_uint16",
                              "nodeType": "YulIdentifier",
                              "src": "5179:23:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5179:30:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5179:30:31"
                        }
                      ]
                    },
                    "name": "abi_decode_uint16_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "5117:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "5128:5:31",
                        "type": ""
                      }
                    ],
                    "src": "5079:136:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5279:77:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5289:22:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5304:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5298:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5298:13:31"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "5289:5:31"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5344:5:31"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_uint48",
                              "nodeType": "YulIdentifier",
                              "src": "5320:23:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5320:30:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5320:30:31"
                        }
                      ]
                    },
                    "name": "abi_decode_uint48_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "5258:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "5269:5:31",
                        "type": ""
                      }
                    ],
                    "src": "5220:136:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5427:184:31",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5437:10:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5446:1:31",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "5441:1:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5506:63:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "5531:3:31"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "5536:1:31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5527:3:31"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5527:11:31"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "5550:3:31"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "5555:1:31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "5546:3:31"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5546:11:31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "5540:5:31"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5540:18:31"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "5520:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5520:39:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5520:39:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "5467:1:31"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5470:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "5464:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5464:13:31"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "5478:19:31",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "5480:15:31",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "5489:1:31"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5492:2:31",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5485:3:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5485:10:31"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "5480:1:31"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "5460:3:31",
                            "statements": []
                          },
                          "src": "5456:113:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "5589:3:31"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "5594:6:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5585:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5585:16:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5603:1:31",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5578:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5578:27:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5578:27:31"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "5405:3:31",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "5410:3:31",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "5415:6:31",
                        "type": ""
                      }
                    ],
                    "src": "5361:250:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5679:378:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5728:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5737:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5740:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5730:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5730:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5730:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5707:6:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5715:4:31",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5703:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5703:17:31"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "5722:3:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5699:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5699:27:31"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "5692:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5692:35:31"
                          },
                          "nodeType": "YulIf",
                          "src": "5689:55:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5753:23:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5769:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5763:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5763:13:31"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5757:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5785:63:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5844:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_bytes",
                                  "nodeType": "YulIdentifier",
                                  "src": "5816:27:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5816:31:31"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "5800:15:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5800:48:31"
                          },
                          "variables": [
                            {
                              "name": "array_1",
                              "nodeType": "YulTypedName",
                              "src": "5789:7:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array_1",
                                "nodeType": "YulIdentifier",
                                "src": "5864:7:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5873:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5857:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5857:19:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5857:19:31"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5924:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5933:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5936:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5926:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5926:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5926:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5899:6:31"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "5907:2:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5895:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5895:15:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5912:4:31",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5891:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5891:26:31"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "5919:3:31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5888:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5888:35:31"
                          },
                          "nodeType": "YulIf",
                          "src": "5885:55:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5988:6:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5996:4:31",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5984:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5984:17:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "array_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6007:7:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6016:4:31",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6003:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6003:18:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6023:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "5949:34:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5949:77:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5949:77:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6035:16:31",
                          "value": {
                            "name": "array_1",
                            "nodeType": "YulIdentifier",
                            "src": "6044:7:31"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "6035:5:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_bytes_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "5653:6:31",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5661:3:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "5669:5:31",
                        "type": ""
                      }
                    ],
                    "src": "5616:441:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6167:1188:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6213:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6222:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6225:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6215:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6215:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6215:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6188:7:31"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6197:9:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6184:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6184:23:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6209:2:31",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6180:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6180:32:31"
                          },
                          "nodeType": "YulIf",
                          "src": "6177:52:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6238:30:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6258:9:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "6252:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6252:16:31"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "6242:6:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6277:28:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6287:18:31",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "6281:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6332:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6341:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6344:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6334:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6334:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6334:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6320:6:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6328:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6317:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6317:14:31"
                          },
                          "nodeType": "YulIf",
                          "src": "6314:34:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6357:32:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6371:9:31"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6382:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6367:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6367:22:31"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "6361:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6431:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6440:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6443:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6433:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6433:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6433:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6409:7:31"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "6418:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6405:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6405:16:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6423:6:31",
                                "type": "",
                                "value": "0x0140"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6401:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6401:29:31"
                          },
                          "nodeType": "YulIf",
                          "src": "6398:49:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6456:35:31",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "allocate_memory_2449",
                              "nodeType": "YulIdentifier",
                              "src": "6469:20:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6469:22:31"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "6460:5:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6507:5:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "6544:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "6514:29:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6514:33:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6500:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6500:48:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6500:48:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6568:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6575:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6564:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6564:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "6613:2:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6617:2:31",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6609:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6609:11:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint16_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "6580:28:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6580:41:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6557:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6557:65:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6557:65:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6642:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6649:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6638:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6638:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "6687:2:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6691:2:31",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6683:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6683:11:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint16_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "6654:28:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6654:41:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6631:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6631:65:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6631:65:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6716:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6723:2:31",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6712:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6712:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "6762:2:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6766:2:31",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6758:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6758:11:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "6728:29:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6728:42:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6705:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6705:66:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6705:66:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6791:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6798:3:31",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6787:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6787:15:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "6838:2:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6842:3:31",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6834:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6834:12:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "6804:29:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6804:43:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6780:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6780:68:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6780:68:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6868:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6875:3:31",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6864:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6864:15:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "6915:2:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6919:3:31",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6911:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6911:12:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "6881:29:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6881:43:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6857:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6857:68:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6857:68:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6945:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6952:3:31",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6941:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6941:15:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "6968:2:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6972:3:31",
                                        "type": "",
                                        "value": "192"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6964:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6964:12:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6958:5:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6958:19:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6934:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6934:44:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6934:44:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6998:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7005:3:31",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6994:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6994:15:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "7021:2:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7025:3:31",
                                        "type": "",
                                        "value": "224"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7017:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7017:12:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "7011:5:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7011:19:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6987:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6987:44:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6987:44:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7040:13:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7050:3:31",
                            "type": "",
                            "value": "256"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "7044:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7073:5:31"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "7080:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7069:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7069:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "7118:2:31"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "7122:2:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7114:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7114:11:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint48_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "7085:28:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7085:41:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7062:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7062:65:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7062:65:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7136:13:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7146:3:31",
                            "type": "",
                            "value": "288"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "7140:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7158:34:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "7184:2:31"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "7188:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7180:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7180:11:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7174:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7174:18:31"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "7162:8:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7221:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7230:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7233:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7223:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7223:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7223:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "7207:8:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7217:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7204:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7204:16:31"
                          },
                          "nodeType": "YulIf",
                          "src": "7201:36:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7257:5:31"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "7264:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7253:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7253:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "7301:2:31"
                                      },
                                      {
                                        "name": "offset_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "7305:8:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7297:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7297:17:31"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7316:7:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_bytes_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "7269:27:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7269:55:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7246:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7246:79:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7246:79:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7334:15:31",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "7344:5:31"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "7334:6:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_Params_$4065_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6133:9:31",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6144:7:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6156:6:31",
                        "type": ""
                      }
                    ],
                    "src": "6062:1293:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7404:83:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7421:3:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7430:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7437:42:31",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7426:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7426:54:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7414:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7414:67:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7414:67:31"
                        }
                      ]
                    },
                    "name": "abi_encode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "7388:5:31",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7395:3:31",
                        "type": ""
                      }
                    ],
                    "src": "7360:127:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7535:47:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7552:3:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7561:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7568:6:31",
                                    "type": "",
                                    "value": "0xffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7557:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7557:18:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7545:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7545:31:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7545:31:31"
                        }
                      ]
                    },
                    "name": "abi_encode_uint16",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "7519:5:31",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7526:3:31",
                        "type": ""
                      }
                    ],
                    "src": "7492:90:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7630:55:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7647:3:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7656:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7663:14:31",
                                    "type": "",
                                    "value": "0xffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7652:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7652:26:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7640:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7640:39:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7640:39:31"
                        }
                      ]
                    },
                    "name": "abi_encode_uint48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "7614:5:31",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7621:3:31",
                        "type": ""
                      }
                    ],
                    "src": "7587:98:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7739:280:31",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7749:26:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7769:5:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7763:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7763:12:31"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "7753:6:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7791:3:31"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7796:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7784:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7784:19:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7784:19:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7851:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7858:4:31",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7847:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7847:16:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7869:3:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7874:4:31",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7865:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7865:14:31"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7881:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "7812:34:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7812:76:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7812:76:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7897:116:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7912:3:31"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "7925:6:31"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7933:2:31",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7921:3:31"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7921:15:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7938:66:31",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "7917:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7917:88:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7908:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7908:98:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8008:4:31",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7904:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7904:109:31"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "7897:3:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "7716:5:31",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7723:3:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "7731:3:31",
                        "type": ""
                      }
                    ],
                    "src": "7690:329:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8081:1054:31",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8091:16:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8101:6:31",
                            "type": "",
                            "value": "0x0140"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "8095:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "8141:5:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "8135:5:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8135:12:31"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8149:3:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_address",
                              "nodeType": "YulIdentifier",
                              "src": "8116:18:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8116:37:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8116:37:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8162:43:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "8192:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8199:4:31",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8188:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8188:16:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "8182:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8182:23:31"
                          },
                          "variables": [
                            {
                              "name": "memberValue0",
                              "nodeType": "YulTypedName",
                              "src": "8166:12:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memberValue0",
                                "nodeType": "YulIdentifier",
                                "src": "8232:12:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8250:3:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8255:4:31",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8246:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8246:14:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_uint16",
                              "nodeType": "YulIdentifier",
                              "src": "8214:17:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8214:47:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8214:47:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8270:45:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "8302:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8309:4:31",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8298:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8298:16:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "8292:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8292:23:31"
                          },
                          "variables": [
                            {
                              "name": "memberValue0_1",
                              "nodeType": "YulTypedName",
                              "src": "8274:14:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memberValue0_1",
                                "nodeType": "YulIdentifier",
                                "src": "8342:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8362:3:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8367:4:31",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8358:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8358:14:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_uint16",
                              "nodeType": "YulIdentifier",
                              "src": "8324:17:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8324:49:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8324:49:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8382:45:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "8414:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8421:4:31",
                                    "type": "",
                                    "value": "0x60"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8410:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8410:16:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "8404:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8404:23:31"
                          },
                          "variables": [
                            {
                              "name": "memberValue0_2",
                              "nodeType": "YulTypedName",
                              "src": "8386:14:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memberValue0_2",
                                "nodeType": "YulIdentifier",
                                "src": "8455:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8475:3:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8480:4:31",
                                    "type": "",
                                    "value": "0x60"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8471:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8471:14:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_address",
                              "nodeType": "YulIdentifier",
                              "src": "8436:18:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8436:50:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8436:50:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8495:45:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "8527:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8534:4:31",
                                    "type": "",
                                    "value": "0x80"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8523:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8523:16:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "8517:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8517:23:31"
                          },
                          "variables": [
                            {
                              "name": "memberValue0_3",
                              "nodeType": "YulTypedName",
                              "src": "8499:14:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memberValue0_3",
                                "nodeType": "YulIdentifier",
                                "src": "8568:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8588:3:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8593:4:31",
                                    "type": "",
                                    "value": "0x80"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8584:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8584:14:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_address",
                              "nodeType": "YulIdentifier",
                              "src": "8549:18:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8549:50:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8549:50:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8608:45:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "8640:5:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8647:4:31",
                                    "type": "",
                                    "value": "0xa0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8636:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8636:16:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "8630:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8630:23:31"
                          },
                          "variables": [
                            {
                              "name": "memberValue0_4",
                              "nodeType": "YulTypedName",
                              "src": "8612:14:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memberValue0_4",
                                "nodeType": "YulIdentifier",
                                "src": "8681:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8701:3:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8706:4:31",
                                    "type": "",
                                    "value": "0xa0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8697:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8697:14:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_address",
                              "nodeType": "YulIdentifier",
                              "src": "8662:18:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8662:50:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8662:50:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8732:3:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8737:4:31",
                                    "type": "",
                                    "value": "0xc0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8728:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8728:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "8754:5:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8761:4:31",
                                        "type": "",
                                        "value": "0xc0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8750:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8750:16:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "8744:5:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8744:23:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8721:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8721:47:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8721:47:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8788:3:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8793:4:31",
                                    "type": "",
                                    "value": "0xe0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8784:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8784:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "8810:5:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8817:4:31",
                                        "type": "",
                                        "value": "0xe0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8806:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8806:16:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "8800:5:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8800:23:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8777:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8777:47:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8777:47:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8833:16:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8843:6:31",
                            "type": "",
                            "value": "0x0100"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "8837:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8858:43:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "8890:5:31"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8897:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8886:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8886:14:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "8880:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8880:21:31"
                          },
                          "variables": [
                            {
                              "name": "memberValue0_5",
                              "nodeType": "YulTypedName",
                              "src": "8862:14:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memberValue0_5",
                                "nodeType": "YulIdentifier",
                                "src": "8928:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8948:3:31"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8953:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8944:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8944:12:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_uint48",
                              "nodeType": "YulIdentifier",
                              "src": "8910:17:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8910:47:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8910:47:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8966:16:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8976:6:31",
                            "type": "",
                            "value": "0x0120"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "8970:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8991:43:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9023:5:31"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "9030:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9019:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9019:14:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "9013:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9013:21:31"
                          },
                          "variables": [
                            {
                              "name": "memberValue0_6",
                              "nodeType": "YulTypedName",
                              "src": "8995:14:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "9054:3:31"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "9059:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9050:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9050:12:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9064:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9043:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9043:24:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9043:24:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9076:53:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "memberValue0_6",
                                "nodeType": "YulIdentifier",
                                "src": "9100:14:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "9120:3:31"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9125:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9116:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9116:12:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "9083:16:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9083:46:31"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "9076:3:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_struct_Params",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "8058:5:31",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "8065:3:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "8073:3:31",
                        "type": ""
                      }
                    ],
                    "src": "8024:1111:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9377:360:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9394:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9405:2:31",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9387:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9387:21:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9387:21:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9417:66:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9456:6:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9468:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9479:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9464:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9464:18:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_struct_Params",
                              "nodeType": "YulIdentifier",
                              "src": "9431:24:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9431:52:31"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "9421:6:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9503:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9514:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9499:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9499:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9523:6:31"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9531:9:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9519:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9519:22:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9492:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9492:50:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9492:50:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "9558:6:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9572:6:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "9566:5:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9566:13:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9551:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9551:29:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9551:29:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9589:42:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9619:6:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9627:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9615:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9615:15:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "9609:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9609:22:31"
                          },
                          "variables": [
                            {
                              "name": "memberValue0",
                              "nodeType": "YulTypedName",
                              "src": "9593:12:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9651:6:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9659:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9647:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9647:15:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9664:2:31",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9640:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9640:27:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9640:27:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9676:55:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "memberValue0",
                                "nodeType": "YulIdentifier",
                                "src": "9701:12:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9719:6:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9727:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9715:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9715:15:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "9684:16:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9684:47:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9676:4:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_Params_$4065_memory_ptr_t_struct$_PermitParams_$5476_memory_ptr__to_t_struct$_Params_$4065_memory_ptr_t_struct$_PermitParams_$5476_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9338:9:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9349:6:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9357:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9368:4:31",
                        "type": ""
                      }
                    ],
                    "src": "9140:597:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9774:152:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9791:1:31",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9794:77:31",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9784:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9784:88:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9784:88:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9888:1:31",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9891:4:31",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9881:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9881:15:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9881:15:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9912:1:31",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9915:4:31",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "9905:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9905:15:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9905:15:31"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "9742:184:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9980:79:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9990:17:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "10002:1:31"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "10005:1:31"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "9998:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9998:9:31"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "9990:4:31"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10031:22:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "10033:16:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10033:18:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10033:18:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "10022:4:31"
                              },
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "10028:1:31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10019:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10019:11:31"
                          },
                          "nodeType": "YulIf",
                          "src": "10016:37:31"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "9962:1:31",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "9965:1:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "9971:4:31",
                        "type": ""
                      }
                    ],
                    "src": "9931:128:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10158:486:31",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10168:51:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr_to_tail",
                                "nodeType": "YulIdentifier",
                                "src": "10207:11:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10194:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10194:25:31"
                          },
                          "variables": [
                            {
                              "name": "rel_offset_of_tail",
                              "nodeType": "YulTypedName",
                              "src": "10172:18:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10367:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10376:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10379:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10369:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10369:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10369:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "rel_offset_of_tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "10242:18:31"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "calldatasize",
                                              "nodeType": "YulIdentifier",
                                              "src": "10270:12:31"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "10270:14:31"
                                          },
                                          {
                                            "name": "base_ref",
                                            "nodeType": "YulIdentifier",
                                            "src": "10286:8:31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "10266:3:31"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "10266:29:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10297:66:31",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10262:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10262:102:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "10238:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10238:127:31"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "10231:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10231:135:31"
                          },
                          "nodeType": "YulIf",
                          "src": "10228:155:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10392:47:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "base_ref",
                                "nodeType": "YulIdentifier",
                                "src": "10410:8:31"
                              },
                              {
                                "name": "rel_offset_of_tail",
                                "nodeType": "YulIdentifier",
                                "src": "10420:18:31"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10406:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10406:33:31"
                          },
                          "variables": [
                            {
                              "name": "addr_1",
                              "nodeType": "YulTypedName",
                              "src": "10396:6:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10448:30:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "addr_1",
                                "nodeType": "YulIdentifier",
                                "src": "10471:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10458:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10458:20:31"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "10448:6:31"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10521:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10530:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10533:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10523:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10523:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10523:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "10493:6:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10501:18:31",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10490:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10490:30:31"
                          },
                          "nodeType": "YulIf",
                          "src": "10487:50:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10546:25:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "addr_1",
                                "nodeType": "YulIdentifier",
                                "src": "10558:6:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10566:4:31",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10554:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10554:17:31"
                          },
                          "variableNames": [
                            {
                              "name": "addr",
                              "nodeType": "YulIdentifier",
                              "src": "10546:4:31"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10622:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10631:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10634:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10624:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10624:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10624:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "addr",
                                "nodeType": "YulIdentifier",
                                "src": "10587:4:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "calldatasize",
                                      "nodeType": "YulIdentifier",
                                      "src": "10597:12:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10597:14:31"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "10613:6:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10593:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10593:27:31"
                              }
                            ],
                            "functionName": {
                              "name": "sgt",
                              "nodeType": "YulIdentifier",
                              "src": "10583:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10583:38:31"
                          },
                          "nodeType": "YulIf",
                          "src": "10580:58:31"
                        }
                      ]
                    },
                    "name": "access_calldata_tail_t_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base_ref",
                        "nodeType": "YulTypedName",
                        "src": "10115:8:31",
                        "type": ""
                      },
                      {
                        "name": "ptr_to_tail",
                        "nodeType": "YulTypedName",
                        "src": "10125:11:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "addr",
                        "nodeType": "YulTypedName",
                        "src": "10141:4:31",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "10147:6:31",
                        "type": ""
                      }
                    ],
                    "src": "10064:580:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10894:959:31",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10904:13:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10914:3:31",
                            "type": "",
                            "value": "256"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "10908:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10926:52:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10936:42:31",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "10930:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10994:9:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "11009:6:31"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "11017:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "11005:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11005:15:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10987:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10987:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10987:34:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11030:23:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "11046:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "11040:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11040:13:31"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "11034:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11073:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11084:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11069:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11069:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "11099:2:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "11093:5:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11093:9:31"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "11104:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "11089:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11089:18:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11062:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11062:46:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11062:46:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11128:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11139:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11124:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11124:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "11158:2:31"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "11162:2:31",
                                            "type": "",
                                            "value": "32"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "11154:3:31"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "11154:11:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "11148:5:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11148:18:31"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "11168:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "11144:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11144:27:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11117:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11117:55:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11117:55:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11181:38:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "11211:2:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11215:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11207:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11207:11:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "11201:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11201:18:31"
                          },
                          "variables": [
                            {
                              "name": "memberValue0",
                              "nodeType": "YulTypedName",
                              "src": "11185:12:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11228:24:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11238:14:31",
                            "type": "",
                            "value": "0xffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "11232:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11272:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11283:2:31",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11268:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11268:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "memberValue0",
                                    "nodeType": "YulIdentifier",
                                    "src": "11292:12:31"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "11306:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "11288:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11288:21:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11261:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11261:49:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11261:49:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11330:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11341:3:31",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11326:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11326:19:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "11361:2:31"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "11365:2:31",
                                            "type": "",
                                            "value": "96"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "11357:3:31"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "11357:11:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "11351:5:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11351:18:31"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "11371:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "11347:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11347:27:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11319:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11319:56:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11319:56:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11395:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11406:3:31",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11391:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11391:19:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value1",
                                            "nodeType": "YulIdentifier",
                                            "src": "11426:6:31"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "11434:2:31",
                                            "type": "",
                                            "value": "32"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "11422:3:31"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "11422:15:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "11416:5:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11416:22:31"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "11440:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "11412:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11412:31:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11384:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11384:60:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11384:60:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11464:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11475:3:31",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11460:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11460:19:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "11491:6:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11499:2:31",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11487:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11487:15:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "11481:5:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11481:22:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11453:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11453:51:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11453:51:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11524:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11535:3:31",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11520:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11520:19:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11541:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11513:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11513:31:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11513:31:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11564:9:31"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11575:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11560:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11560:18:31"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "11580:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11553:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11553:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11553:34:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11596:13:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11606:3:31",
                            "type": "",
                            "value": "288"
                          },
                          "variables": [
                            {
                              "name": "_5",
                              "nodeType": "YulTypedName",
                              "src": "11600:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11635:9:31"
                                  },
                                  {
                                    "name": "_5",
                                    "nodeType": "YulIdentifier",
                                    "src": "11646:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11631:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11631:18:31"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "11651:6:31"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "11659:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "11618:12:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11618:48:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11618:48:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11690:9:31"
                                      },
                                      {
                                        "name": "value3",
                                        "nodeType": "YulIdentifier",
                                        "src": "11701:6:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11686:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11686:22:31"
                                  },
                                  {
                                    "name": "_5",
                                    "nodeType": "YulIdentifier",
                                    "src": "11710:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11682:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11682:31:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11715:1:31",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11675:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11675:42:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11675:42:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11726:121:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11742:9:31"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value3",
                                            "nodeType": "YulIdentifier",
                                            "src": "11761:6:31"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "11769:2:31",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "11757:3:31"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "11757:15:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11774:66:31",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "11753:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11753:88:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11738:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11738:104:31"
                              },
                              {
                                "name": "_5",
                                "nodeType": "YulIdentifier",
                                "src": "11844:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11734:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11734:113:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11726:4:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_struct$_PermitSingle_$4162_memory_ptr_t_bytes_calldata_ptr__to_t_address_t_struct$_PermitSingle_$4162_memory_ptr_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10839:9:31",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "10850:6:31",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "10858:6:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10866:6:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10874:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10885:4:31",
                        "type": ""
                      }
                    ],
                    "src": "10649:1204:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11987:119:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11997:26:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12009:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12020:2:31",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12005:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12005:18:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11997:4:31"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12039:9:31"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "12050:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12032:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12032:25:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12032:25:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12077:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12088:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12073:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12073:18:31"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "12093:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12066:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12066:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12066:34:31"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11948:9:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "11959:6:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11967:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11978:4:31",
                        "type": ""
                      }
                    ],
                    "src": "11858:248:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12240:168:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12250:26:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12262:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12273:2:31",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12258:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12258:18:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12250:4:31"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12292:9:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "12307:6:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12315:42:31",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12303:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12303:55:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12285:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12285:74:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12285:74:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12379:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12390:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12375:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12375:18:31"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "12395:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12368:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12368:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12368:34:31"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12201:9:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "12212:6:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12220:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12231:4:31",
                        "type": ""
                      }
                    ],
                    "src": "12111:297:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12460:148:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12551:22:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "12553:16:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12553:18:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12553:18:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "12476:5:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12483:66:31",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "12473:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12473:77:31"
                          },
                          "nodeType": "YulIf",
                          "src": "12470:103:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12582:20:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "12593:5:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12600:1:31",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12589:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12589:13:31"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "12582:3:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "12442:5:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "12452:3:31",
                        "type": ""
                      }
                    ],
                    "src": "12413:195:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12661:123:31",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12671:16:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12681:6:31",
                            "type": "",
                            "value": "0xffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "12675:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12696:35:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "12712:1:31"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12715:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12708:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12708:10:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "12724:1:31"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12727:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12720:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12720:10:31"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "12704:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12704:27:31"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "12696:4:31"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12756:22:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "12758:16:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12758:18:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12758:18:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "12746:4:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "12752:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12743:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12743:12:31"
                          },
                          "nodeType": "YulIf",
                          "src": "12740:38:31"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint16",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "12643:1:31",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "12646:1:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "12652:4:31",
                        "type": ""
                      }
                    ],
                    "src": "12613:171:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12841:116:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12851:20:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "12866:1:31"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "12869:1:31"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "12862:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12862:9:31"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "12851:7:31"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12929:22:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "12931:16:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12931:18:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12931:18:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "12900:1:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "12893:6:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12893:9:31"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "12907:1:31"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "product",
                                            "nodeType": "YulIdentifier",
                                            "src": "12914:7:31"
                                          },
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "12923:1:31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nodeType": "YulIdentifier",
                                          "src": "12910:3:31"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12910:15:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "12904:2:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12904:22:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nodeType": "YulIdentifier",
                                  "src": "12890:2:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12890:37:31"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "12883:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12883:45:31"
                          },
                          "nodeType": "YulIf",
                          "src": "12880:71:31"
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "12820:1:31",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "12823:1:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "12829:7:31",
                        "type": ""
                      }
                    ],
                    "src": "12789:168:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12994:152:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13011:1:31",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13014:77:31",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13004:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13004:88:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13004:88:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13108:1:31",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13111:4:31",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13101:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13101:15:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13101:15:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13132:1:31",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13135:4:31",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "13125:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13125:15:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13125:15:31"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "12962:184:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13197:228:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13228:168:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13249:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13252:77:31",
                                      "type": "",
                                      "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13242:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13242:88:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13242:88:31"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13350:1:31",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13353:4:31",
                                      "type": "",
                                      "value": "0x12"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13343:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13343:15:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13343:15:31"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13378:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13381:4:31",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13371:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13371:15:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13371:15:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "13217:1:31"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "13210:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13210:9:31"
                          },
                          "nodeType": "YulIf",
                          "src": "13207:189:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13405:14:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "13414:1:31"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "13417:1:31"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "13410:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13410:9:31"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "13405:1:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "13182:1:31",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "13185:1:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "13191:1:31",
                        "type": ""
                      }
                    ],
                    "src": "13151:274:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13531:76:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13541:26:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13553:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13564:2:31",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13549:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13549:18:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13541:4:31"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13583:9:31"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "13594:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13576:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13576:25:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13576:25:31"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13500:9:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13511:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13522:4:31",
                        "type": ""
                      }
                    ],
                    "src": "13430:177:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13690:199:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13736:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13745:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13748:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13738:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13738:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13738:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "13711:7:31"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13720:9:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "13707:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13707:23:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13732:2:31",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "13703:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13703:32:31"
                          },
                          "nodeType": "YulIf",
                          "src": "13700:52:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13761:29:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13780:9:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "13774:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13774:16:31"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "13765:5:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13843:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13852:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13855:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13845:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13845:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13845:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13812:5:31"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "13833:5:31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "13826:6:31"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13826:13:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "13819:6:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13819:21:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "13809:2:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13809:32:31"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "13802:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13802:40:31"
                          },
                          "nodeType": "YulIf",
                          "src": "13799:60:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13868:15:31",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "13878:5:31"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "13868:6:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13656:9:31",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "13667:7:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13679:6:31",
                        "type": ""
                      }
                    ],
                    "src": "13612:277:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14068:232:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14085:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14096:2:31",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14078:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14078:21:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14078:21:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14119:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14130:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14115:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14115:18:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14135:2:31",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14108:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14108:30:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14108:30:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14158:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14169:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14154:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14154:18:31"
                              },
                              {
                                "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14174:34:31",
                                "type": "",
                                "value": "SafeERC20: ERC20 operation did n"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14147:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14147:62:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14147:62:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14229:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14240:2:31",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14225:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14225:18:31"
                              },
                              {
                                "hexValue": "6f742073756363656564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14245:12:31",
                                "type": "",
                                "value": "ot succeed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14218:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14218:40:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14218:40:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14267:27:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14279:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14290:3:31",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14275:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14275:19:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14267:4:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14045:9:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14059:4:31",
                        "type": ""
                      }
                    ],
                    "src": "13894:406:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14490:303:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14500:27:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14512:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14523:3:31",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14508:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14508:19:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14500:4:31"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14536:52:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14546:42:31",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "14540:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14604:9:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "14619:6:31"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14627:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14615:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14615:15:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14597:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14597:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14597:34:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14651:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14662:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14647:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14647:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14671:6:31"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14679:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14667:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14667:15:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14640:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14640:43:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14640:43:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14703:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14714:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14699:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14699:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "14723:6:31"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14731:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14719:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14719:15:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14692:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14692:43:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14692:43:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14755:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14766:2:31",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14751:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14751:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "14775:6:31"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14783:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14771:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14771:15:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14744:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14744:43:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14744:43:31"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint160_t_address__to_t_address_t_address_t_uint160_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14435:9:31",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "14446:6:31",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "14454:6:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "14462:6:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14470:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14481:4:31",
                        "type": ""
                      }
                    ],
                    "src": "14305:488:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14858:128:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14868:22:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "14883:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "14877:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14877:13:31"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "14868:5:31"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14964:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14973:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14976:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14966:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14966:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14966:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "14912:5:31"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "14923:5:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14930:30:31",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "14919:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14919:42:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "14909:2:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14909:53:31"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "14902:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14902:61:31"
                          },
                          "nodeType": "YulIf",
                          "src": "14899:81:31"
                        }
                      ]
                    },
                    "name": "abi_decode_uint112_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "14837:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "14848:5:31",
                        "type": ""
                      }
                    ],
                    "src": "14798:188:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15105:336:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15151:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15160:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15163:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15153:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15153:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15153:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "15126:7:31"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15135:9:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "15122:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15122:23:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15147:2:31",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "15118:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15118:32:31"
                          },
                          "nodeType": "YulIf",
                          "src": "15115:52:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15176:50:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15216:9:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint112_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "15186:29:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15186:40:31"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "15176:6:31"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15235:59:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15279:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15290:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15275:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15275:18:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint112_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "15245:29:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15245:49:31"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "15235:6:31"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15303:38:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15326:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15337:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15322:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15322:18:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "15316:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15316:25:31"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "15307:5:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15395:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15404:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15407:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15397:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15397:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15397:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "15363:5:31"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "15374:5:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15381:10:31",
                                        "type": "",
                                        "value": "0xffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "15370:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15370:22:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "15360:2:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15360:33:31"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "15353:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15353:41:31"
                          },
                          "nodeType": "YulIf",
                          "src": "15350:61:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15420:15:31",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "15430:5:31"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "15420:6:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15055:9:31",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "15066:7:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15078:6:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "15086:6:31",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "15094:6:31",
                        "type": ""
                      }
                    ],
                    "src": "14991:450:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15547:125:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "15557:26:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15569:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15580:2:31",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15565:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15565:18:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15557:4:31"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15599:9:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "15614:6:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15622:42:31",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "15610:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15610:55:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15592:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15592:74:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15592:74:31"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15516:9:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15527:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15538:4:31",
                        "type": ""
                      }
                    ],
                    "src": "15446:226:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15758:103:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15804:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15813:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15816:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15806:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15806:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15806:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "15779:7:31"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15788:9:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "15775:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15775:23:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15800:2:31",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "15771:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15771:32:31"
                          },
                          "nodeType": "YulIf",
                          "src": "15768:52:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15829:26:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15845:9:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "15839:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15839:16:31"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "15829:6:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15724:9:31",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "15735:7:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15747:6:31",
                        "type": ""
                      }
                    ],
                    "src": "15677:184:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16123:291:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16140:9:31"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "16151:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16133:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16133:25:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16133:25:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16178:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16189:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16174:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16174:18:31"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "16194:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16167:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16167:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16167:34:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16221:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16232:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16217:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16217:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "16241:6:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16249:42:31",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "16237:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16237:55:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16210:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16210:83:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16210:83:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16313:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16324:2:31",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16309:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16309:18:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16329:3:31",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16302:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16302:31:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16302:31:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16353:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16364:3:31",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16349:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16349:19:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16370:1:31",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16342:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16342:30:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16342:30:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16381:27:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16393:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16404:3:31",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16389:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16389:19:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16381:4:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_address_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_uint256_t_uint256_t_address_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16076:9:31",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "16087:6:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "16095:6:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "16103:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16114:4:31",
                        "type": ""
                      }
                    ],
                    "src": "15866:548:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16467:77:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16477:16:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16488:1:31"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "16491:1:31"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16484:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16484:9:31"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "16477:3:31"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16516:22:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "16518:16:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16518:18:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16518:18:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16508:1:31"
                              },
                              {
                                "name": "sum",
                                "nodeType": "YulIdentifier",
                                "src": "16511:3:31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "16505:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16505:10:31"
                          },
                          "nodeType": "YulIf",
                          "src": "16502:36:31"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "16450:1:31",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "16453:1:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "16459:3:31",
                        "type": ""
                      }
                    ],
                    "src": "16419:125:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16581:152:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16598:1:31",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16601:77:31",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16591:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16591:88:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16591:88:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16695:1:31",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16698:4:31",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16688:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16688:15:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16688:15:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16719:1:31",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16722:4:31",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "16712:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16712:15:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16712:15:31"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "16549:184:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17015:381:31",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17025:52:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17035:42:31",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "17029:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17093:9:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "17108:6:31"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "17116:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "17104:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17104:15:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17086:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17086:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17086:34:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17140:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17151:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17136:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17136:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "17170:6:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "17163:6:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17163:14:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "17156:6:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17156:22:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17129:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17129:50:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17129:50:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17199:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17210:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17195:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17195:18:31"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "17215:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17188:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17188:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17188:34:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17242:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17253:2:31",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17238:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17238:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "17262:6:31"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "17270:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "17258:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17258:15:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17231:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17231:43:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17231:43:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17294:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17305:3:31",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17290:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17290:19:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17311:3:31",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17283:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17283:32:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17283:32:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17335:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17346:3:31",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17331:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17331:19:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17352:1:31",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17324:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17324:30:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17324:30:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17363:27:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17375:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17386:3:31",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17371:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17371:19:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17363:4:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_bool_t_int256_t_uint160_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16960:9:31",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "16971:6:31",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "16979:6:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "16987:6:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "16995:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17006:4:31",
                        "type": ""
                      }
                    ],
                    "src": "16738:658:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17497:147:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17543:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17552:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17555:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "17545:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17545:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17545:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "17518:7:31"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17527:9:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "17514:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17514:23:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17539:2:31",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "17510:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17510:32:31"
                          },
                          "nodeType": "YulIf",
                          "src": "17507:52:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17568:26:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17584:9:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "17578:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17578:16:31"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "17568:6:31"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17603:35:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17623:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17634:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17619:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17619:18:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "17613:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17613:25:31"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "17603:6:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_int256t_int256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17455:9:31",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "17466:7:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17478:6:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "17486:6:31",
                        "type": ""
                      }
                    ],
                    "src": "17401:243:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17692:148:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17783:22:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "17785:16:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17785:18:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17785:18:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "17708:5:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17715:66:31",
                                "type": "",
                                "value": "0x8000000000000000000000000000000000000000000000000000000000000000"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "17705:2:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17705:77:31"
                          },
                          "nodeType": "YulIf",
                          "src": "17702:103:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17814:20:31",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17825:1:31",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "17828:5:31"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "17821:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17821:13:31"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "17814:3:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "negate_t_int256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "17674:5:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "17684:3:31",
                        "type": ""
                      }
                    ],
                    "src": "17649:191:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17994:106:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18011:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18022:2:31",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18004:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18004:21:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18004:21:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18034:60:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "18067:6:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18079:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18090:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18075:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18075:18:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_struct_Params",
                              "nodeType": "YulIdentifier",
                              "src": "18042:24:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18042:52:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18034:4:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_Params_$4065_memory_ptr__to_t_struct$_Params_$4065_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17963:9:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17974:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17985:4:31",
                        "type": ""
                      }
                    ],
                    "src": "17845:255:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18186:170:31",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18232:16:31",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18241:1:31",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18244:1:31",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18234:6:31"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18234:12:31"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18234:12:31"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "18207:7:31"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18216:9:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "18203:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18203:23:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18228:2:31",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "18199:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18199:32:31"
                          },
                          "nodeType": "YulIf",
                          "src": "18196:52:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18257:29:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18276:9:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "18270:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18270:16:31"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "18261:5:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "18320:5:31"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "18295:24:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18295:31:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18295:31:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18335:15:31",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "18345:5:31"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "18335:6:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18152:9:31",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "18163:7:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18175:6:31",
                        "type": ""
                      }
                    ],
                    "src": "18105:251:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18480:145:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "18497:3:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18510:2:31",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "18514:6:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "18506:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18506:15:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18523:66:31",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "18502:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18502:88:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18490:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18490:101:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18490:101:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18600:19:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "18611:3:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18616:2:31",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18607:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18607:12:31"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "18600:3:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "18456:3:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18461:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "18472:3:31",
                        "type": ""
                      }
                    ],
                    "src": "18361:264:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19055:872:31",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19065:13:31",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19075:3:31",
                            "type": "",
                            "value": "288"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "19069:2:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19094:9:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "19109:6:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19117:6:31",
                                    "type": "",
                                    "value": "0xffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19105:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19105:19:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19087:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19087:38:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19087:38:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19145:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19156:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19141:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19141:18:31"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "19161:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19134:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19134:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19134:34:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19188:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19199:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19184:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19184:18:31"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "19204:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19177:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19177:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19177:34:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19231:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19242:2:31",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19227:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19227:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "19251:6:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19259:42:31",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19247:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19247:55:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19220:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19220:83:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19220:83:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19323:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19334:3:31",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19319:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19319:19:31"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "19340:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19312:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19312:35:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19312:35:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19367:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19378:3:31",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19363:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19363:19:31"
                              },
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "19384:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19356:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19356:35:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19356:35:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19411:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19422:3:31",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19407:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19407:19:31"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "19428:2:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19400:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19400:31:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19400:31:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19451:9:31"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "19462:2:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19447:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19447:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value6",
                                    "nodeType": "YulIdentifier",
                                    "src": "19473:6:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "19467:5:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19467:13:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19440:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19440:41:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19440:41:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19501:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19512:3:31",
                                    "type": "",
                                    "value": "320"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19497:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19497:19:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value6",
                                        "nodeType": "YulIdentifier",
                                        "src": "19528:6:31"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19536:2:31",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "19524:3:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19524:15:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "19518:5:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19518:22:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19490:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19490:51:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19490:51:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19550:42:31",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value6",
                                    "nodeType": "YulIdentifier",
                                    "src": "19580:6:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19588:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19576:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19576:15:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "19570:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19570:22:31"
                          },
                          "variables": [
                            {
                              "name": "memberValue0",
                              "nodeType": "YulTypedName",
                              "src": "19554:12:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19612:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19623:3:31",
                                    "type": "",
                                    "value": "352"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19608:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19608:19:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19629:2:31",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19601:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19601:31:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19601:31:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19641:62:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "memberValue0",
                                "nodeType": "YulIdentifier",
                                "src": "19669:12:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19687:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19698:3:31",
                                    "type": "",
                                    "value": "384"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19683:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19683:19:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "19652:16:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19652:51:31"
                          },
                          "variables": [
                            {
                              "name": "end",
                              "nodeType": "YulTypedName",
                              "src": "19645:3:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19723:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19734:3:31",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19719:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19719:19:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "19744:3:31"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19749:9:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "19740:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19740:19:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19712:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19712:48:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19712:48:31"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19769:43:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "value7",
                                "nodeType": "YulIdentifier",
                                "src": "19800:6:31"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "19808:3:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "19783:16:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19783:29:31"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "19773:6:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19832:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19843:3:31",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19828:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19828:19:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "19853:6:31"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19861:9:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "19849:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19849:22:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19821:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19821:51:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19821:51:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19881:40:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "value8",
                                "nodeType": "YulIdentifier",
                                "src": "19906:6:31"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "19914:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "19889:16:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19889:32:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19881:4:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint16_t_uint256_t_uint256_t_address_payable_t_uint256_t_uint256_t_struct$_lzTxObj_$4651_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_uint16_t_uint256_t_uint256_t_address_payable_t_uint256_t_uint256_t_struct$_lzTxObj_$4651_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18960:9:31",
                        "type": ""
                      },
                      {
                        "name": "value8",
                        "nodeType": "YulTypedName",
                        "src": "18971:6:31",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "18979:6:31",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "18987:6:31",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "18995:6:31",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "19003:6:31",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "19011:6:31",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "19019:6:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "19027:6:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19035:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19046:4:31",
                        "type": ""
                      }
                    ],
                    "src": "18630:1297:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20067:179:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20077:26:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20089:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20100:2:31",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20085:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20085:18:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20077:4:31"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20119:9:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "20134:6:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20142:42:31",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20130:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20130:55:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20112:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20112:74:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20112:74:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20206:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20217:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20202:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20202:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20226:6:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20234:4:31",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20222:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20222:17:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20195:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20195:45:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20195:45:31"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_rational_0_by_1__to_t_address_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20028:9:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20039:6:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20047:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20058:4:31",
                        "type": ""
                      }
                    ],
                    "src": "19932:314:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20432:238:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20442:27:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20454:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20465:3:31",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20450:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20450:19:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20442:4:31"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20485:9:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20507:2:31",
                                    "type": "",
                                    "value": "15"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "20511:6:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "signextend",
                                  "nodeType": "YulIdentifier",
                                  "src": "20496:10:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20496:22:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20478:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20478:41:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20478:41:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20539:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20550:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20535:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20535:18:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20566:2:31",
                                    "type": "",
                                    "value": "15"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20570:6:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "signextend",
                                  "nodeType": "YulIdentifier",
                                  "src": "20555:10:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20555:22:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20528:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20528:50:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20528:50:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20598:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20609:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20594:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20594:18:31"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "20614:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20587:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20587:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20587:34:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20641:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20652:2:31",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20637:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20637:18:31"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "20657:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20630:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20630:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20630:34:31"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_int128_t_int128_t_uint256_t_uint256__to_t_int128_t_int128_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20377:9:31",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "20388:6:31",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "20396:6:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20404:6:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20412:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20423:4:31",
                        "type": ""
                      }
                    ],
                    "src": "20251:419:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20860:206:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20870:27:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20882:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20893:3:31",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20878:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20878:19:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20870:4:31"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20913:9:31"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "20924:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20906:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20906:25:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20906:25:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20951:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20962:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20947:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20947:18:31"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "20967:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20940:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20940:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20940:34:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20994:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21005:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20990:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20990:18:31"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "21010:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20983:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20983:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20983:34:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21037:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21048:2:31",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21033:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21033:18:31"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "21053:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21026:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21026:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21026:34:31"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20805:9:31",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "20816:6:31",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "20824:6:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20832:6:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20840:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20851:4:31",
                        "type": ""
                      }
                    ],
                    "src": "20675:391:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21278:266:31",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "21288:27:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21300:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21311:3:31",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21296:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21296:19:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21288:4:31"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21331:9:31"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "21342:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21324:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21324:25:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21324:25:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21369:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21380:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21365:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21365:18:31"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "21385:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21358:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21358:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21358:34:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21412:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21423:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21408:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21408:18:31"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "21428:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21401:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21401:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21401:34:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21455:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21466:2:31",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21451:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21451:18:31"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "21471:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21444:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21444:34:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21444:34:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21498:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21509:3:31",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21494:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21494:19:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value4",
                                        "nodeType": "YulIdentifier",
                                        "src": "21529:6:31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "21522:6:31"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21522:14:31"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "21515:6:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21515:22:31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21487:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21487:51:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21487:51:31"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21215:9:31",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "21226:6:31",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "21234:6:31",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "21242:6:31",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "21250:6:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21258:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21269:4:31",
                        "type": ""
                      }
                    ],
                    "src": "21071:473:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21723:228:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21740:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21751:2:31",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21733:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21733:21:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21733:21:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21774:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21785:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21770:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21770:18:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21790:2:31",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21763:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21763:30:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21763:30:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21813:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21824:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21809:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21809:18:31"
                              },
                              {
                                "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21829:34:31",
                                "type": "",
                                "value": "Address: insufficient balance fo"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21802:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21802:62:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21802:62:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21884:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21895:2:31",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21880:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21880:18:31"
                              },
                              {
                                "hexValue": "722063616c6c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21900:8:31",
                                "type": "",
                                "value": "r call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21873:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21873:36:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21873:36:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21918:27:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21930:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21941:3:31",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21926:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21926:19:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21918:4:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21700:9:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21714:4:31",
                        "type": ""
                      }
                    ],
                    "src": "21549:402:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22093:150:31",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22103:27:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22123:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "22117:5:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22117:13:31"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "22107:6:31",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "22178:6:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22186:4:31",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22174:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22174:17:31"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "22193:3:31"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "22198:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "22139:34:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22139:66:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22139:66:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22214:23:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "22225:3:31"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "22230:6:31"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22221:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22221:16:31"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "22214:3:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "22069:3:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22074:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "22085:3:31",
                        "type": ""
                      }
                    ],
                    "src": "21956:287:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22422:179:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22439:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22450:2:31",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22432:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22432:21:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22432:21:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22473:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22484:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22469:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22469:18:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22489:2:31",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22462:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22462:30:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22462:30:31"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22512:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22523:2:31",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22508:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22508:18:31"
                              },
                              {
                                "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "22528:31:31",
                                "type": "",
                                "value": "Address: call to non-contract"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22501:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22501:59:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22501:59:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22569:26:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22581:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22592:2:31",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22577:3:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22577:18:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22569:4:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22399:9:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22413:4:31",
                        "type": ""
                      }
                    ],
                    "src": "22248:353:31"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22727:98:31",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22744:9:31"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22755:2:31",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22737:6:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22737:21:31"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22737:21:31"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22767:52:31",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22792:6:31"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22804:9:31"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22815:2:31",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22800:3:31"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22800:18:31"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "22775:16:31"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22775:44:31"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22767:4:31"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22696:9:31",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22707:6:31",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22718:4:31",
                        "type": ""
                      }
                    ],
                    "src": "22606:219:31"
                  }
                ]
              },
              "contents": "{\n    { }\n    function validator_revert_uint16(value)\n    {\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_uint16(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_uint16(value)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_2449() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x0140)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0x20)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_tuple_t_uint16t_bytes_memory_ptrt_uint256t_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_uint16(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        value2 := calldataload(add(headStart, 64))\n        let value_1 := calldataload(add(headStart, 96))\n        validator_revert_address(value_1)\n        value3 := value_1\n        value4 := calldataload(add(headStart, 128))\n        let offset_1 := calldataload(add(headStart, 160))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value5 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n    }\n    function validator_revert_uint48(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_uint48(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_uint48(value)\n    }\n    function abi_decode_struct_PermitParams_calldata(offset, end) -> value\n    {\n        if slt(sub(end, offset), 64) { revert(0, 0) }\n        value := offset\n    }\n    function abi_decode_tuple_t_struct$_Params_$4065_memory_ptrt_struct$_PermitParams_$5476_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x0140) { revert(0, 0) }\n        let value := allocate_memory_2449()\n        mstore(value, abi_decode_address(_2))\n        mstore(add(value, 32), abi_decode_uint16(add(_2, 32)))\n        mstore(add(value, 64), abi_decode_uint16(add(_2, 64)))\n        mstore(add(value, 96), abi_decode_address(add(_2, 96)))\n        mstore(add(value, 128), abi_decode_address(add(_2, 128)))\n        mstore(add(value, 160), abi_decode_address(add(_2, 160)))\n        mstore(add(value, 192), calldataload(add(_2, 192)))\n        mstore(add(value, 224), calldataload(add(_2, 224)))\n        let _3 := 256\n        mstore(add(value, _3), abi_decode_uint48(add(_2, _3)))\n        let _4 := 288\n        let offset_1 := calldataload(add(_2, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(add(value, _4), abi_decode_bytes(add(_2, offset_1), dataEnd))\n        value0 := value\n        let offset_2 := calldataload(add(headStart, 32))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value1 := abi_decode_struct_PermitParams_calldata(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_uint16_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_uint16(value)\n    }\n    function abi_decode_uint48_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_uint48(value)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_decode_bytes_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(array_1, 0x20), _1)\n        array := array_1\n    }\n    function abi_decode_tuple_t_struct$_Params_$4065_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x0140) { revert(0, 0) }\n        let value := allocate_memory_2449()\n        mstore(value, abi_decode_address_fromMemory(_2))\n        mstore(add(value, 32), abi_decode_uint16_fromMemory(add(_2, 32)))\n        mstore(add(value, 64), abi_decode_uint16_fromMemory(add(_2, 64)))\n        mstore(add(value, 96), abi_decode_address_fromMemory(add(_2, 96)))\n        mstore(add(value, 128), abi_decode_address_fromMemory(add(_2, 128)))\n        mstore(add(value, 160), abi_decode_address_fromMemory(add(_2, 160)))\n        mstore(add(value, 192), mload(add(_2, 192)))\n        mstore(add(value, 224), mload(add(_2, 224)))\n        let _3 := 256\n        mstore(add(value, _3), abi_decode_uint48_fromMemory(add(_2, _3)))\n        let _4 := 288\n        let offset_1 := mload(add(_2, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(add(value, _4), abi_decode_bytes_fromMemory(add(_2, offset_1), dataEnd))\n        value0 := value\n    }\n    function abi_encode_address(value, pos)\n    {\n        mstore(pos, and(value, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_uint16(value, pos)\n    {\n        mstore(pos, and(value, 0xffff))\n    }\n    function abi_encode_uint48(value, pos)\n    {\n        mstore(pos, and(value, 0xffffffffffff))\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_struct_Params(value, pos) -> end\n    {\n        let _1 := 0x0140\n        abi_encode_address(mload(value), pos)\n        let memberValue0 := mload(add(value, 0x20))\n        abi_encode_uint16(memberValue0, add(pos, 0x20))\n        let memberValue0_1 := mload(add(value, 0x40))\n        abi_encode_uint16(memberValue0_1, add(pos, 0x40))\n        let memberValue0_2 := mload(add(value, 0x60))\n        abi_encode_address(memberValue0_2, add(pos, 0x60))\n        let memberValue0_3 := mload(add(value, 0x80))\n        abi_encode_address(memberValue0_3, add(pos, 0x80))\n        let memberValue0_4 := mload(add(value, 0xa0))\n        abi_encode_address(memberValue0_4, add(pos, 0xa0))\n        mstore(add(pos, 0xc0), mload(add(value, 0xc0)))\n        mstore(add(pos, 0xe0), mload(add(value, 0xe0)))\n        let _2 := 0x0100\n        let memberValue0_5 := mload(add(value, _2))\n        abi_encode_uint48(memberValue0_5, add(pos, _2))\n        let _3 := 0x0120\n        let memberValue0_6 := mload(add(value, _3))\n        mstore(add(pos, _3), _1)\n        end := abi_encode_bytes(memberValue0_6, add(pos, _1))\n    }\n    function abi_encode_tuple_t_struct$_Params_$4065_memory_ptr_t_struct$_PermitParams_$5476_memory_ptr__to_t_struct$_Params_$4065_memory_ptr_t_struct$_PermitParams_$5476_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_struct_Params(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, mload(value1))\n        let memberValue0 := mload(add(value1, 32))\n        mstore(add(tail_1, 32), 64)\n        tail := abi_encode_bytes(memberValue0, add(tail_1, 64))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_tuple_t_address_t_struct$_PermitSingle_$4162_memory_ptr_t_bytes_calldata_ptr__to_t_address_t_struct$_PermitSingle_$4162_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 256\n        let _2 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _2))\n        let _3 := mload(value1)\n        mstore(add(headStart, 32), and(mload(_3), _2))\n        mstore(add(headStart, 64), and(mload(add(_3, 32)), _2))\n        let memberValue0 := mload(add(_3, 64))\n        let _4 := 0xffffffffffff\n        mstore(add(headStart, 96), and(memberValue0, _4))\n        mstore(add(headStart, 128), and(mload(add(_3, 96)), _4))\n        mstore(add(headStart, 160), and(mload(add(value1, 32)), _2))\n        mstore(add(headStart, 192), mload(add(value1, 64)))\n        mstore(add(headStart, 224), _1)\n        mstore(add(headStart, _1), value3)\n        let _5 := 288\n        calldatacopy(add(headStart, _5), value2, value3)\n        mstore(add(add(headStart, value3), _5), 0)\n        tail := add(add(headStart, and(add(value3, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), _5)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function checked_sub_t_uint16(x, y) -> diff\n    {\n        let _1 := 0xffff\n        diff := sub(and(x, _1), and(y, _1))\n        if gt(diff, _1) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint160_t_address__to_t_address_t_address_t_uint160_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), and(value3, _1))\n    }\n    function abi_decode_uint112_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_uint112_fromMemory(headStart)\n        value1 := abi_decode_uint112_fromMemory(add(headStart, 32))\n        let value := mload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n        value2 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_address_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_uint256_t_uint256_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), 0)\n        tail := add(headStart, 160)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_bool_t_int256_t_uint160_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), 160)\n        mstore(add(headStart, 160), 0)\n        tail := add(headStart, 192)\n    }\n    function abi_decode_tuple_t_int256t_int256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function negate_t_int256(value) -> ret\n    {\n        if eq(value, 0x8000000000000000000000000000000000000000000000000000000000000000) { panic_error_0x11() }\n        ret := sub(0, value)\n    }\n    function abi_encode_tuple_t_struct$_Params_$4065_memory_ptr__to_t_struct$_Params_$4065_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_struct_Params(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        end := add(pos, 20)\n    }\n    function abi_encode_tuple_t_uint16_t_uint256_t_uint256_t_address_payable_t_uint256_t_uint256_t_struct$_lzTxObj_$4651_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_uint16_t_uint256_t_uint256_t_address_payable_t_uint256_t_uint256_t_struct$_lzTxObj_$4651_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 288\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), _1)\n        mstore(add(headStart, _1), mload(value6))\n        mstore(add(headStart, 320), mload(add(value6, 32)))\n        let memberValue0 := mload(add(value6, 64))\n        mstore(add(headStart, 352), 96)\n        let end := abi_encode_bytes(memberValue0, add(headStart, 384))\n        mstore(add(headStart, 224), sub(end, headStart))\n        let tail_1 := abi_encode_bytes(value7, end)\n        mstore(add(headStart, 256), sub(tail_1, headStart))\n        tail := abi_encode_bytes(value8, tail_1)\n    }\n    function abi_encode_tuple_t_address_t_rational_0_by_1__to_t_address_t_uint8__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xff))\n    }\n    function abi_encode_tuple_t_int128_t_int128_t_uint256_t_uint256__to_t_int128_t_int128_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, signextend(15, value0))\n        mstore(add(headStart, 32), signextend(15, value1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), iszero(iszero(value4)))\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n}",
              "id": 31,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x29 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAB8236F3 EQ PUSH2 0x2E JUMPI DUP1 PUSH4 0xDC7B39DB EQ PUSH2 0x50 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A1E JUMP JUMPDEST PUSH2 0x63 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4E PUSH2 0x5E CALLDATASIZE PUSH1 0x4 PUSH2 0x4AF2 JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E10 PUSH1 0x2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xD6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCEBF3F7700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x14 DUP6 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ADDRESS EQ PUSH2 0x12A JUMPI PUSH1 0x40 MLOAD PUSH32 0xA9D0D13300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x140 SWAP2 SWAP1 PUSH2 0x4C9F JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x167 JUMPI PUSH1 0x0 SWAP5 POP JUMPDEST ADDRESS PUSH4 0xDC7B39DB PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND ISZERO PUSH2 0x190 JUMPI PUSH1 0x0 PUSH2 0x192 JUMP JUMPDEST DUP6 JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0xE0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH2 0x100 ADD MLOAD PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH2 0x120 ADD MLOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A4 SWAP3 SWAP2 SWAP1 PUSH2 0x4EFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2CF JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x365 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x33E JUMPI DUP1 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP6 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x338 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x365 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x365 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 DUP7 PUSH2 0x981 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x100 ADD MLOAD PUSH6 0xFFFFFFFFFFFF AND TIMESTAMP GT ISZERO PUSH2 0x3B6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1AB7DA6B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP6 ADD MLOAD PUSH2 0xFFFF SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP7 ADD DUP1 MLOAD DUP4 AND PUSH1 0xC0 DUP1 DUP8 ADD SWAP2 DUP3 MSTORE PUSH1 0x60 DUP1 DUP11 ADD MLOAD DUP8 AND SWAP5 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x80 DUP1 DUP11 ADD DUP1 MLOAD DUP9 AND SWAP6 DUP10 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP1 DUP10 ADD DUP1 MLOAD SWAP2 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP1 DUP11 ADD MLOAD PUSH1 0xA0 DUP10 ADD MSTORE SWAP3 MLOAD SWAP1 SWAP5 AND SWAP1 MSTORE PUSH2 0x100 DUP1 DUP9 ADD MLOAD PUSH6 0xFFFFFFFFFFFF AND SWAP2 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD DUP3 AND PUSH2 0x140 DUP5 ADD MSTORE MLOAD AND PUSH2 0x52A JUMPI DUP3 PUSH1 0xC0 ADD MLOAD CALLVALUE LT ISZERO PUSH2 0x509 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1985C73500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x518 SWAP1 CALLVALUE PUSH2 0x4F63 JUMP JUMPDEST PUSH2 0x180 DUP3 ADD MSTORE ADDRESS PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x6BD JUMP JUMPDEST CALLER PUSH2 0x120 DUP3 ADD MSTORE CALLVALUE PUSH2 0x180 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x547 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x4F76 JUMP JUMPDEST SWAP1 POP GT ISZERO PUSH2 0x6BD JUMPI PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E10 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2B67B570 CALLER PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0xC0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH2 0x100 ADD MLOAD PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD CALLDATALOAD PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH2 0x100 ADD MLOAD PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE POP DUP6 DUP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x66B SWAP2 SWAP1 PUSH2 0x4F76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x68A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4FE2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x0 PUSH2 0x6E2 DUP5 PUSH2 0x120 ADD MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE DUP2 DUP2 MSTORE DUP2 MLOAD SWAP1 SWAP2 ADD PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x6EE DUP2 DUP4 PUSH2 0xA5A JUMP JUMPDEST PUSH2 0x100 DUP2 ADD MLOAD PUSH2 0x140 DUP3 ADD MLOAD PUSH1 0xA0 DUP8 ADD MLOAD SWAP3 SWAP5 POP SWAP1 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND SWAP2 AND EQ PUSH2 0x755 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAE39073000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x767 DUP7 PUSH1 0xE0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0xC37 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x42301C2300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH2 0x160 ADD MLOAD PUSH1 0x1 SUB PUSH2 0x7B5 JUMPI POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7D6 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0xFFFF AND DUP10 PUSH1 0xE0 ADD MLOAD DUP7 PUSH2 0xC65 JUMP JUMPDEST SWAP2 POP DUP2 PUSH1 0x0 SUB PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH32 0x42301C2300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x87D JUMPI DUP6 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x877 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x8A4 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x8A4 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP5 PUSH2 0x981 JUMP JUMPDEST PUSH2 0x180 DUP5 ADD MLOAD ISZERO PUSH2 0x8E2 JUMPI PUSH2 0x180 DUP5 ADD MLOAD PUSH1 0x40 MLOAD CALLER SWAP2 DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x8E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST DUP6 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1D81B4318B379C644B5546AE9CF37D861A5C7547BF3DAE6CFAECFFA12F8748F3 DUP10 PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0x40 MLOAD PUSH2 0x971 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xA55 SWAP1 DUP5 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xD1E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 PUSH2 0xAD5 DUP5 DUP1 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC2B JUMPI PUSH1 0x0 PUSH2 0xAF7 DUP7 DUP1 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x1 DUP2 SUB PUSH2 0xB14 JUMPI PUSH2 0xB0D DUP6 PUSH2 0xE2D JUMP JUMPDEST SWAP5 POP PUSH2 0xC18 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0xB25 JUMPI PUSH2 0xB0D DUP6 PUSH2 0xFF5 JUMP JUMPDEST PUSH1 0x3 DUP2 SUB PUSH2 0xB37 JUMPI PUSH2 0xB0D DUP7 DUP7 PUSH2 0x1254 JUMP JUMPDEST PUSH1 0x4 DUP2 SUB PUSH2 0xB49 JUMPI PUSH2 0xB0D DUP7 DUP7 PUSH2 0x1832 JUMP JUMPDEST PUSH1 0x5 DUP2 SUB PUSH2 0xB5B JUMPI PUSH2 0xB0D DUP7 DUP7 PUSH2 0x1BB9 JUMP JUMPDEST PUSH1 0x6 DUP2 SUB PUSH2 0xB6D JUMPI PUSH2 0xB0D DUP7 DUP7 PUSH2 0x2367 JUMP JUMPDEST PUSH1 0x7 DUP2 SUB PUSH2 0xB7F JUMPI PUSH2 0xB0D DUP7 DUP7 PUSH2 0x2891 JUMP JUMPDEST PUSH1 0x8 DUP2 SUB PUSH2 0xB91 JUMPI PUSH2 0xB0D DUP7 DUP7 PUSH2 0x2DCF JUMP JUMPDEST PUSH1 0x9 DUP2 SUB PUSH2 0xBE6 JUMPI PUSH2 0xBA4 PUSH1 0x1 DUP5 PUSH2 0x4F63 JUMP JUMPDEST DUP3 EQ PUSH2 0xBDC JUMPI PUSH1 0x40 MLOAD PUSH32 0xE31C95E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB0D DUP7 DUP7 PUSH2 0x3205 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8CCD166700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP1 PUSH2 0xC23 DUP2 PUSH2 0x50A4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xADD JUMP JUMPDEST POP DUP3 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 PUSH2 0xC46 DUP4 DUP3 PUSH2 0x50DC JUMP JUMPDEST PUSH2 0xC54 SWAP1 PUSH2 0xFFFF AND DUP6 PUSH2 0x50F7 JUMP JUMPDEST PUSH2 0xC5E SWAP2 SWAP1 PUSH2 0x513D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7D0 DUP5 GT ISZERO PUSH2 0xCAC JUMPI PUSH1 0x40 MLOAD PUSH32 0x7B93142000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x7D0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 GT ISZERO PUSH2 0xCBE JUMPI POP POP DUP3 DUP3 SUB DUP4 JUMPDEST PUSH2 0x2710 DUP2 DUP8 MUL DIV SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND ISZERO PUSH2 0xCF4 JUMPI PUSH1 0x64 PUSH1 0x32 DUP5 MUL DIV PUSH2 0xCF7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP DUP1 DUP4 SUB DUP4 DUP3 EQ PUSH2 0xD0F JUMPI PUSH2 0xD0F DUP11 DUP11 DUP5 DUP5 PUSH2 0x39D7 JUMP JUMPDEST POP POP POP SWAP1 SWAP2 SUB SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD80 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3A9F SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0xDA1 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xDA1 SWAP2 SWAP1 PUSH2 0x5178 JUMP JUMPDEST PUSH2 0xA55 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP1 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x160 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x180 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MLOAD PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E10 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0xF0A JUMPI PUSH1 0x40 MLOAD PUSH32 0x45369FBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x120 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS EQ PUSH2 0xF5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x32D40DF100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x140 DUP5 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP5 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xD0E30DB000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH4 0xD0E30DB0 SWAP3 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFE9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP6 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E10 DUP1 SLOAD PUSH2 0x140 DUP6 ADD MLOAD SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND SWAP2 AND EQ PUSH2 0x10DB JUMPI PUSH1 0x40 MLOAD PUSH32 0xB2EE070800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x120 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ADDRESS EQ DUP1 ISZERO SWAP1 PUSH2 0x1109 JUMPI ADDRESS PUSH2 0x120 DUP7 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP7 ADD MSTORE DUP1 ISZERO PUSH2 0x11BC JUMPI PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0x100 DUP7 ADD MLOAD DUP5 SLOAD PUSH1 0x40 MLOAD PUSH32 0x36C7851600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE SWAP3 DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE SWAP1 DUP3 AND PUSH1 0x64 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0x36C78516 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP3 SLOAD PUSH2 0x100 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0x2E1A7D4D SWAP2 PUSH2 0x1219 SWAP2 PUSH1 0x4 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1247 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP7 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x140 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x130F JUMPI PUSH1 0x40 MLOAD PUSH32 0xB10B947E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE DUP4 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH1 0xFF AND PUSH1 0x1 EQ PUSH1 0x40 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x2 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH2 0xFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x120 DUP4 ADD MLOAD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SUB PUSH2 0x1404 JUMPI PUSH2 0x13FF DUP2 PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x100 ADD MLOAD DUP6 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x981 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x14E0 JUMP JUMPDEST PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E10 PUSH1 0x1 ADD SLOAD PUSH2 0x120 DUP5 ADD MLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x140 DUP8 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x36C7851600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP5 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x44 DUP4 ADD MSTORE DUP3 AND PUSH1 0x64 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0x36C78516 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP ADDRESS PUSH2 0x120 DUP7 ADD MSTORE POP POP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1532 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1556 SWAP2 SWAP1 PUSH2 0x51B8 JUMP JUMPDEST POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x1586 JUMPI SWAP1 JUMPDEST PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0xFFFF PUSH2 0x2710 SWAP3 DUP4 SUB AND SWAP2 DUP5 MUL SWAP1 DUP3 MUL SWAP1 DUP2 ADD SWAP1 DUP4 MUL DUP2 PUSH2 0x15B4 JUMPI PUSH2 0x15B4 PUSH2 0x510E JUMP JUMPDEST DIV PUSH2 0x100 DUP8 ADD MSTORE POP DUP3 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x162A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x164E SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x22C0D9F DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x1684 JUMPI DUP8 PUSH2 0x100 ADD MLOAD PUSH2 0x1687 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x1697 JUMPI PUSH1 0x0 PUSH2 0x169E JUMP JUMPDEST DUP9 PUSH2 0x100 ADD MLOAD JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x171C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP6 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 POP PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1790 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17B4 SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT DUP1 PUSH2 0x17D2 JUMPI POP PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0x17CF SWAP1 DUP4 PUSH2 0x5221 JUMP JUMPDEST DUP2 LT JUMPDEST ISZERO PUSH2 0x1809 JUMPI PUSH1 0x40 MLOAD PUSH32 0x946BEB5300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP SWAP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x140 DUP6 ADD MSTORE POP SWAP2 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 PUSH2 0x18AD DUP5 DUP1 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 DUP4 PUSH2 0x100 ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP4 LT ISZERO PUSH2 0x18F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1D6BEB5700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1B84 JUMPI PUSH1 0x0 PUSH2 0x1914 PUSH1 0x1 DUP9 PUSH2 0x4F63 JUMP JUMPDEST DUP3 LT PUSH2 0x1920 JUMPI DUP6 PUSH2 0x1951 JUMP JUMPDEST PUSH2 0x2710 PUSH2 0x1933 DUP12 DUP1 MLOAD PUSH1 0x2 ADD DUP1 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND DUP11 PUSH2 0x100 ADD MLOAD PUSH2 0x1947 SWAP2 SWAP1 PUSH2 0x50F7 JUMP JUMPDEST PUSH2 0x1951 SWAP2 SWAP1 PUSH2 0x513D JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x198D JUMPI PUSH1 0x40 MLOAD PUSH32 0xF24C51700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1997 DUP2 DUP8 PUSH2 0x4F63 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP1 DUP3 ADD DUP4 DUP2 MSTORE PUSH2 0x140 DUP1 DUP5 ADD DUP6 DUP2 MSTORE PUSH2 0x160 DUP6 ADD DUP7 SWAP1 MSTORE PUSH2 0x180 DUP6 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH2 0x100 DUP5 ADD DUP8 SWAP1 MSTORE SWAP2 DUP15 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE SWAP1 DUP14 ADD MLOAD AND SWAP1 SWAP2 MSTORE SWAP1 SWAP7 POP PUSH2 0x1A36 DUP12 DUP3 PUSH2 0xA5A JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x160 ADD MLOAD PUSH1 0x1 SUB PUSH2 0x1A77 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD35869F800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x0 SUB PUSH2 0x1A94 JUMPI DUP1 PUSH2 0x120 ADD MLOAD SWAP4 POP DUP1 PUSH2 0x140 ADD MLOAD SWAP5 POP PUSH2 0x1B68 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1AFE JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7AF48F200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH2 0x120 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x51A769FD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x100 DUP2 ADD MLOAD PUSH2 0x1B78 SWAP1 DUP8 PUSH2 0x5221 JUMP JUMPDEST SWAP6 POP POP POP PUSH1 0x1 ADD PUSH2 0x18FF JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH2 0x120 DUP9 ADD MSTORE AND PUSH2 0x140 DUP7 ADD MSTORE PUSH2 0x100 DUP6 ADD MSTORE POP SWAP2 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x1C46 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C58 DUP6 DUP1 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH2 0x1C68 DUP2 PUSH1 0x1 PUSH2 0x5221 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C80 JUMPI PUSH2 0x1C80 PUSH2 0x48AD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1CA9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP1 DUP4 MSTORE PUSH2 0x140 DUP6 ADD MLOAD DUP2 MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x1CC7 JUMPI PUSH2 0x1CC7 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1D60 JUMPI DUP6 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP8 MSTORE DUP4 MLOAD PUSH2 0x1D23 DUP4 PUSH1 0x1 PUSH2 0x5221 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1D33 JUMPI PUSH2 0x1D33 PUSH2 0x5234 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x1D04 JUMP JUMPDEST POP PUSH2 0x1D6B DUP6 DUP3 PUSH2 0x3AB6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1D7A DUP6 DUP3 PUSH2 0x3B58 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE DUP2 MLOAD DUP1 MLOAD PUSH1 0x0 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x1D97 JUMPI PUSH2 0x1D97 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E0D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E31 SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1E52 DUP5 PUSH1 0x40 ADD MLOAD DUP8 PUSH2 0x100 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x3BE1 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH2 0x120 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1EE4 JUMPI PUSH2 0x1EDF DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1EA6 JUMPI PUSH2 0x1EA6 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH2 0x100 ADD MLOAD DUP9 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x981 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1FE3 JUMP JUMPDEST PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E11 SLOAD PUSH2 0x120 DUP8 ADD MLOAD PUSH1 0x20 DUP7 ADD MLOAD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND SWAP3 PUSH4 0x36C78516 SWAP3 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x1F43 JUMPI PUSH2 0x1F43 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH2 0x100 ADD MLOAD DUP11 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FA9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1FD7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP ADDRESS PUSH2 0x120 DUP10 ADD MSTORE POP POP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x21E7 JUMPI PUSH1 0x0 PUSH2 0x1FFB DUP3 PUSH1 0x1 PUSH2 0x5221 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2015 JUMPI PUSH2 0x2015 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x0 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2049 JUMPI PUSH2 0x2049 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x2073 JUMPI PUSH1 0x0 PUSH2 0x2076 JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP9 PUSH1 0x0 ADD MLOAD MLOAD PUSH2 0x208C SWAP2 SWAP1 PUSH2 0x4F63 JUMP JUMPDEST DUP5 LT PUSH2 0x2098 JUMPI ADDRESS PUSH2 0x20B7 JUMP JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x20AE JUMPI PUSH2 0x20AE PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST SWAP1 POP DUP8 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x20CF JUMPI PUSH2 0x20CF PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x22C0D9F DUP4 PUSH2 0x2116 JUMPI DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2109 JUMPI PUSH2 0x2109 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2119 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 PUSH2 0x2125 JUMPI PUSH1 0x0 PUSH2 0x2140 JUMP JUMPDEST DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2137 JUMPI PUSH2 0x2137 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x21D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 SWAP1 SWAP6 ADD SWAP5 POP PUSH2 0x1FE6 SWAP4 POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 DUP5 PUSH1 0x0 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2200 JUMPI PUSH2 0x2200 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2276 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x229A SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x1 DUP4 MLOAD PUSH2 0x22AB SWAP2 SWAP1 PUSH2 0x4F63 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x22BB JUMPI PUSH2 0x22BB PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH2 0x100 ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 LT DUP1 PUSH2 0x22E9 JUMPI POP PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0x22E6 SWAP1 DUP5 PUSH2 0x5221 JUMP JUMPDEST DUP2 LT JUMPDEST ISZERO PUSH2 0x2320 JUMPI PUSH1 0x40 MLOAD PUSH32 0x946BEB5300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 MLOAD DUP1 MLOAD DUP6 SWAP1 DUP2 LT PUSH2 0x2334 JUMPI PUSH2 0x2334 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x140 DUP9 ADD MSTORE POP SWAP5 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE DUP4 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x140 DUP5 ADD MLOAD AND PUSH2 0x247A JUMPI PUSH1 0x40 MLOAD PUSH32 0xB10B947E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x250C SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT SWAP1 POP PUSH2 0x25A8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH2 0x100 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH2 0x120 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH2 0x3E16 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x268C JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x100 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x128ACB0800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH5 0x1000276A4 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x128ACB08 SWAP1 PUSH1 0xC4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x264F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2673 SWAP2 SWAP1 PUSH2 0x5263 JUMP JUMPDEST SWAP2 POP POP DUP1 PUSH2 0x2680 SWAP1 PUSH2 0x5287 JUMP JUMPDEST PUSH2 0x100 DUP8 ADD MSTORE POP PUSH2 0x2774 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x100 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x128ACB0800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x128ACB08 SWAP1 PUSH1 0xC4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x273C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2760 SWAP2 SWAP1 PUSH2 0x5263 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x276C DUP2 PUSH2 0x5287 JUMP JUMPDEST PUSH2 0x100 DUP8 ADD MSTORE POP JUMPDEST PUSH2 0x277C PUSH2 0x3F7F JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x280E SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT DUP1 PUSH2 0x282C JUMPI POP PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x2829 SWAP1 DUP5 PUSH2 0x5221 JUMP JUMPDEST DUP2 LT JUMPDEST ISZERO PUSH2 0x2863 JUMPI PUSH1 0x40 MLOAD PUSH32 0x946BEB5300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x140 DUP5 ADD MSTORE POP POP ADDRESS PUSH2 0x120 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x291E PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2930 DUP6 DUP1 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH2 0x293F DUP6 DUP3 PUSH2 0x3AB6 JUMP JUMPDEST DUP3 MSTORE PUSH2 0x294B DUP6 DUP3 PUSH2 0x3AB6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2960 PUSH1 0x1 DUP5 PUSH2 0x4F63 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2970 JUMPI PUSH2 0x2970 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29EB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A0F SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2CD7 JUMPI PUSH1 0x0 DUP2 ISZERO PUSH2 0x2A4E JUMPI DUP6 MLOAD PUSH2 0x2A31 PUSH1 0x1 DUP5 PUSH2 0x4F63 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2A41 JUMPI PUSH2 0x2A41 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2A55 JUMP JUMPDEST DUP8 PUSH2 0x140 ADD MLOAD JUMPDEST SWAP1 POP DUP6 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2A6D JUMPI PUSH2 0x2A6D PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH2 0x140 DUP12 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH2 0x100 DUP14 ADD MLOAD DUP2 MSTORE PUSH2 0x120 DUP14 ADD MLOAD DUP5 AND SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 DUP5 AND SWAP2 DUP4 ADD DUP3 SWAP1 MSTORE GT SWAP1 PUSH2 0x2ACE SWAP1 PUSH2 0x3E16 JUMP JUMPDEST DUP3 PUSH1 0x0 SUB PUSH2 0x2ADE JUMPI ADDRESS PUSH2 0x120 DUP11 ADD MSTORE JUMPDEST PUSH1 0x0 DUP8 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2AF6 JUMPI PUSH2 0x2AF6 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP2 ISZERO PUSH2 0x2BE0 JUMPI PUSH2 0x100 DUP11 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x128ACB0800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH5 0x1000276A4 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x128ACB08 SWAP1 PUSH1 0xC4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2BA3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BC7 SWAP2 SWAP1 PUSH2 0x5263 JUMP JUMPDEST SWAP2 POP POP DUP1 PUSH2 0x2BD4 SWAP1 PUSH2 0x5287 JUMP JUMPDEST PUSH2 0x100 DUP13 ADD MSTORE POP PUSH2 0x2CC4 JUMP JUMPDEST PUSH2 0x100 DUP11 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x128ACB0800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x128ACB08 SWAP1 PUSH1 0xC4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C8C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CB0 SWAP2 SWAP1 PUSH2 0x5263 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x2CBC DUP2 PUSH2 0x5287 JUMP JUMPDEST PUSH2 0x100 DUP13 ADD MSTORE POP JUMPDEST PUSH2 0x2CCC PUSH2 0x3F7F JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x2A14 JUMP JUMPDEST POP PUSH2 0x140 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D4A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D6E SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT DUP1 PUSH2 0x2D8C JUMPI POP PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0x2D89 SWAP1 DUP4 PUSH2 0x5221 JUMP JUMPDEST DUP2 LT JUMPDEST ISZERO PUSH2 0x2DC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x946BEB5300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP5 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE DUP4 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH1 0xFF AND PUSH1 0x40 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH1 0xFF AND PUSH1 0x60 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH1 0xFF AND PUSH1 0x80 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH1 0xFF AND PUSH1 0x1 EQ PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x140 DUP4 ADD MLOAD DUP2 MLOAD PUSH2 0x120 DUP6 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND ISZERO SWAP3 SWAP2 DUP3 AND ISZERO SWAP2 ADDRESS SWAP2 AND EQ PUSH2 0x3006 JUMPI PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E10 PUSH1 0x1 ADD SLOAD PUSH2 0x120 DUP7 ADD MLOAD PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0x140 DUP9 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x36C7851600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x44 DUP4 ADD MSTORE DUP3 AND PUSH1 0x64 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0x36C78516 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2FE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2FFA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP ADDRESS PUSH2 0x120 DUP9 ADD MSTORE POP POP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x30A3 JUMPI DUP4 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x307A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x309E SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST PUSH2 0x30A5 JUMP JUMPDEST SELFBALANCE JUMPDEST SWAP1 POP DUP3 PUSH2 0x30E5 JUMPI PUSH2 0x30E5 DUP5 PUSH1 0x20 ADD MLOAD DUP8 PUSH2 0x100 ADD MLOAD DUP9 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3FDF SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x312A DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0xA0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP7 PUSH2 0x3103 JUMPI PUSH1 0x0 PUSH2 0x310A JUMP JUMPDEST DUP10 PUSH2 0x100 ADD MLOAD JUMPDEST DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP13 PUSH2 0x100 ADD MLOAD PUSH1 0x0 DUP12 DUP1 PUSH2 0x3125 JUMPI POP DUP11 JUMPDEST PUSH2 0x40D5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x31C7 JUMPI DUP5 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x319E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x31C2 SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST PUSH2 0x31C9 JUMP JUMPDEST SELFBALANCE JUMPDEST DUP6 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x140 DUP10 ADD MSTORE SWAP1 POP PUSH2 0x31F3 DUP3 DUP3 PUSH2 0x4F63 JUMP JUMPDEST PUSH2 0x100 DUP9 ADD MSTORE POP SWAP5 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x160 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x180 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x32A4 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x2 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH2 0xFFFF AND DUP2 MSTORE DUP4 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH1 0xFF AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x1 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH1 0xFF AND PUSH1 0x40 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x4 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE PUSH4 0xFFFFFFFF AND PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE ISZERO PUSH2 0x3431 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH2 0x140 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD DUP3 DUP2 MSTORE DUP5 DUP7 ADD DUP4 DUP2 MSTORE PUSH1 0x60 DUP1 DUP8 ADD DUP6 DUP2 MSTORE PUSH1 0x80 DUP9 ADD DUP7 DUP2 MSTORE PUSH1 0xA0 DUP10 ADD DUP8 SWAP1 MSTORE PUSH1 0xC0 DUP1 DUP11 ADD DUP9 SWAP1 MSTORE PUSH1 0xE0 DUP11 ADD DUP9 SWAP1 MSTORE PUSH2 0x100 DUP11 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH2 0x120 DUP10 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP12 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP10 MSTORE SWAP5 DUP13 ADD MLOAD PUSH2 0xFFFF SWAP1 DUP2 AND SWAP1 SWAP5 MSTORE SWAP5 DUP12 ADD MLOAD SWAP1 SWAP3 AND SWAP1 MSTORE SWAP5 DUP9 ADD MLOAD DUP2 AND SWAP1 SWAP2 MSTORE SWAP1 DUP7 ADD MLOAD AND SWAP1 SWAP2 MSTORE DUP5 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP7 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE DUP5 MLOAD PUSH1 0x20 ADD DUP1 MLOAD SWAP1 DUP7 MSTORE PUSH1 0xE0 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 ADD MLOAD PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x100 DUP3 ADD MSTORE DUP5 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD SWAP1 SWAP3 ADD ADD DUP7 MSTORE PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0x33FC SWAP1 DUP3 SWAP1 PUSH1 0x20 ADD PUSH2 0x52BF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD MSTORE POP JUMPDEST DUP3 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3543 JUMPI DUP1 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 SUB PUSH2 0x34A5 JUMPI DUP3 MLOAD PUSH2 0x140 DUP5 ADD MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x349E SWAP4 SWAP3 SWAP2 PUSH2 0xFFFF AND SWAP1 DUP1 PUSH2 0xC65 JUMP JUMPDEST PUSH2 0x100 DUP5 ADD MSTORE JUMPDEST DUP3 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1D81B4318B379C644B5546AE9CF37D861A5C7547BF3DAE6CFAECFFA12F8748F3 DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH2 0x100 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x353A SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST PUSH2 0x3555 DUP4 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0xC37 JUMP JUMPDEST DUP4 PUSH2 0x100 ADD MLOAD LT ISZERO PUSH2 0x3593 JUMPI PUSH1 0x40 MLOAD PUSH32 0x42301C2300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E12 SLOAD PUSH2 0x140 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND SWAP2 AND ISZERO PUSH2 0x377F JUMPI PUSH2 0x120 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS EQ PUSH2 0x36D1 JUMPI PUSH32 0x1C1CF3C8827D48DB80E17913589584C81D7F8DA7F2100C9A87A7BF64829A0E10 PUSH1 0x1 ADD SLOAD PUSH2 0x120 DUP6 ADD MLOAD PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x140 DUP8 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x36C7851600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x44 DUP4 ADD MSTORE DUP3 AND PUSH1 0x64 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0x36C78516 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x36C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP ADDRESS PUSH2 0x120 DUP8 ADD MSTORE POP POP JUMPDEST PUSH2 0x377F DUP3 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 EQ PUSH2 0x36E7 JUMPI DUP2 PUSH2 0x3756 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9E56F3C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3732 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3756 SWAP2 SWAP1 PUSH2 0x52D2 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x140 DUP8 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x3FDF JUMP JUMPDEST PUSH1 0x1 PUSH2 0x160 DUP6 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD MLOAD ISZERO PUSH2 0x3798 JUMPI DUP1 PUSH2 0x3807 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9E56F3C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37E3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3807 SWAP2 SWAP1 PUSH2 0x52D2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9FBF10FC PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH2 0x140 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3866 JUMPI DUP6 PUSH2 0x180 ADD MLOAD PUSH2 0x387C JUMP JUMPDEST DUP6 PUSH2 0x180 ADD MLOAD DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0x387C SWAP2 SWAP1 PUSH2 0x5221 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x40 DUP8 ADD MLOAD PUSH2 0x100 DUP11 ADD MLOAD PUSH1 0xC0 DUP12 ADD MLOAD ADDRESS SWAP2 SWAP1 PUSH2 0x38A1 SWAP1 DUP3 SWAP1 PUSH2 0xC37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP13 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP PUSH1 0x0 DUP13 PUSH1 0x80 ADD MLOAD MLOAD GT PUSH2 0x38E7 JUMPI DUP14 PUSH1 0x40 ADD MLOAD PUSH2 0x38E9 JUMP JUMPDEST ADDRESS JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3924 SWAP2 SWAP1 PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x80 DUP15 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP14 SWAP1 SHL AND DUP4 MSTORE PUSH2 0x3994 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 PUSH1 0x4 ADD PUSH2 0x52EF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x39AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x39C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x0 PUSH2 0x180 DUP9 ADD MSTORE POP SWAP5 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x77FBD1C38A5EAD50A5764A860FEF6B91E5432A95F91228E67197EDAF911CFC90 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP6 DUP10 AND DUP1 DUP6 MSTORE SWAP6 DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD DUP10 ADD SWAP1 SSTORE PUSH32 0x77FBD1C38A5EAD50A5764A860FEF6B91E5432A95F91228E67197EDAF911CFC91 DUP3 MSTORE SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP9 ADD SWAP1 SSTORE DUP3 MLOAD DUP8 DUP2 MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE DUP3 MLOAD SWAP2 SWAP5 SWAP4 SWAP3 PUSH32 0x3D2A5B5AA3C9E4A41EED8AE2E9E470C5CFB96FA51EB0935C607C0FD8EC3F3F57 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3AAE DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x45D1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3AD1 JUMPI PUSH2 0x3AD1 PUSH2 0x48AD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3AFA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3B51 JUMPI DUP4 MLOAD PUSH1 0x14 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B24 JUMPI PUSH2 0x3B24 PUSH2 0x5234 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3B00 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B73 JUMPI PUSH2 0x3B73 PUSH2 0x48AD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3B9C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3B51 JUMPI DUP4 MLOAD PUSH1 0x2 ADD DUP1 MLOAD SWAP1 DUP6 MSTORE DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3BC6 JUMPI PUSH2 0x3BC6 PUSH2 0x5234 JUMP JUMPDEST PUSH2 0xFFFF SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3BA2 JUMP JUMPDEST DUP1 MLOAD DUP3 MLOAD PUSH1 0x60 SWAP2 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C01 JUMPI PUSH2 0x3C01 PUSH2 0x48AD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3C2A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP5 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3C41 JUMPI PUSH2 0x3C41 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3E0C JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3C6C JUMPI PUSH2 0x3C6C PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP7 DUP4 PUSH1 0x1 PUSH2 0x3C86 SWAP2 SWAP1 PUSH2 0x5221 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x3C96 JUMPI PUSH2 0x3C96 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3CB4 JUMPI PUSH2 0x3CB4 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 PUSH2 0x3CC9 SWAP2 SWAP1 PUSH2 0x50DC JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 POP PUSH1 0x0 DUP1 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3CE4 JUMPI PUSH2 0x3CE4 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3D36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3D5A SWAP2 SWAP1 PUSH2 0x51B8 JUMP JUMPDEST POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x3DB5 JUMPI SWAP1 JUMPDEST DUP3 DUP12 MUL DUP3 PUSH2 0x2710 MUL ADD DUP2 DUP5 DUP14 MUL MUL DUP2 PUSH2 0x3DD0 JUMPI PUSH2 0x3DD0 PUSH2 0x510E JUMP JUMPDEST DIV SWAP11 POP DUP11 DUP9 PUSH2 0x3DE0 DUP9 PUSH1 0x1 PUSH2 0x5221 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x3DF0 JUMPI PUSH2 0x3DF0 PUSH2 0x5234 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 POP PUSH2 0x3C50 SWAP2 POP POP JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x3029B773E586DA235D6A0709BACD2CB14A2E6562F997F3C8684513A487BCBF7A SLOAD PUSH1 0xFF AND PUSH1 0x1 SUB PUSH2 0x3E74 JUMPI PUSH1 0x40 MLOAD PUSH32 0x65D4E04900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x3029B773E586DA235D6A0709BACD2CB14A2E6562F997F3C8684513A487BCBF7A DUP1 SLOAD PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 SWAP1 SWAP2 AND OR SWAP1 SSTORE DUP1 MLOAD PUSH32 0x3029B773E586DA235D6A0709BACD2CB14A2E6562F997F3C8684513A487BCBF7B SSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH32 0x3029B773E586DA235D6A0709BACD2CB14A2E6562F997F3C8684513A487BCBF7C DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x40 SWAP1 SWAP3 ADD MLOAD PUSH32 0x3029B773E586DA235D6A0709BACD2CB14A2E6562F997F3C8684513A487BCBF7D DUP1 SLOAD SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH32 0x3029B773E586DA235D6A0709BACD2CB14A2E6562F997F3C8684513A487BCBF7A SLOAD PUSH1 0xFF AND PUSH1 0x1 SUB PUSH2 0x3FDD JUMPI PUSH1 0x40 MLOAD PUSH32 0x129C8CDB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x406B DUP5 DUP3 PUSH2 0x46EA JUMP JUMPDEST PUSH2 0x40CF JUMPI PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x40C5 SWAP1 DUP6 SWAP1 PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD PUSH2 0x9D3 JUMP JUMPDEST PUSH2 0x40CF DUP5 DUP3 PUSH2 0xD1E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP9 PUSH1 0xFF AND PUSH1 0x1 SUB PUSH2 0x4203 JUMPI DUP8 ISZERO PUSH2 0x418E JUMPI PUSH1 0x40 MLOAD PUSH32 0xA6417ED600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP1 DUP8 AND PUSH1 0xF SWAP1 DUP2 SIGNEXTEND PUSH1 0x4 DUP5 ADD MSTORE SWAP1 DUP7 AND SWAP1 SIGNEXTEND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0xA6417ED6 SWAP1 DUP9 SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4170 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4184 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x45C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3DF0212400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP1 DUP8 AND PUSH1 0xF SWAP1 DUP2 SIGNEXTEND PUSH1 0x4 DUP5 ADD MSTORE SWAP1 DUP7 AND SWAP1 SIGNEXTEND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0x3DF02124 SWAP1 DUP9 SWAP1 PUSH1 0x84 ADD PUSH2 0x4157 JUMP JUMPDEST DUP9 PUSH1 0xFF AND PUSH1 0x2 SUB PUSH2 0x4343 JUMPI DUP8 ISZERO PUSH2 0x42CE JUMPI PUSH1 0x40 MLOAD PUSH32 0xA6417ED600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP1 DUP8 AND PUSH1 0xF SWAP1 DUP2 SIGNEXTEND PUSH1 0x4 DUP5 ADD MSTORE SWAP1 DUP7 AND SWAP1 SIGNEXTEND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0xA6417ED6 SWAP1 DUP9 SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x42A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x42C8 SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST POP PUSH2 0x45C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3DF0212400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP1 DUP8 AND PUSH1 0xF SWAP1 DUP2 SIGNEXTEND PUSH1 0x4 DUP5 ADD MSTORE SWAP1 DUP7 AND SWAP1 SIGNEXTEND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0x3DF02124 SWAP1 DUP9 SWAP1 PUSH1 0x84 ADD PUSH2 0x4285 JUMP JUMPDEST DUP9 PUSH1 0xFF AND PUSH1 0x3 SUB PUSH2 0x44E4 JUMPI DUP8 ISZERO PUSH2 0x43C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x65B2489B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0x65B2489B SWAP1 DUP9 SWAP1 PUSH1 0x84 ADD PUSH2 0x4285 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x443B JUMPI PUSH1 0x40 MLOAD PUSH32 0x394747C500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x84 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0x394747C5 SWAP1 DUP9 SWAP1 PUSH1 0xA4 ADD PUSH2 0x4285 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x5B41B90800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0x5B41B908 SWAP1 PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x44C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x42C8 SWAP2 SWAP1 PUSH2 0x5208 JUMP JUMPDEST DUP9 PUSH1 0xFF AND PUSH1 0x4 SUB PUSH2 0x4594 JUMPI DUP8 ISZERO PUSH2 0x4527 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF1C43EDE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x5B41B90800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0x5B41B908 SWAP1 DUP9 SWAP1 PUSH1 0x84 ADD PUSH2 0x4157 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF1C43EDE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x4663 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x468C SWAP2 SWAP1 PUSH2 0x539B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x46C9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x46CE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x46DF DUP8 DUP4 DUP4 DUP8 PUSH2 0x47AB JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x4714 SWAP2 SWAP1 PUSH2 0x539B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4751 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4756 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x4780 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x4780 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4780 SWAP2 SWAP1 PUSH2 0x5178 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x47A2 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x4841 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x483A JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x483A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCA3 JUMP JUMPDEST POP DUP2 PUSH2 0x3AAE JUMP JUMPDEST PUSH2 0x3AAE DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x4856 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA3 SWAP2 SWAP1 PUSH2 0x53B7 JUMP JUMPDEST PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x489A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x48A8 DUP2 PUSH2 0x488A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x4900 JUMPI PUSH2 0x4900 PUSH2 0x48AD JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x494D JUMPI PUSH2 0x494D PUSH2 0x48AD JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x496F JUMPI PUSH2 0x496F PUSH2 0x48AD JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x49AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x49BF PUSH2 0x49BA DUP3 PUSH2 0x4955 JUMP JUMPDEST PUSH2 0x4906 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x49D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x489A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x48A8 DUP2 PUSH2 0x49F1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4A37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x4A42 DUP2 PUSH2 0x488A JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4A5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4A6B DUP11 DUP4 DUP12 ADD PUSH2 0x499B JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH2 0x4A84 DUP3 PUSH2 0x49F1 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x4AA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AAE DUP10 DUP3 DUP11 ADD PUSH2 0x499B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x489A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x48A8 DUP2 PUSH2 0x4ABB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4AEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4B05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4B1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH2 0x140 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x4B32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B3A PUSH2 0x48DC JUMP JUMPDEST PUSH2 0x4B43 DUP4 PUSH2 0x4A13 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x4B51 PUSH1 0x20 DUP5 ADD PUSH2 0x489D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x4B62 PUSH1 0x40 DUP5 ADD PUSH2 0x489D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x4B73 PUSH1 0x60 DUP5 ADD PUSH2 0x4A13 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x4B84 PUSH1 0x80 DUP5 ADD PUSH2 0x4A13 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x4B95 PUSH1 0xA0 DUP5 ADD PUSH2 0x4A13 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x4BBC DUP2 DUP6 ADD PUSH2 0x4ACF JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP4 DUP2 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x4BD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4BE0 DUP10 DUP3 DUP8 ADD PUSH2 0x499B JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP DUP1 SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4BFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C0B DUP6 DUP3 DUP7 ADD PUSH2 0x4ADA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x48A8 DUP2 PUSH2 0x49F1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x48A8 DUP2 PUSH2 0x488A JUMP JUMPDEST DUP1 MLOAD PUSH2 0x48A8 DUP2 PUSH2 0x4ABB JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4C51 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4C39 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4C6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x4C79 PUSH2 0x49BA DUP3 PUSH2 0x4955 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x4C8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AAE DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x4C36 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4CC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH2 0x140 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x4CDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4CE6 PUSH2 0x48DC JUMP JUMPDEST PUSH2 0x4CEF DUP4 PUSH2 0x4C15 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x4CFD PUSH1 0x20 DUP5 ADD PUSH2 0x4C20 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x4D0E PUSH1 0x40 DUP5 ADD PUSH2 0x4C20 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x4D1F PUSH1 0x60 DUP5 ADD PUSH2 0x4C15 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x4D30 PUSH1 0x80 DUP5 ADD PUSH2 0x4C15 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x4D41 PUSH1 0xA0 DUP5 ADD PUSH2 0x4C15 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x4D68 DUP2 DUP6 ADD PUSH2 0x4C2B JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP4 DUP2 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x4D80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4D8C DUP9 DUP3 DUP8 ADD PUSH2 0x4C5A JUMP JUMPDEST SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4DB5 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4C36 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x0 PUSH2 0x140 PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x4E1B PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0xFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x4E31 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0xFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x4E59 PUSH1 0x60 DUP7 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x4E81 PUSH1 0x80 DUP7 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x4EA9 PUSH1 0xA0 DUP7 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD PUSH2 0x4ED8 DUP3 DUP8 ADD DUP3 PUSH6 0xFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x4EF2 DUP4 DUP8 ADD DUP3 PUSH2 0x4D9D JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x4F0F PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x4DE7 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE DUP4 MLOAD DUP2 MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4EF2 PUSH1 0x40 DUP4 ADD DUP3 PUSH2 0x4D9D JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xC31 JUMPI PUSH2 0xC31 PUSH2 0x4F34 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x4FAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4FC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x4FDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP5 MSTORE DUP7 MLOAD DUP2 DUP2 MLOAD AND PUSH1 0x20 DUP7 ADD MSTORE DUP2 PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH6 0xFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x60 DUP9 ADD MSTORE DUP1 PUSH1 0x60 DUP5 ADD MLOAD AND PUSH1 0x80 DUP9 ADD MSTORE POP POP POP DUP1 PUSH1 0x20 DUP9 ADD MLOAD AND PUSH1 0xA0 DUP6 ADD MSTORE POP PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE DUP1 PUSH1 0xE0 DUP5 ADD MSTORE DUP4 DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP4 DUP6 DUP3 DUP6 ADD CALLDATACOPY PUSH1 0x0 DUP4 DUP6 ADD DUP3 ADD MSTORE PUSH1 0x1F SWAP1 SWAP4 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x50D5 JUMPI PUSH2 0x50D5 PUSH2 0x4F34 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x3B51 JUMPI PUSH2 0x3B51 PUSH2 0x4F34 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0xC31 JUMPI PUSH2 0xC31 PUSH2 0x4F34 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5173 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x518A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x48A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x51CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x51D6 DUP5 PUSH2 0x519A JUMP JUMPDEST SWAP3 POP PUSH2 0x51E4 PUSH1 0x20 DUP6 ADD PUSH2 0x519A JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x51FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x521A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xC31 JUMPI PUSH2 0xC31 PUSH2 0x4F34 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x52B8 JUMPI PUSH2 0x52B8 PUSH2 0x4F34 JUMP JUMPDEST POP PUSH1 0x0 SUB SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC5E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4DE7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xC5E DUP2 PUSH2 0x49F1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 PUSH2 0xFFFF DUP13 AND DUP4 MSTORE DUP11 PUSH1 0x20 DUP5 ADD MSTORE DUP10 PUSH1 0x40 DUP5 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x60 DUP5 ADD MSTORE DUP8 PUSH1 0x80 DUP5 ADD MSTORE DUP7 PUSH1 0xA0 DUP5 ADD MSTORE DUP1 PUSH1 0xC0 DUP5 ADD MSTORE DUP6 MLOAD DUP2 DUP5 ADD MSTORE POP PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x140 DUP4 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 PUSH2 0x160 DUP5 ADD MSTORE PUSH2 0x5362 PUSH2 0x180 DUP5 ADD DUP3 PUSH2 0x4D9D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x5376 DUP2 DUP7 PUSH2 0x4D9D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x538B DUP2 DUP6 PUSH2 0x4D9D JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x53AD DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x4C36 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC5E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4D9D JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E 0xEC 0xDC PUSH23 0xD361EA4A608EC1291A66F39B61F591D844E03C8F4164AD 0xB5 0xE8 0xC4 NOT 0xC4 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
          "sourceMap": "1901:30063:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;20194:1774;;;;;;;;;;-1:-1:-1;20194:1774:6;;;;;:::i;:::-;;:::i;:::-;;28859:3103;;;;;;:::i;:::-;;:::i;20194:1774::-;651:36:28;20406:32:6;;;;;20384:10;:55;20380:108;;20456:25;;;;;;;;;;;;;;20380:108;20698:2;20681:20;;20675:27;20718;;;20740:4;20718:27;20714:177;;20856:28;;;;;;;;;;;;;;20714:177;20897:20;20931:7;20920:29;;;;;;;;;;;;:::i;:::-;20960:14;;;;20897:52;;-1:-1:-1;20960:28:6;;20956:239;;21186:1;21169:19;;20956:239;21221:4;21211:30;;21249:20;;;:35;;21283:1;21249:35;;;21272:8;21249:35;21295:375;;;;;;;;21323:6;:14;;;21295:375;;;;;;21357:6;:13;;;21295:375;;;;;;21395:6;:18;;;21295:375;;;;;;21436:6;:16;;;21295:375;;;;;;21473:6;21295:375;;;;;;21501:6;:15;;;21295:375;;;;;;21538:8;21295:375;;;;21569:6;:16;;;21295:375;;;;21607:6;:15;;;21295:375;;;;;;21644:6;:15;;;21295:375;;;21680:39;;;;;;;;21701:1;21680:39;;;;;;;;;;;;;;;;;;;21211:516;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21201:763;;21793:20;;;21789:169;;21833:6;:16;;;21825:34;;:44;21860:8;21825:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21789:169;;;21922:16;;;;21894:55;;:27;;;;21940:8;21894:27;:55::i;:::-;20374:1594;;20194:1774;;;;;;:::o;28859:3103::-;28980:6;:15;;;28962:33;;:15;:33;28958:78;;;29012:17;;;;;;;;;;;;;;28958:78;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29088:14:6;;29071:31;;;;;;29124:13;;;;;29108:29;;;;:13;;;:29;;;;29164:18;;;;;;29143:39;;:18;;;;:39;;;29207:16;;;;;29188:35;;:16;;;:35;;;;-1:-1:-1;29246:14:6;;;;;29229:31;;:14;;;:31;;;;29284:15;;;;;29266;;;:33;;;;29324:16;;;;;29305;;;:35;29367:18;;29346:39;;;;;29409:15;;;;;29391:33;;:15;;;:33;;;;29441:15;;29430:8;;;:26;;;;29472:14;;29462:24;;:7;;;:24;29497:14;:28;29493:1090;;29551:6;:15;;;29539:9;:27;29535:81;;;29585:22;;;;;;;;;;;;;;29535:81;29661:15;;;;29649:27;;:9;:27;:::i;:::-;29624:22;;;:52;29760:4;29742:7;;;:23;29493:1090;;;29849:10;29839:7;;;:20;29893:9;29868:22;;;:34;-1:-1:-1;30037:16:6;;;;:6;:16;:::i;:::-;:23;;:27;30033:544;;;651:36:28;30076:23:6;;;;;;;;;;;;:30;;;30118:10;30140:390;;;;;;;;30195:233;;;;;;;;30251:6;:14;;;30195:233;;;;;;30299:6;:15;;;30195:233;;;;;;30352:6;:15;;;30195:233;;;;;;30400:6;:12;;;30195:233;;;;;30140:390;;;;30459:4;30140:390;;;;;;30501:6;:15;;;30491:26;;30140:390;;;30542:6;:16;;;;;;;;:::i;:::-;30076:492;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30033:544;30589:14;30606:36;30626:6;:15;;;479:4:30;473:11;;634:15;;;621:29;;;727:20;;;850:11;;892:17;;;887:2;875:15;;868:42;473:11;313:607;30606:36:6;30589:53;;30653:25;30668:6;30676:1;30653:14;:25::i;:::-;30705:8;;;;30738:7;;;;30768:15;;;;30649:29;;-1:-1:-1;30705:8:6;;30756:27;;;;;;;30752:75;;30800:20;;;;;;;;;;;;;;30752:75;30892:59;30914:6;:16;;;30932:6;:18;;;30892:21;:59::i;:::-;30880:9;:71;30876:125;;;30968:26;;;;;;;;;;;;;;30876:125;31011:1;:8;;;31023:1;31011:13;31007:242;;31236:7;;;;28859:3103;;:::o;31007:242::-;31287:149;31331:6;:14;;;31353:6;:15;;;31376:6;:13;;;31287:149;;31397:6;:16;;;31421:9;31287:36;:149::i;:::-;31275:161;;31447:9;31460:1;31447:14;31443:68;;31478:26;;;;;;;;;;;;;;31443:68;31543:22;;;31539:167;;31583:6;:16;;;31575:34;;:45;31610:9;31575:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31539:167;;;31671:16;;;;31641:58;;:29;;;;31689:9;31641:29;:58::i;:::-;31716:22;;;;:26;31712:145;;31827:22;;;;31798:52;;31806:10;;31798:52;;;;;;;;;31827:22;31806:10;31798:52;;;;;;;;;;;;;;;;;;;;;31712:145;31913:6;:15;;;31868:89;;31897:6;:14;;;31868:89;;31881:6;:14;;;31868:89;;;31930:6;:15;;;31947:9;31868:89;;;;;;12032:25:31;;;12088:2;12073:18;;12066:34;12020:2;12005:18;;11858:248;31868:89:6;;;;;;;;28952:3010;;;;28859:3103;;:::o;941:175:2:-;1050:58;;12315:42:31;12303:55;;1050:58:2;;;12285:74:31;12375:18;;;12368:34;;;1023:86:2;;1043:5;;1073:23;;12258:18:31;;1050:58:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1023:19;:86::i;:::-;941:175;;;:::o;27272:1583:6:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27396:20:6;27419:18;:6;1250:13:30;;1286:1;1277:11;1302:10;;1319:19;;1302:10;1147:201;27419:18:6;27396:41;;;;27483:20;27478:1358;27520:12;27505;:27;27478:1358;;;27584:19;27606:18;:6;1250:13:30;;1286:1;1277:11;1302:10;;1319:19;;1302:10;1147:201;27606:18:6;27584:40;;;;1340:1;27637:11;:32;27633:1197;;27685:14;27697:1;27685:11;:14::i;:::-;27681:18;;27633:1197;;;1393:1;27718:11;:34;27714:1116;;27768:16;27782:1;27768:13;:16::i;27714:1116::-;1475:1;27803:11;:63;27799:1031;;27882:47;27919:6;27927:1;27882:36;:47::i;27799:1031::-;1527:1;27948:11;:33;27944:886;;27997:23;28010:6;28018:1;27997:12;:23::i;27944:886::-;1602:1;28039:11;:56;28035:795;;28111:41;28142:6;28150:1;28111:30;:41::i;28035:795::-;1684:1;28171:11;:63;28167:663;;28250:47;28287:6;28295:1;28250:36;:47::i;28167:663::-;1759:1;28316:11;:56;28312:518;;28388:41;28419:6;28427:1;28388:30;:41::i;28312:518::-;1835:1;28448:11;:57;28444:386;;28521:43;28554:6;28562:1;28521:32;:43::i;28444:386::-;1895:1;28583:11;:41;28579:251;;28656:16;28671:1;28656:12;:16;:::i;:::-;28640:12;:32;28636:91;;28693:23;;;;;;;;;;;;;;28636:91;28741:30;28761:6;28769:1;28741:19;:30::i;28579:251::-;28803:18;;;;;;;;;;;;;;28579:251;-1:-1:-1;27534:14:6;;;;:::i;:::-;;;;27478:1358;;;;28849:1;28842:8;;;27272:1583;;;;;:::o;842:145:28:-;921:7;976:6;954:17;963:8;976:6;954:17;:::i;:::-;944:28;;;;:6;:28;:::i;:::-;943:39;;;;:::i;:::-;936:46;842:145;-1:-1:-1;;;842:145:28:o;1633:1002:25:-;1806:22;748:5;1840:6;:20;1836:71;;;1877:23;;;;;748:5;1877:23;;;13576:25:31;13549:18;;1877:23:25;;;;;;;;1836:71;1931:16;1974:15;2002:33;;;1998:214;;;-1:-1:-1;;2087:33:25;;;2105:15;1998:214;2285:6;2264:17;;;2263:28;2251:40;;;;;2352:18;2373:21;;;;:49;;2419:3;2413:2;2402:13;;2401:21;2373:49;;;2397:1;2373:49;2352:70;-1:-1:-1;2452:21:25;;;2486:15;;;2482:101;;2513:61;2534:7;2543:5;2550:10;2562:11;2513:20;:61::i;:::-;-1:-1:-1;;;2598:26:25;;;;1633:1002;-1:-1:-1;;;;;1633:1002:25:o;5196:642:2:-;5615:23;5641:69;5669:4;5641:69;;;;;;;;;;;;;;;;;5649:5;5641:27;;;;:69;;;;;:::i;:::-;5615:95;;5728:10;:17;5749:1;5728:22;:56;;;;5765:10;5754:30;;;;;;;;;;;;:::i;:::-;5720:111;;;;;;;14096:2:31;5720:111:2;;;14078:21:31;14135:2;14115:18;;;14108:30;14174:34;14154:18;;;14147:62;14245:12;14225:18;;;14218:40;14275:19;;5720:111:2;13894:406:31;5330:435:6;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5475:7:6;;;;651:36:28;;5475:21:6;;;5471:73;;5513:24;;;;;;;;;;;;;;5471:73;5554:7;;;;:24;;5573:4;5554:24;5550:124;;5643:24;;;;;;;;;;;;;;5550:124;5698:6;;;;5680:7;;;:25;;;5698:6;5734:8;;;5712:33;;;;;;;;:14;;5734:8;5712:33;;;;;5698:6;;5712:33;;;;;;;;5734:8;5698:6;5712:33;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5759:1:6;;5330:435;-1:-1:-1;;;;;;5330:435:6:o;6017:601::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;651:36:28;6183:6:6;;6164:7;;;;6112:41;;-1:-1:-1;6183:6:6;6164:26;;;6183:6;;6164:26;6160:80;;6207:26;;;;;;;;;;;;;;6160:80;6266:7;;;;6308:26;;;6329:4;6308:26;;;;6341:65;;6394:4;6376:7;;;:23;6341:65;6430:1;6412:7;;;:20;6439:128;;;;6474:9;;;;;6533:8;;;6552:6;;6474:86;;;;;:9;14615:15:31;;;6474:86:6;;;14597:34:31;6516:4:6;14647:18:31;;;14640:43;14719:15;;;14699:18;;;14692:43;6552:6:6;;;14751:18:31;;;14744:43;6474:9:6;;;:22;;14508:19:31;;6474:86:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6439:128;6573:6;;;6589:8;;;6573:25;;;;;:6;;;;;:15;;:25;;;;13576::31;;;13564:2;13549:18;;13430:177;6573:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6612:1:6;;6017:601;-1:-1:-1;;;;;;;6017:601:6:o;7235:1832::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7385:7:6;;;;:21;;7381:74;;7423:25;;;;;;;;;;;;;;7381:74;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2917:13:30;;2953:2;2944:12;2970:10;;2987:19;;;7511:38:6;;;;2917:13:30;;2953:2;2944:12;2970:10;;2987:19;;;7555:34:6;;:11;;;:34;1250:13:30;;1286:1;1277:11;1302:10;;1319:19;;;7615:23:6;;7637:1;7615:23;7595:17;;;:43;1457:13:30;;1493:1;1484:11;1509:10;;1526:19;;;7644:39:6;;:17;;;:39;7694:7;;;;7713:4;7694:24;;;;;7690:370;;7765:51;7794:6;:11;;;7807:1;:8;;;7772:1;:7;;;7765:28;;;;:51;;;;;:::i;:::-;7690:370;;;651:36:28;7890:23:6;;;7927:7;;;;7936:11;;;;7890:23;7959:8;;;7970:7;;;;7890:88;;;;;:23;14615:15:31;;;7890:88:6;;;14597:34:31;14667:15;;;14647:18;;;14640:43;14719:15;;;14699:18;;;14692:43;14771:15;;14751:18;;;14744:43;7890:23:6;;;:36;;14508:19:31;;7890:88:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8048:4:6;8030:7;;;:23;-1:-1:-1;;7690:370:6;8067:17;8086:18;8125:6;:11;;;8110:39;;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8066:85;;;;;;;;;8163:6;:17;;;8158:118;;8247:10;8158:118;8366:17;;;;8484:8;;;;8337:46;8357:6;:26;;;8337:46;;8461:18;;8484:20;;;8460:45;;;;8412:35;;8460:45;8411:95;;;;:::i;:::-;;8392:8;;;:114;-1:-1:-1;8613:15:6;;8606:48;;;;;8648:4;8606:48;;;15592:74:31;8584:19:6;;8606:33;;;;;15565:18:31;;8606:48:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8584:70;;8676:6;:11;;;8661:32;;;8701:6;:17;;;:32;;8725:1;:8;;;8701:32;;;8721:1;8701:32;8741:6;:17;;;:32;;8772:1;8741:32;;;8761:1;:8;;;8741:32;8661:149;;;;;;;;;;;;;16133:25:31;;;;16174:18;;;16167:34;8789:4:6;16217:18:31;;;16210:83;16329:3;16309:18;;;16302:31;-1:-1:-1;16349:19:31;;;16342:30;16389:19;;8661:149:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8846:15:6;;8839:48;;;;;8881:4;8839:48;;;15592:74:31;8817:19:6;;-1:-1:-1;8839:33:6;;;;;-1:-1:-1;8839:33:6;;15565:18:31;;8839:48:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8817:70;;8912:11;8898;:25;:65;;;-1:-1:-1;8955:8:6;;;;8941:22;;:11;:22;:::i;:::-;8927:11;:36;8898:65;8894:122;;;8980:29;;;;;;;;;;;;;;8894:122;-1:-1:-1;;9032:15:6;;9022:25;;:7;;;:25;-1:-1:-1;9022:7:6;;7235:1832;-1:-1:-1;;;7235:1832:6:o;3451:1689::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3573:13:6;3589:18;:6;1250:13:30;;1286:1;1277:11;1302:10;;1319:19;;1302:10;1147:201;3589:18:6;3573:34;;;;3613:23;3639:1;:8;;;3613:34;;3653:20;3692:1;3684:5;:9;3680:53;;;3710:16;;;;;;;;;;;;;;3680:53;3835:25;3866;3903:17;3898:1127;3934:5;3922:9;:17;3898:1127;;;4063:18;4096:9;4104:1;4096:5;:9;:::i;:::-;4084;:21;:99;;4168:15;4084:99;;;4151:6;4128:19;:6;1457:13:30;;1493:1;1484:11;1509:10;;1526:19;;1509:10;1352:203;4128:19:6;4117:30;;:1;:8;;;:30;;;;:::i;:::-;4116:41;;;;:::i;:::-;4063:120;;4209:15;4196:10;:28;4192:89;;;4243:29;;;;;;;;;;;;;;4192:89;4289:29;4308:10;4289:29;;:::i;:::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4363:25:6;;;4410:7;;;;4396:21;;;;;;;4439:7;;;;4425:21;;;;4289:29;;-1:-1:-1;4463:29:6;4478:6;-1:-1:-1;4463:14:6;:29::i;:::-;4455:37;;4505:5;:12;;;4521:1;4505:17;4501:69;;4541:20;;;;;;;;;;;;;;4501:69;4582:9;4595:1;4582:14;4578:333;;4628:5;:11;;;4608:31;;4669:5;:11;;;4649:31;;4578:333;;;4724:17;4709:32;;:5;:11;;;:32;;;4705:94;;4762:26;;;;;;;;;;;;;;4705:94;4828:17;4813:32;;:5;:11;;;:32;;;4809:94;;4866:26;;;;;;;;;;;;;;4809:94;4958:12;;;;4942:28;;;;:::i;:::-;;-1:-1:-1;;;4999:11:6;;3898:1127;;;-1:-1:-1;5031:27:6;;;;:7;;;:27;5064;:7;;;:27;5097:8;;;:23;-1:-1:-1;5031:7:6;;3451:1689;-1:-1:-1;;;3451:1689:6:o;9865:2339::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10005:43:6;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;10005:43:6;10055:18;10076;:6;1250:13:30;;1286:1;1277:11;1302:10;;1319:19;;1302:10;1147:201;10076:18:6;10055:39;;;-1:-1:-1;10131:14:6;10055:39;10144:1;10131:14;:::i;:::-;10117:29;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10117:29:6;-1:-1:-1;10101:45:6;;;10317:7;;;;10298:16;;10317:7;;10101:45;:13;;10298:16;;;;:::i;:::-;;;;;;:26;;;;;;;;;;;10336:13;10331:148;10359:10;10351:5;:18;10331:148;;;2917:13:30;;2953:2;2944:12;2970:10;;2987:19;;;10381:13:6;;10395:9;:5;10403:1;10395:9;:::i;:::-;10381:24;;;;;;;;:::i;:::-;:47;;;;:24;;;;;;;;;;;:47;10457:7;;10331:148;;;-1:-1:-1;10500:32:6;:6;10521:10;10500:20;:32::i;:::-;10485:12;;;:47;10559:30;:6;10578:10;10559:18;:30::i;:::-;10538:18;;;:51;10633:13;;:25;;10596:27;;10633:13;10647:10;;10633:25;;;;;;:::i;:::-;;;;;;;;;;;10626:58;;;;;10678:4;10626:58;;;15592:74:31;10626:43:6;;;;;;;15565:18:31;;10626:58:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10596:88;;10691:24;10718:115;10752:6;:18;;;10778:1;:8;;;10794:6;:13;;;10815:6;:12;;;10718:26;:115::i;:::-;10691:142;;10863:4;10844:24;;:1;:7;;;:24;;;10840:409;;10940:55;10969:6;:12;;;10982:1;10969:15;;;;;;;;:::i;:::-;;;;;;;10986:1;:8;;;10947:1;:7;;;10940:28;;;;:55;;;;;:::i;:::-;10840:409;;;11075:23;;11112:7;;;;11121:12;;;;:15;;11075:23;;;;;:36;;11112:7;11121:12;11075:23;;11121:15;;;;:::i;:::-;;;;;;;11148:1;:8;;;11159:1;:7;;;11075:92;;;;;;;;;;;;;;;;;14546:42:31;14615:15;;;14597:34;;14667:15;;;14662:2;14647:18;;14640:43;14719:15;;;14714:2;14699:18;;14692:43;14771:15;;;14766:2;14751:18;;14744:43;14523:3;14508:19;;14305:488;11075:92:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11237:4:6;11219:7;;;:23;-1:-1:-1;;10840:409:6;11285:10;11280:496;11305:10;11297:5;:18;11280:496;;;11327:20;11350:9;:5;11358:1;11350:9;:::i;:::-;11327:32;;11367:15;11408:6;:13;;;11422:12;11408:27;;;;;;;;:::i;:::-;;;;;;;11385:50;;:6;:13;;;11399:5;11385:20;;;;;;;;:::i;:::-;;;;;;;:50;;;:65;;11445:5;11385:65;;;11438:4;11385:65;11367:83;;11458:10;11502:1;11479:6;:13;;;:20;:24;;;;:::i;:::-;11471:5;:32;:77;;11543:4;11471:77;;;11506:6;:12;;;11519;11506:26;;;;;;;;:::i;:::-;;;;;;;11471:77;11458:90;;11572:6;:12;;;11585:5;11572:19;;;;;;;;:::i;:::-;;;;;;;11557:40;;;11607:10;:38;;11624:7;11632:12;11624:21;;;;;;;;:::i;:::-;;;;;;;11607:38;;;11620:1;11607:38;11655:10;:38;;11692:1;11655:38;;;11668:7;11676:12;11668:21;;;;;;;;:::i;:::-;;;;;;;11655:38;11557:168;;;;;;;;;;;;;16133:25:31;;;;16174:18;;;16167:34;16249:42;16237:55;;16217:18;;;16210:83;16329:3;16309:18;;;16302:31;-1:-1:-1;16349:19:31;;;16342:30;16389:19;;11557:168:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11754:7:6;;;;;-1:-1:-1;11280:496:6;;-1:-1:-1;;;;11280:496:6;;;11782:27;11819:6;:13;;;11833:10;11819:25;;;;;;;;:::i;:::-;;;;;;;;;;;11812:58;;;;;11864:4;11812:58;;;15592:74:31;11812:43:6;;;;;;;15565:18:31;;11812:58:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11782:88;;11888:7;11913:1;11896:7;:14;:18;;;;:::i;:::-;11888:27;;;;;;;;:::i;:::-;;;;;;;11877:1;:8;;:38;;;;;12004:19;11982;:41;:103;;;-1:-1:-1;12077:8:6;;;;12055:30;;:19;:30;:::i;:::-;12033:19;:52;11982:103;11922:221;;;12107:29;;;;;;;;;;;;;;11922:221;12159:13;;:25;;12173:10;;12159:25;;;;;;:::i;:::-;;;;;;;;;;;12149:35;;:7;;;:35;-1:-1:-1;12149:7:6;;9865:2339;-1:-1:-1;;;;;;9865:2339:6:o;12754:1534::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2917:13:30;;2953:2;2944:12;2970:10;;2987:19;;;12956:38:6;;;;2917:13:30;;2953:2;2944:12;2970:10;;2987:19;;;13000:34:6;;;;:11;;;:34;13045:7;;;;:21;13041:74;;13083:25;;;;;;;;;;;;;;13041:74;13185:15;;13178:48;;;;;13220:4;13178:48;;;15592:74:31;13156:19:6;;13178:33;;;;;15565:18:31;;13178:48:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13156:70;;13233:15;13261:6;:15;;;13251:25;;:1;:7;;;:25;;;13233:43;;13283:119;13318:78;;;;;;;;13386:1;:8;;;13318:78;;;;13353:1;:7;;;13318:78;;;;;;13369:1;:7;;;13318:78;;;;;13283:27;:119::i;:::-;13413:10;13409:516;;;13477:11;;;;13554:8;;;;13462:158;;;;;13512:4;13462:158;;;17086:34:31;17163:14;;17156:22;17136:18;;;17129:50;17195:18;;;17188:34;;;;463:14:27;17238:18:31;;;17231:43;17311:3;17290:19;;;17283:32;13436:22:6;17331:19:31;;;17324:30;;;13436:22:6;13462:32;;;;;17371:19:31;;13462:158:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13433:187;;;13649:15;13648:16;;;:::i;:::-;13629:8;;;:36;-1:-1:-1;13409:516:6;;;13730:11;;;;13807:8;;;;13715:158;;;;;13765:4;13715:158;;;17086:34:31;17163:14;;17156:22;17136:18;;;17129:50;17195:18;;;17188:34;;;;644:53:27;17238:18:31;;;17231:43;17311:3;17290:19;;;17283:32;13687:22:6;17331:19:31;;;17324:30;;;13687:22:6;13715:32;;;;;17371:19:31;;13715:158:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;13686:187:6;-1:-1:-1;13901:16:6;13686:187;13901:16;:::i;:::-;13882:8;;;:36;-1:-1:-1;13409:516:6;13931:28;:26;:28::i;:::-;13995:15;;13988:48;;;;;14030:4;13988:48;;;15592:74:31;13966:19:6;;13988:33;;;;;15565:18:31;;13988:48:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13966:70;;14061:11;14047;:25;:65;;;-1:-1:-1;14104:8:6;;;;14090:22;;:11;:22;:::i;:::-;14076:11;:36;14047:65;14043:122;;;14129:29;;;;;;;;;;;;;;14043:122;-1:-1:-1;;14181:15:6;;14171:25;;:7;;;:25;-1:-1:-1;;14263:4:6;14245:7;;;:23;14171:7;12754:1534;-1:-1:-1;12754:1534:6:o;15023:2019::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15163:43:6;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;15163:43:6;15213:18;15234;:6;1250:13:30;;1286:1;1277:11;1302:10;;1319:19;;1302:10;1147:201;15234:18:6;15213:39;;;-1:-1:-1;15314:32:6;:6;15213:39;15314:20;:32::i;:::-;15298:48;;15367:32;:6;15388:10;15367:20;:32::i;:::-;15352:12;;;:47;15426:13;;15406:17;;15440:14;15453:1;15440:10;:14;:::i;:::-;15426:29;;;;;;;;:::i;:::-;;;;;;;;;;;15492:42;;;;;15528:4;15492:42;;;15592:74:31;15426:29:6;;-1:-1:-1;15462:27:6;;15492;;;;;;15565:18:31;;15492:42:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;15462:72;;15546:10;15541:1178;15566:10;15558:5;:18;15541:1178;;;15588:15;15606:10;;:47;;15629:13;;15643:9;15651:1;15643:5;:9;:::i;:::-;15629:24;;;;;;;;:::i;:::-;;;;;;;15606:47;;;15619:1;:7;;;15606:47;15588:65;;15690:6;:13;;;15704:5;15690:20;;;;;;;;:::i;:::-;;;;;;;;;;;;15680:30;;;;:7;;;:30;;;15799:78;;;;;;;;-1:-1:-1;;;15867:8:6;15799:78;;15834:7;;;;15799:78;;;;;;;;;15736:17;;;15799:78;;;;;;-1:-1:-1;15736:17:6;15762:123;;:27;:123::i;:::-;15898:5;15907:1;15898:10;15894:149;;16029:4;16011:7;;;:23;15894:149;16051:12;16066:6;:12;;;16079:5;16066:19;;;;;;;;:::i;:::-;;;;;;;16051:34;;16098:10;16094:538;;;16240:8;;;;16149:163;;;;;16194:4;16149:163;;;17086:34:31;17163:14;;17156:22;17136:18;;;17129:50;17195:18;;;17188:34;;;;463:14:27;17238:18:31;;;17231:43;17311:3;17290:19;;;17283:32;16123:22:6;17331:19:31;;;17324:30;;;16123:22:6;16149:25;;;;;;17371:19:31;;16149:163:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16120:192;;;16343:15;16342:16;;;:::i;:::-;16323:8;;;:36;-1:-1:-1;16094:538:6;;;16504:8;;;;16413:163;;;;;16458:4;16413:163;;;17086:34:31;17163:14;;17156:22;17136:18;;;17129:50;17195:18;;;17188:34;;;;644:53:27;17238:18:31;;;17231:43;17311:3;17290:19;;;17283:32;16385:22:6;17331:19:31;;;17324:30;;;16385:22:6;16413:25;;;;;;17371:19:31;;16413:163:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;16384:192:6;-1:-1:-1;16606:16:6;16384:192;16606:16;:::i;:::-;16587:8;;;:36;-1:-1:-1;16094:538:6;16640:28;:26;:28::i;:::-;-1:-1:-1;;;16697:7:6;;15541:1178;;;-1:-1:-1;16762:7:6;;;;16755:40;;;;;16789:4;16755:40;;;15592:74:31;16725:27:6;;16755:25;;;;;15565:18:31;;16755:40:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16725:70;;16884:19;16862;:41;:103;;;-1:-1:-1;16957:8:6;;;;16935:30;;:19;:30;:::i;:::-;16913:19;:52;16862:103;16802:221;;;16987:29;;;;;;;;;;;;;;16802:221;-1:-1:-1;17036:1:6;;15023:2019;-1:-1:-1;;;;;;15023:2019:6:o;17581:1708::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2917:13:30;;2953:2;2944:12;2970:10;;2987:19;;;17775:38:6;;;;2917:13:30;;2953:2;2944:12;2970:10;;2987:19;;;17819:34:6;;:11;;;:34;1250:13:30;;1286:1;1277:11;1302:10;;1319:19;;;17859:40:6;;:19;;;:40;1250:13:30;;1286:1;1277:11;1302:10;;1319:19;;;17905:41:6;;:20;;;:41;1250:13:30;;1286:1;1277:11;1302:10;;1319:19;;;17952:32:6;;:11;;;:32;1250:13:30;;1286:1;1277:11;1302:10;;1319:19;;;18010:23:6;;18032:1;18010:23;17990:17;;;:43;18092:7;;;;18134:15;;18174:7;;;;18092:21;;;;;;18134:29;;;;;18193:4;18174:24;;;18170:268;;651:36:28;18266:23:6;;;18303:7;;;;18266:23;18337:8;;;18348:7;;;;18266:90;;;;;:23;14615:15:31;;;18266:90:6;;;14597:34:31;18320:4:6;14647:18:31;;;14640:43;14719:15;;;14699:18;;;14692:43;14771:15;;14751:18;;;14744:43;18266:23:6;;;:36;;14508:19:31;;18266:90:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;18426:4:6;18408:7;;;:23;-1:-1:-1;;18170:268:6;18444:19;18466:7;:94;;18519:15;;18512:48;;;;;18554:4;18512:48;;;15592:74:31;18512:33:6;;;;;;;15565:18:31;;18512:48:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18466:94;;;18482:21;18466:94;18444:116;;18572:9;18567:132;;18641:51;18670:6;:11;;;18683:1;:8;;;18648:1;:7;;;18641:28;;;;:51;;;;;:::i;:::-;18705:367;18737:6;:11;;;18768:6;:17;;;18799:6;:11;;;18823:9;:24;;18846:1;18823:24;;;18835:1;:8;;;18823:24;18894:6;:19;;;18924:6;:20;;;18956:1;:8;;;19064:1;18863:9;:20;;;;18876:7;18863:20;18705:17;:367::i;:::-;19079:19;19101:7;:94;;19154:15;;19147:48;;;;;19189:4;19147:48;;;15592:74:31;19147:33:6;;;;;;;15565:18:31;;19147:48:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;19101:94;;;19117:21;19101:94;19212:15;;19202:25;;:7;;;:25;19079:116;-1:-1:-1;19244:25:6;19258:11;19079:116;19244:25;:::i;:::-;19233:8;;;:36;-1:-1:-1;19233:8:6;;17581:1708;-1:-1:-1;;;;;;17581:1708:6:o;23197:4071::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23404:32:6;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23404:32:6;1457:13:30;;1493:1;1484:11;1509:10;;1526:19;;;23442:39:6;;;;1250:13:30;;1286:1;1277:11;1302:10;;1319:19;;;23487:37:6;;:16;;;:37;1250:13:30;;1286:1;1277:11;1302:10;;1319:19;;;23530:37:6;;:16;;;:37;1871:13:30;;1907:1;1898:11;1923:10;;1940:19;;;23573:42:6;;:20;;;:42;;;23626:24;23622:716;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23755:14:6;;23734:35;;;;;;23797:13;;;;23777:33;;;;;;;23843:18;;;;23818:43;;;;;23892:16;;;;23869:39;;;;;24083:7;;;;24062:28;;;;2917:13:30;;2953:2;2944:12;2970:10;;2987:19;;;24098:42:6;;:19;;;:42;2497:13:30;;2533:2;2524:12;2550:10;;2567:19;;;24148:20:6;;;;:43;;;;24221:15;;;24199:37;;:19;;;:37;3130:13:30;;3166:2;3157:12;;;3190:10;;3222:16;;;;3207:32;;24244:19:6;;;:40;24309:22;;;;24244:10;;24309:22;;;:::i;:::-;;;;;;;;;;;;;;24292:14;;;:39;-1:-1:-1;23622:716:6;24359:1;:14;;;24348:25;;:1;:7;;;:25;;;24344:637;;24387:6;:14;;;:21;24412:1;24387:26;24383:498;;24764:14;;24790:7;;;;24809:13;;;;24834:8;;;;24716:156;;24764:14;24790:7;24716:156;;;24834:8;24716:36;:156::i;:::-;24705:8;;;:167;24383:498;24939:1;:7;;;24894:80;;24923:1;:14;;;24894:80;;24907:1;:14;;;24894:80;;;24948:1;:15;;;24965:1;:8;;;24894:80;;;;;;12032:25:31;;;12088:2;12073:18;;12066:34;12020:2;12005:18;;11858:248;24894:80:6;;;;;;;;24344:637;25045:59;25067:1;:16;;;25085:1;:18;;;25045:21;:59::i;:::-;25034:1;:8;;;:70;25030:124;;;25121:26;;;;;;;;;;;;;;25030:124;25197:32;;25240:7;;;;25197:32;;;;;25240:21;;25236:593;;25275:7;;;;:24;;25294:4;25275:24;25271:278;;651:36:28;25371:23:6;;;25408:7;;;;25371:23;25442:8;;;25453:7;;;;25371:90;;;;;:23;14615:15:31;;;25371:90:6;;;14597:34:31;25425:4:6;14647:18:31;;;14640:43;14719:15;;;14699:18;;;14692:43;14771:15;;14751:18;;;14744:43;25371:23:6;;;:36;;14508:19:31;;25371:90:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;25535:4:6;25517:7;;;:23;-1:-1:-1;;25271:278:6;25668:154;25706:6;:14;;;:21;25731:1;25706:26;:90;;25779:16;25706:90;;;25735:16;:31;;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;25806:8;;;;25675:7;;;;25668:28;;;:154;:28;:154::i;:::-;25846:1;25835:8;;;:12;25944:14;;;;:21;:26;:90;;26017:16;25944:90;;;25973:16;:31;;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;25921:124;;;26079:1;26060:21;;:1;:7;;;:21;;;:82;;26120:1;:22;;;26060:82;;;26095:1;:22;;;26084:1;:8;;;:33;;;;:::i;:::-;26170:17;;26207:16;;;;26243;;;;26480:8;;;;26728:18;;;;26455:4;;26480:8;26696:51;;26480:8;;26696:21;:51::i;:::-;26768:133;;;;;;;;26817:6;:20;;;26768:133;;;;26864:1;26768:133;;;;;;;;;;;;;;;;;;;27139:1;27115:6;:14;;;:21;:25;:60;;27159:1;:16;;;27115:60;;;27151:4;27115:60;27098:78;;;;;;;18510:2:31;18506:15;;;;18523:66;18502:88;18490:101;;18616:2;18607:12;;18361:264;27098:78:6;;;;;;;;;;;;;;;27194:14;;;;25921:1294;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;27247:1:6;27222:22;;;:26;-1:-1:-1;27222:22:6;;23197:4071;-1:-1:-1;;;;;;23197:4071:6:o;1276:353:25:-;1464:26;;;;1414:15;1464:26;;;1003:54;1464:26;;;;;;;;:33;;;;;;;;;;;;:47;;;;;;1519:22;:29;;;;;;:43;;;;;;1580:44;;12032:25:31;;;12073:18;;;12066:34;;;1580:44:25;;1003:54;;1464:33;:26;1580:44;;;;;;;;;1408:221;1276:353;;;;:::o;4108:223:3:-;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;:::-;4265:59;4108:223;-1:-1:-1;;;;4108:223:3:o;3253:282:30:-;3342:20;3390:5;3376:20;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3376:20:30;;3370:26;;3408:13;3403:128;3431:5;3423;:13;3403:128;;;2917:13;;2953:2;2944:12;2970:10;;2987:19;;;3448:3;3452:5;3448:10;;;;;;;;:::i;:::-;:32;;;;:10;;;;;;;;;;;:32;3509:7;;3403:128;;;;3253:282;;;;:::o;3539:265::-;3614:19;3660:5;3647:19;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3647:19:30;;3641:25;;3678:13;3673:127;3701:5;3693;:13;3673:127;;;1457:13;;1493:1;1484:11;1509:10;;1526:19;;;3718:3;3722:5;3718:10;;;;;;;;:::i;:::-;:31;;;;:10;;;;;;;;;;;:31;3778:7;;3673:127;;165:992:26;380:12;;423:13;;327:24;;380:12;409:28;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;409:28:26;;399:38;;456:8;443:7;451:1;443:10;;;;;;;;:::i;:::-;;;;;;:21;;;;;476:13;471:682;499:10;491:5;:18;471:682;;;521:14;538:6;545:5;538:13;;;;;;;;:::i;:::-;;;;;;;521:30;;559:14;576:6;583:5;591:1;583:9;;;;:::i;:::-;576:17;;;;;;;;:::i;:::-;;;;;;;559:34;;640:17;669:11;681:5;669:18;;;;;;;;:::i;:::-;;;;;;;660:6;:27;;;;:::i;:::-;640:47;;;;697:17;716:18;755:5;761;755:12;;;;;;;;:::i;:::-;;;;;;;740:40;;;:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;696:86;;;;;;;;;804:6;795:15;;:6;:15;;;791:89;;;849:10;791:89;1015:9;1004:8;:20;981:9;993:6;981:18;980:45;955:10;942:9;931:8;:20;930:35;929:97;;;;;:::i;:::-;;;-1:-1:-1;929:97:26;1073:7;1081:9;:5;1089:1;1081:9;:::i;:::-;1073:18;;;;;;;;:::i;:::-;;;;;;;;;;:29;-1:-1:-1;;1131:7:26;;;;;-1:-1:-1;471:682:26;;-1:-1:-1;;471:682:26;;;353:804;165:992;;;;;;:::o;1129:206:27:-;255:41;1203:16;;;;:21;1199:72;;1241:23;;;;;;;;;;;;;;1199:72;255:41;1277:20;;1296:1;1277:20;;;;;;;1303:27;;:16;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:206::o;1339:183::-;255:41;1388:16;;;;:21;1384:134;;1490:21;;;;;;;;;;;;;;1384:134;1339:183::o;3779:410:2:-;3894:62;;;12315:42:31;12303:55;;3894:62:2;;;12285:74:31;12375:18;;;;12368:34;;;3894:62:2;;;;;;;;;;12258:18:31;;;;3894:62:2;;;;;;;;;;3917:22;3894:62;;;3972:44;3996:5;3894:62;3972:23;:44::i;:::-;3967:216;;4059:58;;20142:42:31;20130:55;;4059:58:2;;;20112:74:31;4115:1:2;20202:18:31;;;20195:45;4032:86:2;;4052:5;;4082:22;;20085:18:31;;4059:58:2;19932:314:31;4032:86:2;4132:40;4152:5;4159:12;4132:19;:40::i;:::-;3856:333;3779:410;;;:::o;295:1591:24:-;487:4;:9;;495:1;487:9;483:1399;;510:10;506:359;;;532:155;;;;;604:10;;;;20507:2:31;20496:22;;;532:155:24;;;20478:41:31;634:10:24;;;20555:22:31;;20535:18;;;20528:50;20594:18;;;20587:34;;;20637:18;;;20630:34;;;532:41:24;;;;;;581:3;;20450:19:31;;532:155:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;483:1399;;506:359;712:144;;;;;773:10;;;;20507:2:31;20496:22;;;712:144:24;;;20478:41:31;803:10:24;;;20555:22:31;;20535:18;;;20528:50;20594:18;;;20587:34;;;20637:18;;;20630:34;;;712:30:24;;;;;;750:3;;20450:19:31;;712:144:24;20251:419:31;483:1399:24;881:4;:9;;889:1;881:9;877:1005;;904:10;900:359;;;926:155;;;;;998:10;;;;20507:2:31;20496:22;;;926:155:24;;;20478:41:31;1028:10:24;;;20555:22:31;;20535:18;;;20528:50;20594:18;;;20587:34;;;20637:18;;;20630:34;;;926:41:24;;;;;;975:3;;20450:19:31;;926:155:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;877:1005;;900:359;1106:144;;;;;1167:10;;;;20507:2:31;20496:22;;;1106:144:24;;;20478:41:31;1197:10:24;;;20555:22:31;;20535:18;;;20528:50;20594:18;;;20587:34;;;20637:18;;;20630:34;;;1106:30:24;;;;;;1144:3;;20450:19:31;;1106:144:24;20251:419:31;877:1005:24;1275:4;:9;;1283:1;1275:9;1271:611;;1298:10;1294:336;;;1320:89;;;;;1374:10;;;;1320:89;;;20906:25:31;1386:10:24;;20947:18:31;;;20940:34;20990:18;;;20983:34;;;21033:18;;;21026:34;;;1320:41:24;;;;;;1369:3;;20878:19:31;;1320:89:24;20675:391:31;1294:336:24;1428:6;1424:206;;;1446:84;;;;;1489:10;;;;1446:84;;;21324:25:31;1501:10:24;;21365:18:31;;;21358:34;21408:18;;;21401:34;;;21451:18;;;21444:34;;;1525:4:24;21494:19:31;;;21487:51;1446:30:24;;;;;;1484:3;;21296:19:31;;1446:84:24;21071:473:31;1424:206:24;1555:66;;;;;1586:10;;;;1555:66;;;20906:25:31;1598:10:24;;20947:18:31;;;20940:34;20990:18;;;20983:34;;;21033:18;;;21026:34;;;1555:30:24;;;;;;20878:19:31;;1555:66:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1271:611::-;1646:4;:9;;1654:1;1646:9;1642:240;;1669:10;1665:164;;;1698:19;;;;;;;;;;;;;;1665:164;1742:78;;;;;1785:10;;;;1742:78;;;20906:25:31;1797:10:24;;20947:18:31;;;20940:34;20990:18;;;20983:34;;;21033:18;;;21026:34;;;1742:30:24;;;;;;1780:3;;20878:19:31;;1742:78:24;20675:391:31;1642:240:24;1856:19;;;;;;;;;;;;;;1642:240;295:1591;;;;;;;;;:::o;5165:446:3:-;5330:12;5387:5;5362:21;:30;;5354:81;;;;;;;21751:2:31;5354:81:3;;;21733:21:31;21790:2;21770:18;;;21763:30;21829:34;21809:18;;;21802:62;21900:8;21880:18;;;21873:36;21926:19;;5354:81:3;21549:402:31;5354:81:3;5446:12;5460:23;5487:6;:11;;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:3:o;6339:594:2:-;6422:4;6724:12;6738:23;6773:5;6765:19;;6785:4;6765:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6723:67;;;;6819:7;:69;;;;-1:-1:-1;6831:17:2;;:22;;:56;;;6868:10;6857:30;;;;;;;;;;;;:::i;:::-;6819:107;;;;-1:-1:-1;1702:19:3;;;;:23;;6892:34:2;6800:126;6339:594;-1:-1:-1;;;;;6339:594:2:o;7671:628:3:-;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;1702:19;;;;8113:60;;;;;;;22450:2:31;8113:60:3;;;22432:21:31;22489:2;22469:18;;;22462:30;22528:31;22508:18;;;22501:59;22577:18;;8113:60:3;22248:353:31;8113:60:3;-1:-1:-1;8208:10:3;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;14:117:31:-;99:6;92:5;88:18;81:5;78:29;68:57;;121:1;118;111:12;68:57;14:117;:::o;136:132::-;203:20;;232:30;203:20;232:30;:::i;:::-;136:132;;;:::o;273:184::-;325:77;322:1;315:88;422:4;419:1;412:15;446:4;443:1;436:15;462:255;534:2;528:9;576:6;564:19;;613:18;598:34;;634:22;;;595:62;592:88;;;660:18;;:::i;:::-;696:2;689:22;462:255;:::o;722:334::-;793:2;787:9;849:2;839:13;;854:66;835:86;823:99;;952:18;937:34;;973:22;;;934:62;931:88;;;999:18;;:::i;:::-;1035:2;1028:22;722:334;;-1:-1:-1;722:334:31:o;1061:245::-;1109:4;1142:18;1134:6;1131:30;1128:56;;;1164:18;;:::i;:::-;-1:-1:-1;1221:2:31;1209:15;1226:66;1205:88;1295:4;1201:99;;1061:245::o;1311:462::-;1353:5;1406:3;1399:4;1391:6;1387:17;1383:27;1373:55;;1424:1;1421;1414:12;1373:55;1460:6;1447:20;1491:48;1507:31;1535:2;1507:31;:::i;:::-;1491:48;:::i;:::-;1564:2;1555:7;1548:19;1610:3;1603:4;1598:2;1590:6;1586:15;1582:26;1579:35;1576:55;;;1627:1;1624;1617:12;1576:55;1692:2;1685:4;1677:6;1673:17;1666:4;1657:7;1653:18;1640:55;1740:1;1715:16;;;1733:4;1711:27;1704:38;;;;1719:7;1311:462;-1:-1:-1;;;1311:462:31:o;1778:154::-;1864:42;1857:5;1853:54;1846:5;1843:65;1833:93;;1922:1;1919;1912:12;1937:134;2005:20;;2034:31;2005:20;2034:31;:::i;2076:952::-;2197:6;2205;2213;2221;2229;2237;2290:3;2278:9;2269:7;2265:23;2261:33;2258:53;;;2307:1;2304;2297:12;2258:53;2346:9;2333:23;2365:30;2389:5;2365:30;:::i;:::-;2414:5;-1:-1:-1;2470:2:31;2455:18;;2442:32;2493:18;2523:14;;;2520:34;;;2550:1;2547;2540:12;2520:34;2573:49;2614:7;2605:6;2594:9;2590:22;2573:49;:::i;:::-;2563:59;;2669:2;2658:9;2654:18;2641:32;2631:42;;2725:2;2714:9;2710:18;2697:32;2682:47;;2738:33;2763:7;2738:33;:::i;:::-;2790:7;;-1:-1:-1;2844:3:31;2829:19;;2816:33;;-1:-1:-1;2902:3:31;2887:19;;2874:33;;2919:16;;;2916:36;;;2948:1;2945;2938:12;2916:36;;2971:51;3014:7;3003:8;2992:9;2988:24;2971:51;:::i;:::-;2961:61;;;2076:952;;;;;;;;:::o;3033:125::-;3118:14;3111:5;3107:26;3100:5;3097:37;3087:65;;3148:1;3145;3138:12;3163:132;3230:20;;3259:30;3230:20;3259:30;:::i;3300:160::-;3365:5;3410:2;3401:6;3396:3;3392:16;3388:25;3385:45;;;3426:1;3423;3416:12;3385:45;-1:-1:-1;3448:6:31;3300:160;-1:-1:-1;3300:160:31:o;3465:1466::-;3589:6;3597;3650:2;3638:9;3629:7;3625:23;3621:32;3618:52;;;3666:1;3663;3656:12;3618:52;3706:9;3693:23;3735:18;3776:2;3768:6;3765:14;3762:34;;;3792:1;3789;3782:12;3762:34;3815:22;;;;3871:6;3853:16;;;3849:29;3846:49;;;3891:1;3888;3881:12;3846:49;3917:22;;:::i;:::-;3962;3981:2;3962:22;:::i;:::-;3955:5;3948:37;4017:30;4043:2;4039;4035:11;4017:30;:::i;:::-;4012:2;4005:5;4001:14;3994:54;4080:30;4106:2;4102;4098:11;4080:30;:::i;:::-;4075:2;4068:5;4064:14;4057:54;4143:31;4170:2;4166;4162:11;4143:31;:::i;:::-;4138:2;4131:5;4127:14;4120:55;4208:32;4235:3;4231:2;4227:12;4208:32;:::i;:::-;4202:3;4195:5;4191:15;4184:57;4274:32;4301:3;4297:2;4293:12;4274:32;:::i;:::-;4268:3;4261:5;4257:15;4250:57;4361:3;4357:2;4353:12;4340:26;4334:3;4327:5;4323:15;4316:51;4421:3;4417:2;4413:12;4400:26;4394:3;4387:5;4383:15;4376:51;4446:3;4481:30;4507:2;4503;4499:11;4481:30;:::i;:::-;4465:14;;;4458:54;4531:3;4572:11;;;4559:25;4596:16;;;4593:36;;;4625:1;4622;4615:12;4593:36;4661:44;4697:7;4686:8;4682:2;4678:17;4661:44;:::i;:::-;4656:2;4649:5;4645:14;4638:68;;;4725:5;4715:15;;;4783:2;4772:9;4768:18;4755:32;4739:48;;4812:2;4802:8;4799:16;4796:36;;;4828:1;4825;4818:12;4796:36;;4851:74;4917:7;4906:8;4895:9;4891:24;4851:74;:::i;:::-;4841:84;;;3465:1466;;;;;:::o;4936:138::-;5015:13;;5037:31;5015:13;5037:31;:::i;5079:136::-;5157:13;;5179:30;5157:13;5179:30;:::i;5220:136::-;5298:13;;5320:30;5298:13;5320:30;:::i;5361:250::-;5446:1;5456:113;5470:6;5467:1;5464:13;5456:113;;;5546:11;;;5540:18;5527:11;;;5520:39;5492:2;5485:10;5456:113;;;-1:-1:-1;;5603:1:31;5585:16;;5578:27;5361:250::o;5616:441::-;5669:5;5722:3;5715:4;5707:6;5703:17;5699:27;5689:55;;5740:1;5737;5730:12;5689:55;5769:6;5763:13;5800:48;5816:31;5844:2;5816:31;:::i;5800:48::-;5873:2;5864:7;5857:19;5919:3;5912:4;5907:2;5899:6;5895:15;5891:26;5888:35;5885:55;;;5936:1;5933;5926:12;5885:55;5949:77;6023:2;6016:4;6007:7;6003:18;5996:4;5988:6;5984:17;5949:77;:::i;6062:1293::-;6156:6;6209:2;6197:9;6188:7;6184:23;6180:32;6177:52;;;6225:1;6222;6215:12;6177:52;6258:9;6252:16;6287:18;6328:2;6320:6;6317:14;6314:34;;;6344:1;6341;6334:12;6314:34;6367:22;;;;6423:6;6405:16;;;6401:29;6398:49;;;6443:1;6440;6433:12;6398:49;6469:22;;:::i;:::-;6514:33;6544:2;6514:33;:::i;:::-;6507:5;6500:48;6580:41;6617:2;6613;6609:11;6580:41;:::i;:::-;6575:2;6568:5;6564:14;6557:65;6654:41;6691:2;6687;6683:11;6654:41;:::i;:::-;6649:2;6642:5;6638:14;6631:65;6728:42;6766:2;6762;6758:11;6728:42;:::i;:::-;6723:2;6716:5;6712:14;6705:66;6804:43;6842:3;6838:2;6834:12;6804:43;:::i;:::-;6798:3;6791:5;6787:15;6780:68;6881:43;6919:3;6915:2;6911:12;6881:43;:::i;:::-;6875:3;6868:5;6864:15;6857:68;6972:3;6968:2;6964:12;6958:19;6952:3;6945:5;6941:15;6934:44;7025:3;7021:2;7017:12;7011:19;7005:3;6998:5;6994:15;6987:44;7050:3;7085:41;7122:2;7118;7114:11;7085:41;:::i;:::-;7069:14;;;7062:65;7146:3;7180:11;;;7174:18;7204:16;;;7201:36;;;7233:1;7230;7223:12;7201:36;7269:55;7316:7;7305:8;7301:2;7297:17;7269:55;:::i;:::-;7253:14;;;7246:79;;;;-1:-1:-1;7257:5:31;6062:1293;-1:-1:-1;;;;;6062:1293:31:o;7690:329::-;7731:3;7769:5;7763:12;7796:6;7791:3;7784:19;7812:76;7881:6;7874:4;7869:3;7865:14;7858:4;7851:5;7847:16;7812:76;:::i;:::-;7933:2;7921:15;7938:66;7917:88;7908:98;;;;8008:4;7904:109;;7690:329;-1:-1:-1;;7690:329:31:o;8024:1111::-;8135:12;;7437:42;7426:54;7414:67;;8073:3;8101:6;8199:4;8192:5;8188:16;8182:23;8214:47;8255:4;8250:3;8246:14;8232:12;7568:6;7557:18;7545:31;;7492:90;8214:47;;8309:4;8302:5;8298:16;8292:23;8324:49;8367:4;8362:3;8358:14;8342;7568:6;7557:18;7545:31;;7492:90;8324:49;;8421:4;8414:5;8410:16;8404:23;8436:50;8480:4;8475:3;8471:14;8455;7437:42;7426:54;7414:67;;7360:127;8436:50;;8534:4;8527:5;8523:16;8517:23;8549:50;8593:4;8588:3;8584:14;8568;7437:42;7426:54;7414:67;;7360:127;8549:50;;8647:4;8640:5;8636:16;8630:23;8662:50;8706:4;8701:3;8697:14;8681;7437:42;7426:54;7414:67;;7360:127;8662:50;;8761:4;8754:5;8750:16;8744:23;8737:4;8732:3;8728:14;8721:47;8817:4;8810:5;8806:16;8800:23;8793:4;8788:3;8784:14;8777:47;8843:6;8897:2;8890:5;8886:14;8880:21;8910:47;8953:2;8948:3;8944:12;8928:14;7663;7652:26;7640:39;;7587:98;8910:47;;;8976:6;9030:2;9023:5;9019:14;9013:21;9064:2;9059;9054:3;9050:12;9043:24;9083:46;9125:2;9120:3;9116:12;9100:14;9083:46;:::i;:::-;9076:53;8024:1111;-1:-1:-1;;;;;;8024:1111:31:o;9140:597::-;9405:2;9394:9;9387:21;9368:4;9431:52;9479:2;9468:9;9464:18;9456:6;9431:52;:::i;:::-;9531:9;9523:6;9519:22;9514:2;9503:9;9499:18;9492:50;9572:6;9566:13;9558:6;9551:29;9627:2;9619:6;9615:15;9609:22;9664:2;9659;9651:6;9647:15;9640:27;9684:47;9727:2;9719:6;9715:15;9701:12;9684:47;:::i;9742:184::-;9794:77;9791:1;9784:88;9891:4;9888:1;9881:15;9915:4;9912:1;9905:15;9931:128;9998:9;;;10019:11;;;10016:37;;;10033:18;;:::i;10064:580::-;10141:4;10147:6;10207:11;10194:25;10297:66;10286:8;10270:14;10266:29;10262:102;10242:18;10238:127;10228:155;;10379:1;10376;10369:12;10228:155;10406:33;;10458:20;;;-1:-1:-1;10501:18:31;10490:30;;10487:50;;;10533:1;10530;10523:12;10487:50;10566:4;10554:17;;-1:-1:-1;10597:14:31;10593:27;;;10583:38;;10580:58;;;10634:1;10631;10624:12;10580:58;10064:580;;;;;:::o;10649:1204::-;10885:4;10914:3;10936:42;11017:2;11009:6;11005:15;10994:9;10987:34;11046:6;11040:13;11104:2;11099;11093:9;11089:18;11084:2;11073:9;11069:18;11062:46;11168:2;11162;11158;11154:11;11148:18;11144:27;11139:2;11128:9;11124:18;11117:55;11215:2;11211;11207:11;11201:18;11238:14;11306:2;11292:12;11288:21;11283:2;11272:9;11268:18;11261:49;11371:2;11365;11361;11357:11;11351:18;11347:27;11341:3;11330:9;11326:19;11319:56;;;;11440:2;11434;11426:6;11422:15;11416:22;11412:31;11406:3;11395:9;11391:19;11384:60;;11499:2;11491:6;11487:15;11481:22;11475:3;11464:9;11460:19;11453:51;11541:2;11535:3;11524:9;11520:19;11513:31;11580:6;11575:2;11564:9;11560:18;11553:34;;11606:3;11659:6;11651;11646:2;11635:9;11631:18;11618:48;11715:1;11686:22;;;11682:31;;11675:42;11769:2;11757:15;;;11774:66;11753:88;11738:104;;;11734:113;;;;10649:1204;-1:-1:-1;;;;10649:1204:31:o;12413:195::-;12452:3;12483:66;12476:5;12473:77;12470:103;;12553:18;;:::i;:::-;-1:-1:-1;12600:1:31;12589:13;;12413:195::o;12613:171::-;12681:6;12720:10;;;12708;;;12704:27;;12743:12;;;12740:38;;;12758:18;;:::i;12789:168::-;12862:9;;;12893;;12910:15;;;12904:22;;12890:37;12880:71;;12931:18;;:::i;12962:184::-;13014:77;13011:1;13004:88;13111:4;13108:1;13101:15;13135:4;13132:1;13125:15;13151:274;13191:1;13217;13207:189;;13252:77;13249:1;13242:88;13353:4;13350:1;13343:15;13381:4;13378:1;13371:15;13207:189;-1:-1:-1;13410:9:31;;13151:274::o;13612:277::-;13679:6;13732:2;13720:9;13711:7;13707:23;13703:32;13700:52;;;13748:1;13745;13738:12;13700:52;13780:9;13774:16;13833:5;13826:13;13819:21;13812:5;13809:32;13799:60;;13855:1;13852;13845:12;14798:188;14877:13;;14930:30;14919:42;;14909:53;;14899:81;;14976:1;14973;14966:12;14991:450;15078:6;15086;15094;15147:2;15135:9;15126:7;15122:23;15118:32;15115:52;;;15163:1;15160;15153:12;15115:52;15186:40;15216:9;15186:40;:::i;:::-;15176:50;;15245:49;15290:2;15279:9;15275:18;15245:49;:::i;:::-;15235:59;;15337:2;15326:9;15322:18;15316:25;15381:10;15374:5;15370:22;15363:5;15360:33;15350:61;;15407:1;15404;15397:12;15350:61;15430:5;15420:15;;;14991:450;;;;;:::o;15677:184::-;15747:6;15800:2;15788:9;15779:7;15775:23;15771:32;15768:52;;;15816:1;15813;15806:12;15768:52;-1:-1:-1;15839:16:31;;15677:184;-1:-1:-1;15677:184:31:o;16419:125::-;16484:9;;;16505:10;;;16502:36;;;16518:18;;:::i;16549:184::-;16601:77;16598:1;16591:88;16698:4;16695:1;16688:15;16722:4;16719:1;16712:15;17401:243;17478:6;17486;17539:2;17527:9;17518:7;17514:23;17510:32;17507:52;;;17555:1;17552;17545:12;17507:52;-1:-1:-1;;17578:16:31;;17634:2;17619:18;;;17613:25;17578:16;;17613:25;;-1:-1:-1;17401:243:31:o;17649:191::-;17684:3;17715:66;17708:5;17705:77;17702:103;;17785:18;;:::i;:::-;-1:-1:-1;17825:1:31;17821:13;;17649:191::o;17845:255::-;18022:2;18011:9;18004:21;17985:4;18042:52;18090:2;18079:9;18075:18;18067:6;18042:52;:::i;18105:251::-;18175:6;18228:2;18216:9;18207:7;18203:23;18199:32;18196:52;;;18244:1;18241;18234:12;18196:52;18276:9;18270:16;18295:31;18320:5;18295:31;:::i;18630:1297::-;19046:4;19075:3;19117:6;19109;19105:19;19094:9;19087:38;19161:6;19156:2;19145:9;19141:18;19134:34;19204:6;19199:2;19188:9;19184:18;19177:34;19259:42;19251:6;19247:55;19242:2;19231:9;19227:18;19220:83;19340:6;19334:3;19323:9;19319:19;19312:35;19384:6;19378:3;19367:9;19363:19;19356:35;19428:2;19422:3;19411:9;19407:19;19400:31;19473:6;19467:13;19462:2;19451:9;19447:18;19440:41;;19536:2;19528:6;19524:15;19518:22;19512:3;19501:9;19497:19;19490:51;19588:2;19580:6;19576:15;19570:22;19629:2;19623:3;19612:9;19608:19;19601:31;19652:51;19698:3;19687:9;19683:19;19669:12;19652:51;:::i;:::-;19641:62;;19749:9;19744:3;19740:19;19734:3;19723:9;19719:19;19712:48;19783:29;19808:3;19800:6;19783:29;:::i;:::-;19769:43;;19861:9;19853:6;19849:22;19843:3;19832:9;19828:19;19821:51;19889:32;19914:6;19906;19889:32;:::i;:::-;19881:40;18630:1297;-1:-1:-1;;;;;;;;;;;;18630:1297:31:o;21956:287::-;22085:3;22123:6;22117:13;22139:66;22198:6;22193:3;22186:4;22178:6;22174:17;22139:66;:::i;:::-;22221:16;;;;;21956:287;-1:-1:-1;;21956:287:31:o;22606:219::-;22755:2;22744:9;22737:21;22718:4;22775:44;22815:2;22804:9;22800:18;22792:6;22775:44;:::i"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "4300800",
            "executionCost": "4965",
            "totalCost": "4305765"
          },
          "external": {
            "sgReceive(uint16,bytes,uint256,address,uint256,bytes)": "infinite",
            "warpLinkEngage((address,uint16,uint16,address,address,address,uint256,uint256,uint48,bytes),(uint256,bytes))": "infinite"
          },
          "internal": {
            "engageInternal(uint256,struct WarpLink.TransientState memory)": "infinite",
            "processJumpStargate(uint256,struct WarpLink.TransientState memory)": "infinite",
            "processSplit(uint256,struct WarpLink.TransientState memory)": "infinite",
            "processUnwrap(struct WarpLink.TransientState memory)": "infinite",
            "processWarpCurveExactInputSingle(uint256,struct WarpLink.TransientState memory)": "infinite",
            "processWarpUniV2LikeExactInput(uint256,struct WarpLink.TransientState memory)": "infinite",
            "processWarpUniV2LikeExactInputSingle(uint256,struct WarpLink.TransientState memory)": "infinite",
            "processWarpUniV3LikeExactInput(uint256,struct WarpLink.TransientState memory)": "infinite",
            "processWarpUniV3LikeExactInputSingle(uint256,struct WarpLink.TransientState memory)": "infinite",
            "processWrap(struct WarpLink.TransientState memory)": "infinite"
          }
        },
        "methodIdentifiers": {
          "sgReceive(uint16,bytes,uint256,address,uint256,bytes)": "ab8236f3",
          "warpLinkEngage((address,uint16,uint16,address,address,address,uint256,uint256,uint48,bytes),(uint256,bytes))": "dc7b39db"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CallbackAlreadyActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallbackAlreadyActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallbackStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallbackStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFeeBps\",\"type\":\"uint256\"}],\"name\":\"FeeTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFeeBps\",\"type\":\"uint256\"}],\"name\":\"FeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalJumpInSplit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPartPayerOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPartTokenOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmountRemaining\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientEthValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientTokensDelivered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSgReceiveSrcAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSgReceiverSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JumpMustBeLastCommand\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTokenNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughParts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedPayerForWrap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedTokenForUnwrap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedTokenForWrap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedTokenOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnhandledCommand\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnhandledPoolKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnhandledPoolKind\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Warp\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"slippageBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"commands\",\"type\":\"bytes\"}],\"internalType\":\"struct IWarpLink.Params\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PermitParams\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"warpLinkEngage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"FeeTooHigh(uint256)\":[{\"notice\":\"The swap fee is over the maximum allowed\"},{\"notice\":\"The swap fee is over the maximum allowed\"}]},\"kind\":\"user\",\"methods\":{\"sgReceive(uint16,bytes,uint256,address,uint256,bytes)\":{\"notice\":\"Cross-chain callback from Stargate The tokens have already been received by this contract, `t.payer` is set to this contract before `sgReceive` is called by the router. The `_nonce` field is not checked since it's assumed that LayerZero will not deliver the same message more than once. The Stargate composer is trusted, meaning `_token` and `amountLD` is not verified. Should the Stargate composer be compromised, an attacker can drain this contract. If the payload can not be decoded, tokens are left in this contract. If execution runs out of gas, tokens are left in this contract. If an error occurs during engage, such as insufficient output amount, tokens are refunded to the recipient. See https://stargateprotocol.gitbook.io/stargate/interfaces/evm-solidity-interfaces/istargatereceiver.sol\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/WarpLink.sol\":\"WarpLink\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@openzeppelin/=@openzeppelin/\",\":@uniswap/=@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=hardhat-deploy/\",\":hardhat/=hardhat/\",\":solidity-stringutils/=lib/solidity-stringutils/src/\"]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0xfc10758fd8dba790c39468dccd358cb7cef06ae7c4781832cc7aa76f91f167e6\"},\"contracts/facets/WarpLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {LibWarp} from '../libraries/LibWarp.sol';\\nimport {LibStarVault} from '../libraries/LibStarVault.sol';\\nimport {Stream} from '../libraries/Stream.sol';\\nimport {LibUniV2Like} from '../libraries/LibUniV2Like.sol';\\nimport {IUniswapV2Pair} from '../interfaces/external/IUniswapV2Pair.sol';\\nimport {IWarpLink} from '../interfaces/IWarpLink.sol';\\nimport {LibUniV3Like} from '../libraries/LibUniV3Like.sol';\\nimport {IUniV3Callback} from '../interfaces/IUniV3Callback.sol';\\nimport {IUniswapV3Pool} from '../interfaces/external/IUniswapV3Pool.sol';\\nimport {LibCurve} from '../libraries/LibCurve.sol';\\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\\nimport {IAllowanceTransfer} from '../interfaces/external/IAllowanceTransfer.sol';\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\nimport {IStargateRouter} from '../interfaces/external/IStargateRouter.sol';\\nimport {IStargateReceiver} from '../interfaces/external/IStargateReceiver.sol';\\nimport {IStargateComposer} from '../interfaces/external/IStargateComposer.sol';\\n\\nabstract contract WarpLinkCommandTypes {\\n  uint256 internal constant COMMAND_TYPE_WRAP = 1;\\n  uint256 internal constant COMMAND_TYPE_UNWRAP = 2;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT_SINGLE = 3;\\n  uint256 internal constant COMMAND_TYPE_SPLIT = 4;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT = 5;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT_SINGLE = 6;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT = 7;\\n  uint256 internal constant COMMAND_TYPE_WARP_CURVE_EXACT_INPUT_SINGLE = 8;\\n  uint256 internal constant COMMAND_TYPE_JUMP_STARGATE = 9;\\n}\\n\\ncontract WarpLink is IWarpLink, IStargateReceiver, WarpLinkCommandTypes {\\n  using SafeERC20 for IERC20;\\n  using Stream for uint256;\\n\\n  struct WarpUniV2LikeWarpSingleParams {\\n    address tokenOut;\\n    address pool;\\n    bool zeroForOne; // tokenIn < tokenOut\\n    uint16 poolFeeBps;\\n  }\\n\\n  struct WarpUniV2LikeExactInputParams {\\n    // NOTE: Excluding the first token\\n    address[] tokens;\\n    address[] pools;\\n    uint16[] poolFeesBps;\\n  }\\n\\n  struct WarpUniV3LikeExactInputSingleParams {\\n    address tokenOut;\\n    address pool;\\n    bool zeroForOne; // tokenIn < tokenOut\\n    uint16 poolFeeBps;\\n  }\\n\\n  struct WarpCurveExactInputSingleParams {\\n    address tokenOut;\\n    address pool;\\n    uint8 tokenIndexIn;\\n    uint8 tokenIndexOut;\\n    uint8 kind;\\n    bool underlying;\\n  }\\n\\n  struct JumpStargateParams {\\n    uint16 dstChainId;\\n    uint256 srcPoolId;\\n    uint256 dstPoolId;\\n    uint256 dstGasForCall;\\n    bytes payload;\\n  }\\n\\n  struct TransientState {\\n    address paramPartner;\\n    uint16 paramFeeBps;\\n    address paramRecipient;\\n    address paramTokenIn;\\n    uint256 paramAmountIn;\\n    uint256 paramAmountOut;\\n    uint16 paramSlippageBps;\\n    uint48 paramDeadline;\\n    uint256 amount;\\n    address payer;\\n    address token;\\n    /**\\n     * 0 or 1\\n     */\\n    uint256 jumped;\\n    /**\\n     * The amount of native value not spent. The native value starts off as\\n     * `msg.value - params.amount` and is decreased by spending money on jumps.\\n     *\\n     * Any leftover native value is returned to `msg.sender`\\n     */\\n    uint256 nativeValueRemaining;\\n  }\\n\\n  function processSplit(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    uint256 parts = stream.readUint8();\\n    uint256 amountRemaining = t.amount;\\n    uint256 amountOutSum;\\n\\n    if (parts < 2) {\\n      revert NotEnoughParts();\\n    }\\n\\n    // Store the token out for the previous part to ensure every part has the same output token\\n    address firstPartTokenOut;\\n    address firstPartPayerOut;\\n\\n    for (uint256 partIndex; partIndex < parts; ) {\\n      // TODO: Unchecked?\\n      // For the last part, use the remaining amount. Else read the % from the stream\\n      uint256 partAmount = partIndex < parts - 1\\n        ? (t.amount * stream.readUint16()) / 10_000\\n        : amountRemaining;\\n\\n      if (partAmount > amountRemaining) {\\n        revert InsufficientAmountRemaining();\\n      }\\n\\n      amountRemaining -= partAmount;\\n\\n      TransientState memory tPart;\\n\\n      tPart.amount = partAmount;\\n      tPart.payer = t.payer;\\n      tPart.token = t.token;\\n\\n      tPart = engageInternal(stream, tPart);\\n\\n      if (tPart.jumped == 1) {\\n        revert IllegalJumpInSplit();\\n      }\\n\\n      if (partIndex == 0) {\\n        firstPartPayerOut = tPart.payer;\\n        firstPartTokenOut = tPart.token;\\n      } else {\\n        if (tPart.token != firstPartTokenOut) {\\n          revert InconsistentPartTokenOut();\\n        }\\n\\n        if (tPart.payer != firstPartPayerOut) {\\n          revert InconsistentPartPayerOut();\\n        }\\n      }\\n\\n      // NOTE: Checked\\n      amountOutSum += tPart.amount;\\n\\n      unchecked {\\n        partIndex++;\\n      }\\n    }\\n\\n    t.payer = firstPartPayerOut;\\n    t.token = firstPartTokenOut;\\n    t.amount = amountOutSum;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Wrap ETH into WETH using the WETH contract\\n   *\\n   * The ETH must already be in this contract\\n   *\\n   * The next token will be WETH, with the amount and payer unchanged\\n   */\\n  function processWrap(TransientState memory t) internal returns (TransientState memory) {\\n    LibWarp.State storage s = LibWarp.state();\\n\\n    if (t.token != address(0)) {\\n      revert UnexpectedTokenForWrap();\\n    }\\n\\n    if (t.payer != address(this)) {\\n      // It's not possible to move a user's ETH\\n      revert UnexpectedPayerForWrap();\\n    }\\n\\n    t.token = address(s.weth);\\n\\n    s.weth.deposit{value: t.amount}();\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Unwrap WETH into ETH using the WETH contract\\n   *\\n   * The payer can be the sender or this contract. After this operation, the\\n   * token will be ETH (0) and the amount will be unchanged. The next payer\\n   * will be this contract.\\n   */\\n  function processUnwrap(TransientState memory t) internal returns (TransientState memory) {\\n    LibWarp.State storage s = LibWarp.state();\\n\\n    if (t.token != address(s.weth)) {\\n      revert UnexpectedTokenForUnwrap();\\n    }\\n\\n    address prevPayer = t.payer;\\n    bool shouldMoveTokensFirst = prevPayer != address(this);\\n\\n    if (shouldMoveTokensFirst) {\\n      t.payer = address(this);\\n    }\\n\\n    t.token = address(0);\\n\\n    if (shouldMoveTokensFirst) {\\n      s.permit2.transferFrom(prevPayer, address(this), (uint160)(t.amount), address(s.weth));\\n    }\\n\\n    s.weth.withdraw(t.amount);\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Uniswap V2-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *   - tokenOut (address)\\n   *   - pool (address)\\n   *   - zeroForOne (0 or 1, uint8)\\n   *   - poolFeeBps (uint16)\\n   */\\n  function processWarpUniV2LikeExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    if (t.token == address(0)) {\\n      revert NativeTokenNotSupported();\\n    }\\n\\n    WarpUniV2LikeWarpSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n    params.zeroForOne = stream.readUint8() == 1;\\n    params.poolFeeBps = stream.readUint16();\\n\\n    if (t.payer == address(this)) {\\n      // Transfer tokens to the pool\\n      IERC20(t.token).safeTransfer(params.pool, t.amount);\\n    } else {\\n      // Transfer tokens from the sender to the pool\\n      LibWarp.state().permit2.transferFrom(t.payer, params.pool, (uint160)(t.amount), t.token);\\n\\n      // Update the payer to this contract\\n      t.payer = address(this);\\n    }\\n\\n    (uint256 reserveIn, uint256 reserveOut, ) = IUniswapV2Pair(params.pool).getReserves();\\n\\n    if (!params.zeroForOne) {\\n      // Token in > token out\\n      (reserveIn, reserveOut) = (reserveOut, reserveIn);\\n    }\\n\\n    unchecked {\\n      // For 30 bps, multiply by 997\\n      uint256 feeFactor = 10_000 - params.poolFeeBps;\\n\\n      t.amount =\\n        ((t.amount * feeFactor) * reserveOut) /\\n        ((reserveIn * 10_000) + (t.amount * feeFactor));\\n    }\\n\\n    // NOTE: This check can be avoided if the factory is trusted\\n    uint256 balancePrev = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    IUniswapV2Pair(params.pool).swap(\\n      params.zeroForOne ? 0 : t.amount,\\n      params.zeroForOne ? t.amount : 0,\\n      address(this),\\n      ''\\n    );\\n\\n    uint256 balanceNext = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (balanceNext < balancePrev || balanceNext < balancePrev + t.amount) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    t.token = params.tokenOut;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp multiple tokens in a series of Uniswap V2-like pools\\n   *\\n   * Since the pools are not trusted, the balance of `params.tokenOut` is checked\\n   * before the first swap and after the last swap to ensure the correct amount\\n   * was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the last swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - pool length (uint8)\\n   *  - tokens (address 0, address 1, address pool length - 1) excluding the first\\n   *  - pools (address 0, address 1, address pool length - 1)\\n   *  - pool fees (uint16 0, uint16 1, uint16 pool length - 1)\\n   */\\n  function processWarpUniV2LikeExactInput(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV2LikeExactInputParams memory params;\\n\\n    uint256 poolLength = stream.readUint8();\\n\\n    params.tokens = new address[](poolLength + 1);\\n\\n    // The params will contain all tokens including the first to remain compatible\\n    // with the LibUniV2Like library's getAmountsOut function\\n    params.tokens[0] = t.token;\\n\\n    for (uint256 index; index < poolLength; ) {\\n      params.tokens[index + 1] = stream.readAddress();\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    params.pools = stream.readAddresses(poolLength);\\n    params.poolFeesBps = stream.readUint16s(poolLength);\\n\\n    uint256 tokenOutBalancePrev = IERC20(params.tokens[poolLength]).balanceOf(address(this));\\n\\n    uint256[] memory amounts = LibUniV2Like.getAmountsOut(\\n      params.poolFeesBps,\\n      t.amount,\\n      params.tokens,\\n      params.pools\\n    );\\n\\n    if (t.payer == address(this)) {\\n      // Transfer tokens from this contract to the first pool\\n      IERC20(t.token).safeTransfer(params.pools[0], t.amount);\\n    } else {\\n      // Transfer tokens from the sender to the first pool\\n      LibWarp.state().permit2.transferFrom(t.payer, params.pools[0], (uint160)(t.amount), t.token);\\n\\n      // Update the payer to this contract\\n      t.payer = address(this);\\n    }\\n\\n    // Same as UniV2Like\\n    for (uint index; index < poolLength; ) {\\n      uint256 indexPlusOne = index + 1;\\n      bool zeroForOne = params.tokens[index] < params.tokens[indexPlusOne] ? true : false;\\n      address to = index < params.tokens.length - 2 ? params.pools[indexPlusOne] : address(this);\\n\\n      IUniswapV2Pair(params.pools[index]).swap(\\n        zeroForOne ? 0 : amounts[indexPlusOne],\\n        zeroForOne ? amounts[indexPlusOne] : 0,\\n        to,\\n        ''\\n      );\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    uint256 nextTokenOutBalance = IERC20(params.tokens[poolLength]).balanceOf(address(this));\\n\\n    t.amount = amounts[amounts.length - 1];\\n\\n    if (\\n      // TOOD: Is this overflow check necessary?\\n      nextTokenOutBalance < tokenOutBalancePrev ||\\n      nextTokenOutBalance < tokenOutBalancePrev + t.amount\\n    ) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    t.token = params.tokens[poolLength];\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Uniswap V3-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - tokenOut (address)\\n   *  - pool (address)\\n   */\\n  function processWarpUniV3LikeExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV3LikeExactInputSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n\\n    if (t.token == address(0)) {\\n      revert NativeTokenNotSupported();\\n    }\\n\\n    // NOTE: The pool is untrusted\\n    uint256 balancePrev = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    bool zeroForOne = t.token < params.tokenOut;\\n\\n    LibUniV3Like.beforeCallback(\\n      LibUniV3Like.CallbackState({payer: t.payer, token: t.token, amount: t.amount})\\n    );\\n\\n    if (zeroForOne) {\\n      (, int256 amountOutSigned) = IUniswapV3Pool(params.pool).swap(\\n        address(this),\\n        zeroForOne,\\n        int256(t.amount),\\n        LibUniV3Like.MIN_SQRT_RATIO,\\n        ''\\n      );\\n\\n      t.amount = uint256(-amountOutSigned);\\n    } else {\\n      (int256 amountOutSigned, ) = IUniswapV3Pool(params.pool).swap(\\n        address(this),\\n        zeroForOne,\\n        int256(t.amount),\\n        LibUniV3Like.MAX_SQRT_RATIO,\\n        ''\\n      );\\n\\n      t.amount = uint256(-amountOutSigned);\\n    }\\n\\n    LibUniV3Like.afterCallback();\\n\\n    uint256 balanceNext = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (balanceNext < balancePrev || balanceNext < balancePrev + t.amount) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    t.token = params.tokenOut;\\n\\n    // TODO: Compare check-and-set vs set\\n    t.payer = address(this);\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp multiple tokens in a series of Uniswap V3-like pools\\n   *\\n   * Since the pools are not trusted, the balance of `params.tokenOut` is checked\\n   * before the first swap and after the last swap to ensure the correct amount\\n   * was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the last swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - pool length (uint8)\\n   *  - tokens (address 0, address 1, address pool length - 1) excluding the first\\n   *  - pools (address 0, address 1, address pool length - 1)\\n   */\\n  function processWarpUniV3LikeExactInput(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV2LikeExactInputParams memory params;\\n\\n    uint256 poolLength = stream.readUint8();\\n\\n    // The first token is not included\\n    params.tokens = stream.readAddresses(poolLength);\\n    params.pools = stream.readAddresses(poolLength);\\n\\n    address lastToken = params.tokens[poolLength - 1];\\n\\n    uint256 tokenOutBalancePrev = IERC20(lastToken).balanceOf(address(this));\\n\\n    for (uint index; index < poolLength; ) {\\n      address tokenIn = index == 0 ? t.token : params.tokens[index - 1]; // TOOD: unchecked\\n      t.token = params.tokens[index];\\n      bool zeroForOne = tokenIn < t.token;\\n\\n      LibUniV3Like.beforeCallback(\\n        LibUniV3Like.CallbackState({payer: t.payer, token: tokenIn, amount: t.amount})\\n      );\\n\\n      if (index == 0) {\\n        // Update the payer to this contract\\n        // TODO: Compare check-and-set vs set\\n        t.payer = address(this);\\n      }\\n\\n      address pool = params.pools[index];\\n\\n      if (zeroForOne) {\\n        (, int256 amountOutSigned) = IUniswapV3Pool(pool).swap(\\n          address(this),\\n          zeroForOne,\\n          int256(t.amount),\\n          LibUniV3Like.MIN_SQRT_RATIO,\\n          ''\\n        );\\n\\n        t.amount = uint256(-amountOutSigned);\\n      } else {\\n        (int256 amountOutSigned, ) = IUniswapV3Pool(pool).swap(\\n          address(this),\\n          zeroForOne,\\n          int256(t.amount),\\n          LibUniV3Like.MAX_SQRT_RATIO,\\n          ''\\n        );\\n\\n        t.amount = uint256(-amountOutSigned);\\n      }\\n\\n      LibUniV3Like.afterCallback();\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    uint256 nextTokenOutBalance = IERC20(t.token).balanceOf(address(this));\\n\\n    if (\\n      // TOOD: Is this overflow check necessary?\\n      nextTokenOutBalance < tokenOutBalancePrev ||\\n      nextTokenOutBalance < tokenOutBalancePrev + t.amount\\n    ) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Curve-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token may be ETH (0)\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - tokenOut (address)\\n   *  - pool (address)\\n   */\\n  function processWarpCurveExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpCurveExactInputSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n    params.tokenIndexIn = stream.readUint8();\\n    params.tokenIndexOut = stream.readUint8();\\n    params.kind = stream.readUint8();\\n    params.underlying = stream.readUint8() == 1;\\n\\n    // NOTE: The pool is untrusted\\n    bool isFromEth = t.token == address(0);\\n    bool isToEth = params.tokenOut == address(0);\\n\\n    if (t.payer != address(this)) {\\n      // Transfer tokens from the sender to this contract\\n      LibWarp.state().permit2.transferFrom(t.payer, address(this), (uint160)(t.amount), t.token);\\n\\n      // Update the payer to this contract\\n      t.payer = address(this);\\n    }\\n\\n    uint256 balancePrev = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (!isFromEth) {\\n      // TODO: Is this necessary to support USDT?\\n      IERC20(t.token).forceApprove(params.pool, t.amount);\\n    }\\n\\n    LibCurve.exchange({\\n      kind: params.kind,\\n      underlying: params.underlying,\\n      pool: params.pool,\\n      eth: isFromEth ? t.amount : 0,\\n      useEth: isFromEth || isToEth,\\n      i: params.tokenIndexIn,\\n      j: params.tokenIndexOut,\\n      dx: t.amount,\\n      // NOTE: There is no need to set a min out since the balance will be verified\\n      min_dy: 0\\n    });\\n\\n    uint256 balanceNext = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    t.token = params.tokenOut;\\n    t.amount = balanceNext - balancePrev;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Cross-chain callback from Stargate\\n   *\\n   * The tokens have already been received by this contract, `t.payer` is set to this contract\\n   * before `sgReceive` is called by the router.\\n   *\\n   * The `_nonce` field is not checked since it's assumed that LayerZero will not deliver the\\n   * same message more than once.\\n   *\\n   * The Stargate composer is trusted, meaning `_token` and `amountLD` is not verified. Should the\\n   * Stargate composer be compromised, an attacker can drain this contract.\\n   *\\n   * If the payload can not be decoded, tokens are left in this contract.\\n   * If execution runs out of gas, tokens are left in this contract.\\n   *\\n   * If an error occurs during engage, such as insufficient output amount, tokens are refunded\\n   * to the recipient.\\n   *\\n   * See https://stargateprotocol.gitbook.io/stargate/interfaces/evm-solidity-interfaces/istargatereceiver.sol\\n   */\\n  function sgReceive(\\n    uint16, // _srcChainId\\n    bytes memory _srcAddress,\\n    uint256, // _nonce\\n    address _token,\\n    uint256 amountLD,\\n    bytes memory payload\\n  ) external {\\n    if (msg.sender != address(LibWarp.state().stargateComposer)) {\\n      revert InvalidSgReceiverSender();\\n    }\\n\\n    // NOTE: Addresses cannot be decode from bytes using `abi.decode`\\n    // From https://ethereum.stackexchange.com/a/50528\\n    address srcAddress;\\n\\n    assembly {\\n      srcAddress := mload(add(_srcAddress, 20))\\n    }\\n\\n    if (srcAddress != address(this)) {\\n      // NOTE: This assumes that this contract is deployed at the same address on every chain\\n      revert InvalidSgReceiveSrcAddress();\\n    }\\n\\n    Params memory params = abi.decode(payload, (Params));\\n\\n    if (params.tokenIn == address(0)) {\\n      // Distinguish between receiving ETH and SGETH. Note that the `params.tokenIn` address is useless\\n      // otherwise because `_token` may be different on this chain\\n      _token = address(0);\\n    }\\n\\n    try\\n      IWarpLink(this).warpLinkEngage{value: _token == address(0) ? amountLD : 0}(\\n        Params({\\n          partner: params.partner,\\n          feeBps: params.feeBps,\\n          slippageBps: params.slippageBps,\\n          recipient: params.recipient,\\n          tokenIn: _token,\\n          tokenOut: params.tokenOut,\\n          amountIn: amountLD,\\n          amountOut: params.amountOut,\\n          deadline: params.deadline,\\n          commands: params.commands\\n        }),\\n        PermitParams({nonce: 0, signature: ''})\\n      )\\n    {} catch {\\n      // Refund tokens to the recipient\\n      if (_token == address(0)) {\\n        payable(params.recipient).transfer(amountLD);\\n      } else {\\n        IERC20(_token).safeTransfer(params.recipient, amountLD);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Jump to another chain using the Stargate bridge\\n   *\\n   * After this operation, the token will be unchanged and `t.amount` will\\n   * be how much was sent. `t.jumped` will be set to `1` to indicate\\n   * that no more commands should be run\\n   *\\n   * The user may construct a command where `srcPoolId` is not for `t.token`. This is harmless\\n   * because only `t.token` can be moved by Stargate.\\n   *\\n   * This command must not run inside of a split.\\n   *\\n   * If the jump is the final operation, meaning the tokens will be delivered to the recipient on\\n   * the other chain without further processing, the fee is charged and the `Warp` event is emitted\\n   * in this function.\\n   *\\n   * A bridge fee must be paid in the native token. This fee is determined with\\n   * `IStargateRouter.quoteLayerZeroFee`\\n   *\\n   * The value for `t.token` remains the same and is not chained.\\n   *\\n   * Params are read from the stream as:\\n   *   - dstChainId (uint16)\\n   *   - srcPoolId (uint8)\\n   *   - dstPoolId (uint8)\\n   *   - dstGasForCall (uint32)\\n   *   - tokenOut (address) when `dstGasForCall` > 0\\n   *   - amountOut (uint256) when `dstGasForCall` > 0\\n   *   - commands (uint256 length, ...bytes) when `dstGasForCall` > 0\\n   */\\n  function processJumpStargate(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    // TODO: Does this use the same gas than (a, b, c,) = (stream.read, ...)?\\n    JumpStargateParams memory params;\\n    params.dstChainId = stream.readUint16();\\n    params.srcPoolId = stream.readUint8();\\n    params.dstPoolId = stream.readUint8();\\n    params.dstGasForCall = stream.readUint32();\\n\\n    if (params.dstGasForCall > 0) {\\n      // NOTE: `amountIn` is left as zero\\n      Params memory destParams;\\n      destParams.partner = t.paramPartner;\\n      destParams.feeBps = t.paramFeeBps;\\n      destParams.slippageBps = t.paramSlippageBps;\\n      destParams.recipient = t.paramRecipient;\\n      // NOTE: Used to distinguish ETH vs SGETH. Tokens on the other chain do not not necessarily have\\n      // the same address as on this chain\\n      destParams.tokenIn = t.token;\\n      destParams.tokenOut = stream.readAddress();\\n      destParams.amountOut = stream.readUint256();\\n      destParams.deadline = t.paramDeadline;\\n      destParams.commands = stream.readBytes();\\n      params.payload = abi.encode(destParams);\\n    }\\n\\n    if (t.token != t.paramTokenIn) {\\n      if (params.payload.length == 0) {\\n        // If the tokens are being delivered directly to the recipient without a second\\n        // WarpLink engage, the fee is charged on this chain\\n        // NOTE: It is not possible to know how many tokens were delivered. Therfore positive slippage\\n        // is never charged\\n        t.amount = LibStarVault.calculateAndRegisterFee(\\n          t.paramPartner,\\n          t.token,\\n          t.paramFeeBps,\\n          t.amount,\\n          t.amount\\n        );\\n      }\\n\\n      emit LibWarp.Warp(t.paramPartner, t.paramTokenIn, t.token, t.paramAmountIn, t.amount);\\n    }\\n\\n    // Enforce minimum amount/max slippage\\n    if (t.amount < LibWarp.applySlippage(t.paramAmountOut, t.paramSlippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    IStargateComposer stargateComposer = LibWarp.state().stargateComposer;\\n\\n    if (t.token != address(0)) {\\n      if (t.payer != address(this)) {\\n        // Transfer tokens from the sender to this contract\\n        LibWarp.state().permit2.transferFrom(t.payer, address(this), (uint160)(t.amount), t.token);\\n\\n        // Update the payer to this contract\\n        t.payer = address(this);\\n      }\\n\\n      // Allow Stargate to transfer the tokens. When there is a payload, the composer is used, else the router\\n      IERC20(t.token).forceApprove(\\n        params.payload.length == 0 ? stargateComposer.stargateRouter() : address(stargateComposer),\\n        t.amount\\n      );\\n    }\\n\\n    t.jumped = 1;\\n\\n    // Swap on the composer if there is a payload, else the router\\n    IStargateRouter(\\n      params.payload.length == 0 ? stargateComposer.stargateRouter() : address(stargateComposer)\\n    ).swap{\\n      value: t.token == address(0) ? t.amount + t.nativeValueRemaining : t.nativeValueRemaining\\n    }({\\n      _dstChainId: params.dstChainId,\\n      _srcPoolId: params.srcPoolId,\\n      _dstPoolId: params.dstPoolId,\\n      //  NOTE: There is no guarantee that `msg.sender` can handle receiving tokens/ETH\\n      // TODO: Use `msg.sender` if it's EOA, else use this contract\\n      _refundAddress: payable(address(this)),\\n      _amountLD: t.amount,\\n      // NOTE: This is imperfect because the user may already have eaten some slippage and may eat\\n      // more on the other chain. It also assumes the tokens are of nearly equal value\\n      _minAmountLD: LibWarp.applySlippage(t.amount, t.paramSlippageBps),\\n      _lzTxParams: IStargateRouter.lzTxObj({\\n        dstGasForCall: params.dstGasForCall,\\n        dstNativeAmount: 0,\\n        dstNativeAddr: ''\\n      }),\\n      // NOTE: This assumes the contract is deployed at the same address on every chain.\\n      // If this is not the case, a new param needs to be added with the next WarpLink address\\n      _to: abi.encodePacked(params.payload.length > 0 ? address(this) : t.paramRecipient),\\n      _payload: params.payload\\n    });\\n\\n    t.nativeValueRemaining = 0;\\n\\n    return t;\\n  }\\n\\n  function engageInternal(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    uint256 commandCount = stream.readUint8();\\n\\n    // TODO: End of stream check?\\n    for (uint256 commandIndex; commandIndex < commandCount; commandIndex++) {\\n      // TODO: Unchecked?\\n      uint256 commandType = stream.readUint8();\\n\\n      if (commandType == COMMAND_TYPE_WRAP) {\\n        t = processWrap(t);\\n      } else if (commandType == COMMAND_TYPE_UNWRAP) {\\n        t = processUnwrap(t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT_SINGLE) {\\n        t = processWarpUniV2LikeExactInputSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_SPLIT) {\\n        t = processSplit(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT) {\\n        t = processWarpUniV2LikeExactInput(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT_SINGLE) {\\n        t = processWarpUniV3LikeExactInputSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT) {\\n        t = processWarpUniV3LikeExactInput(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_CURVE_EXACT_INPUT_SINGLE) {\\n        t = processWarpCurveExactInputSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_JUMP_STARGATE) {\\n        if (commandIndex != commandCount - 1) {\\n          revert JumpMustBeLastCommand();\\n        }\\n\\n        t = processJumpStargate(stream, t);\\n      } else {\\n        revert UnhandledCommand();\\n      }\\n    }\\n\\n    return t;\\n  }\\n\\n  function warpLinkEngage(Params memory params, PermitParams calldata permit) external payable {\\n    if (block.timestamp > params.deadline) {\\n      revert DeadlineExpired();\\n    }\\n\\n    TransientState memory t;\\n    t.paramPartner = params.partner;\\n    t.paramFeeBps = params.feeBps;\\n    t.paramSlippageBps = params.slippageBps;\\n    t.paramRecipient = params.recipient;\\n    t.paramTokenIn = params.tokenIn;\\n    t.paramAmountIn = params.amountIn;\\n    t.paramAmountOut = params.amountOut;\\n    t.paramSlippageBps = params.slippageBps;\\n    t.paramDeadline = params.deadline;\\n    t.amount = params.amountIn;\\n    t.token = params.tokenIn;\\n\\n    if (params.tokenIn == address(0)) {\\n      if (msg.value < params.amountIn) {\\n        revert InsufficientEthValue();\\n      }\\n\\n      t.nativeValueRemaining = msg.value - params.amountIn;\\n\\n      // The ETH has already been moved to this contract\\n      t.payer = address(this);\\n    } else {\\n      // Tokens will initially moved from the sender\\n      t.payer = msg.sender;\\n\\n      t.nativeValueRemaining = msg.value;\\n\\n      // Permit tokens / set allowance\\n      // The signature is omitted when `warpLinkEngage` is called from `sgReceive`\\n      if (permit.signature.length > 0) {\\n        LibWarp.state().permit2.permit(\\n          msg.sender,\\n          IAllowanceTransfer.PermitSingle({\\n            details: IAllowanceTransfer.PermitDetails({\\n              token: params.tokenIn,\\n              amount: (uint160)(params.amountIn),\\n              expiration: (uint48)(params.deadline),\\n              nonce: (uint48)(permit.nonce)\\n            }),\\n            spender: address(this),\\n            sigDeadline: (uint256)(params.deadline)\\n          }),\\n          permit.signature\\n        );\\n      }\\n    }\\n\\n    uint256 stream = Stream.createStream(params.commands);\\n\\n    t = engageInternal(stream, t);\\n\\n    uint256 amountOut = t.amount;\\n    address tokenOut = t.token;\\n\\n    if (tokenOut != params.tokenOut) {\\n      revert UnexpectedTokenOut();\\n    }\\n\\n    // Enforce minimum amount/max slippage\\n    if (amountOut < LibWarp.applySlippage(params.amountOut, params.slippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    if (t.jumped == 1) {\\n      // The coins have jumped away from this chain. Fees are colelcted before\\n      // the jump or on the other chain.\\n      //\\n      // `t.nativeValueRemaining` is not checked since it should be zero\\n      return;\\n    }\\n\\n    // Collect fees\\n    amountOut = LibStarVault.calculateAndRegisterFee(\\n      params.partner,\\n      params.tokenOut,\\n      params.feeBps,\\n      params.amountOut,\\n      amountOut\\n    );\\n\\n    if (amountOut == 0) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    // Deliver tokens\\n    if (tokenOut == address(0)) {\\n      payable(params.recipient).transfer(amountOut);\\n    } else {\\n      IERC20(tokenOut).safeTransfer(params.recipient, amountOut);\\n    }\\n\\n    if (t.nativeValueRemaining > 0) {\\n      // TODO: Is this the correct recipient?\\n      payable(msg.sender).transfer(t.nativeValueRemaining);\\n    }\\n\\n    emit LibWarp.Warp(params.partner, params.tokenIn, params.tokenOut, params.amountIn, amountOut);\\n  }\\n}\\n\",\"keccak256\":\"0x198e2bb767f975464f62ecb8578721d7516f8da1302b3acfd3c622258de1320e\",\"license\":\"MIT\"},\"contracts/interfaces/ILibCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibCurve {\\n  error UnhandledPoolKind();\\n}\\n\",\"keccak256\":\"0xbc06582fb299db2a9174bcee01d6ff8ef611dfd92cbecc9b475f515acf3af45b\",\"license\":\"MIT\"},\"contracts/interfaces/ILibStarVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibStarVault {\\n  /**\\n   * The swap fee is over the maximum allowed\\n   */\\n  error FeeTooHigh(uint256 maxFeeBps);\\n\\n  event Fee(\\n    address indexed partner,\\n    address indexed token,\\n    uint256 partnerFee,\\n    uint256 protocolFee\\n  );\\n}\\n\",\"keccak256\":\"0xd19e560bc438be0ce218fa8f907038c5afca7b742d11af65e7892585227969e1\",\"license\":\"MIT\"},\"contracts/interfaces/ILibUniV3Like.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibUniV3Like {\\n  error CallbackAlreadyActive();\\n  error CallbackStillActive();\\n}\\n\",\"keccak256\":\"0x8f4ef11af715b9c39c44879ea04310cf0bc74e35cfa1b005fd17a3198880246a\",\"license\":\"MIT\"},\"contracts/interfaces/ILibWarp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibWarp {\\n  event Warp(\\n    address indexed partner,\\n    address indexed tokenIn,\\n    address indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n}\\n\",\"keccak256\":\"0x0ccca1960a2a145b0b26c8c0c5974a883f9a2f909556f5a539222e3cb59cfbaa\",\"license\":\"MIT\"},\"contracts/interfaces/IUniV3Callback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUniV3Callback {\\n  error CallbackInactive();\\n}\\n\",\"keccak256\":\"0x0a70c7deeb178bc6724fb3f2ff087eee95cb4e7779ed7bf8045a0dde1d2200dd\",\"license\":\"MIT\"},\"contracts/interfaces/IWarpLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\nimport {ILibCurve} from '../interfaces/ILibCurve.sol';\\nimport {ILibStarVault} from '../interfaces/ILibStarVault.sol';\\nimport {ILibUniV3Like} from '../interfaces/ILibUniV3Like.sol';\\nimport {ILibWarp} from '../interfaces/ILibWarp.sol';\\n\\ninterface IWarpLink is ILibCurve, ILibStarVault, ILibUniV3Like, ILibWarp {\\n  error UnhandledCommand();\\n  error InsufficientEthValue();\\n  error InsufficientOutputAmount();\\n  error InsufficientTokensDelivered();\\n  error UnexpectedTokenForWrap();\\n  error UnexpectedTokenForUnwrap();\\n  error UnexpectedTokenOut();\\n  error InsufficientAmountRemaining();\\n  error NotEnoughParts();\\n  error InconsistentPartTokenOut();\\n  error InconsistentPartPayerOut();\\n  error UnexpectedPayerForWrap();\\n  error NativeTokenNotSupported();\\n  error DeadlineExpired();\\n  error IllegalJumpInSplit();\\n  error JumpMustBeLastCommand();\\n  error InvalidSgReceiverSender();\\n  error InvalidSgReceiveSrcAddress();\\n\\n  struct Params {\\n    address partner;\\n    uint16 feeBps;\\n    /**\\n     * How much below `amountOut` the user will accept\\n     */\\n    uint16 slippageBps;\\n    address recipient;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 amountIn;\\n    /**\\n     * The amount the user was quoted\\n     */\\n    uint256 amountOut;\\n    uint48 deadline;\\n    bytes commands;\\n  }\\n\\n  function warpLinkEngage(Params memory params, PermitParams calldata permit) external payable;\\n}\\n\",\"keccak256\":\"0xc1d8b9ba2a1f8300c00adc2c66fd51da23bb40db78ce5b7fe270bb7ee77e923e\",\"license\":\"MIT\"},\"contracts/interfaces/external/IAllowanceTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IEIP712} from './IEIP712.sol';\\n\\n/// @title AllowanceTransfer\\n/// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface IAllowanceTransfer is IEIP712 {\\n  /// @notice Thrown when an allowance on a token has expired.\\n  /// @param deadline The timestamp at which the allowed amount is no longer valid\\n  error AllowanceExpired(uint256 deadline);\\n\\n  /// @notice Thrown when an allowance on a token has been depleted.\\n  /// @param amount The maximum amount allowed\\n  error InsufficientAllowance(uint256 amount);\\n\\n  /// @notice Thrown when too many nonces are invalidated.\\n  error ExcessiveInvalidation();\\n\\n  /// @notice Emits an event when the owner successfully invalidates an ordered nonce.\\n  event NonceInvalidation(\\n    address indexed owner,\\n    address indexed token,\\n    address indexed spender,\\n    uint48 newNonce,\\n    uint48 oldNonce\\n  );\\n\\n  /// @notice Emits an event when the owner successfully sets permissions on a token for the spender.\\n  event Approval(\\n    address indexed owner,\\n    address indexed token,\\n    address indexed spender,\\n    uint160 amount,\\n    uint48 expiration\\n  );\\n\\n  /// @notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\\n  event Permit(\\n    address indexed owner,\\n    address indexed token,\\n    address indexed spender,\\n    uint160 amount,\\n    uint48 expiration,\\n    uint48 nonce\\n  );\\n\\n  /// @notice Emits an event when the owner sets the allowance back to 0 with the lockdown function.\\n  event Lockdown(address indexed owner, address token, address spender);\\n\\n  /// @notice The permit data for a token\\n  struct PermitDetails {\\n    // ERC20 token address\\n    address token;\\n    // the maximum amount allowed to spend\\n    uint160 amount;\\n    // timestamp at which a spender's token allowances become invalid\\n    uint48 expiration;\\n    // an incrementing value indexed per owner,token,and spender for each signature\\n    uint48 nonce;\\n  }\\n\\n  /// @notice The permit message signed for a single token allownce\\n  struct PermitSingle {\\n    // the permit data for a single token alownce\\n    PermitDetails details;\\n    // address permissioned on the allowed tokens\\n    address spender;\\n    // deadline on the permit signature\\n    uint256 sigDeadline;\\n  }\\n\\n  /// @notice The permit message signed for multiple token allowances\\n  struct PermitBatch {\\n    // the permit data for multiple token allowances\\n    PermitDetails[] details;\\n    // address permissioned on the allowed tokens\\n    address spender;\\n    // deadline on the permit signature\\n    uint256 sigDeadline;\\n  }\\n\\n  /// @notice The saved permissions\\n  /// @dev This info is saved per owner, per token, per spender and all signed over in the permit message\\n  /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n  struct PackedAllowance {\\n    // amount allowed\\n    uint160 amount;\\n    // permission expiry\\n    uint48 expiration;\\n    // an incrementing value indexed per owner,token,and spender for each signature\\n    uint48 nonce;\\n  }\\n\\n  /// @notice A token spender pair.\\n  struct TokenSpenderPair {\\n    // the token the spender is approved\\n    address token;\\n    // the spender address\\n    address spender;\\n  }\\n\\n  /// @notice Details for a token transfer.\\n  struct AllowanceTransferDetails {\\n    // the owner of the token\\n    address from;\\n    // the recipient of the token\\n    address to;\\n    // the amount of the token\\n    uint160 amount;\\n    // the token to be transferred\\n    address token;\\n  }\\n\\n  /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\\n  /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\\n  /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\\n  function allowance(\\n    address user,\\n    address token,\\n    address spender\\n  ) external view returns (uint160 amount, uint48 expiration, uint48 nonce);\\n\\n  /// @notice Approves the spender to use up to amount of the specified token up until the expiration\\n  /// @param token The token to approve\\n  /// @param spender The spender address to approve\\n  /// @param amount The approved amount of the token\\n  /// @param expiration The timestamp at which the approval is no longer valid\\n  /// @dev The packed allowance also holds a nonce, which will stay unchanged in approve\\n  /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n  function approve(address token, address spender, uint160 amount, uint48 expiration) external;\\n\\n  /// @notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\\n  /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n  /// @param owner The owner of the tokens being approved\\n  /// @param permitSingle Data signed over by the owner specifying the terms of approval\\n  /// @param signature The owner's signature over the permit data\\n  function permit(\\n    address owner,\\n    PermitSingle memory permitSingle,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\\n  /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n  /// @param owner The owner of the tokens being approved\\n  /// @param permitBatch Data signed over by the owner specifying the terms of approval\\n  /// @param signature The owner's signature over the permit data\\n  function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\\n\\n  /// @notice Transfer approved tokens from one address to another\\n  /// @param from The address to transfer from\\n  /// @param to The address of the recipient\\n  /// @param amount The amount of the token to transfer\\n  /// @param token The token address to transfer\\n  /// @dev Requires the from address to have approved at least the desired amount\\n  /// of tokens to msg.sender.\\n  function transferFrom(address from, address to, uint160 amount, address token) external;\\n\\n  /// @notice Transfer approved tokens in a batch\\n  /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\\n  /// @dev Requires the from addresses to have approved at least the desired amount\\n  /// of tokens to msg.sender.\\n  function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\\n\\n  /// @notice Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity\\n  /// by batch revoking approvals\\n  /// @param approvals Array of approvals to revoke.\\n  function lockdown(TokenSpenderPair[] calldata approvals) external;\\n\\n  /// @notice Invalidate nonces for a given (token, spender) pair\\n  /// @param token The token to invalidate nonces for\\n  /// @param spender The spender to invalidate nonces for\\n  /// @param newNonce The new nonce to set. Invalidates all nonces less than it.\\n  /// @dev Can't invalidate more than 2**16 nonces per transaction.\\n  function invalidateNonces(address token, address spender, uint48 newNonce) external;\\n}\\n\",\"keccak256\":\"0xbfddf3c6b671cc3c00dd342a9ee23612e0524103cf827a4cfd89c1ae0dc0309f\",\"license\":\"MIT\"},\"contracts/interfaces/external/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// Kind 1\\n// Example v0.2.4 tripool (stables)\\n// See https://etherscan.io/address/0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7\\ninterface ICurvePoolKind1 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function base_coins(uint256 index) external view returns (address);\\n\\n  function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable;\\n\\n  function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable;\\n}\\n\\n// Kind 2\\n// Example v0.2.8, Stableswap, v0.2.5 Curve GUSD Metapool\\n// See https://etherscan.io/address/0xdc24316b9ae028f1497c275eb9192a3ea0f67022\\ninterface ICurvePoolKind2 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function base_coins(uint256 index) external view returns (address);\\n\\n  // 0x3df02124\\n  function exchange(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n\\n  function exchange_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n}\\n\\n// Kind 3\\n// Example v0.3.0, \\\"# EUR/3crv pool where 3crv is _second_, not first\\\"\\n// See https://etherscan.io/address/0x5D0F47B32fDd343BfA74cE221808e2abE4A53827\\n// NOTE: This contract has an `exchange_underlying` with a receiver also\\ninterface ICurvePoolKind3 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function underlying_coins(uint256 index) external view returns (address);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    bool use_eth\\n  ) external payable returns (uint256);\\n\\n  function exchange_underlying(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n}\\n\\n// Kind 4, uint256s with no return value\\n// Example v0.2.15, \\\"Pool for USDT/BTC/ETH or similar\\\"\\n// See https://arbiscan.io/address/0x960ea3e3C7FB317332d990873d354E18d7645590#code\\ninterface ICurvePoolKind4 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function underlying_coins(uint256 index) external view returns (address);\\n\\n  function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external payable;\\n\\n  function exchange_underlying(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external payable;\\n}\\n\",\"keccak256\":\"0xa820ad027992cf16e3a71318c38b2f30ebaeb197c82f9d7fdc3dffd6928e98f5\",\"license\":\"MIT\"},\"contracts/interfaces/external/IEIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IEIP712 {\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb8fcd9ab837508adefbc619330151c4dc234a6738cdd08f4e108bfcc1908e5d8\",\"license\":\"MIT\"},\"contracts/interfaces/external/IPermit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ISignatureTransfer} from './ISignatureTransfer.sol';\\nimport {IAllowanceTransfer} from './IAllowanceTransfer.sol';\\n\\n/// @notice Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\\n/// @dev Users must approve Permit2 before calling any of the transfer functions.\\ninterface IPermit2 is ISignatureTransfer, IAllowanceTransfer {\\n  // IPermit2 unifies the two interfaces so users have maximal flexibility with their approval.\\n}\\n\",\"keccak256\":\"0x9ea8e6c589429d5edeb0c9bd091b3883536e36d947653fa7cc432bd3bcab2367\",\"license\":\"MIT\"},\"contracts/interfaces/external/ISignatureTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IEIP712} from './IEIP712.sol';\\n\\n/// @title SignatureTransfer\\n/// @notice Handles ERC20 token transfers through signature based actions\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface ISignatureTransfer is IEIP712 {\\n  /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\\n  /// @param maxAmount The maximum amount a spender can request to transfer\\n  error InvalidAmount(uint256 maxAmount);\\n\\n  /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\\n  /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\\n  error LengthMismatch();\\n\\n  /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\\n  event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\\n\\n  /// @notice The token and amount details for a transfer signed in the permit transfer signature\\n  struct TokenPermissions {\\n    // ERC20 token address\\n    address token;\\n    // the maximum amount that can be spent\\n    uint256 amount;\\n  }\\n\\n  /// @notice The signed permit message for a single token transfer\\n  struct PermitTransferFrom {\\n    TokenPermissions permitted;\\n    // a unique value for every token owner's signature to prevent signature replays\\n    uint256 nonce;\\n    // deadline on the permit signature\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Specifies the recipient address and amount for batched transfers.\\n  /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount.\\n  struct SignatureTransferDetails {\\n    // recipient address\\n    address to;\\n    // spender requested amount\\n    uint256 requestedAmount;\\n  }\\n\\n  /// @notice Used to reconstruct the signed permit message for multiple token transfers\\n  /// @dev Do not need to pass in spender address as it is required that it is msg.sender\\n  /// @dev Note that a user still signs over a spender address\\n  struct PermitBatchTransferFrom {\\n    // the tokens and corresponding amounts permitted for a transfer\\n    TokenPermissions[] permitted;\\n    // a unique value for every token owner's signature to prevent signature replays\\n    uint256 nonce;\\n    // deadline on the permit signature\\n    uint256 deadline;\\n  }\\n\\n  /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\\n  /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\\n  /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\\n  /// @dev It returns a uint256 bitmap\\n  /// @dev The index, or wordPosition is capped at type(uint248).max\\n  function nonceBitmap(address, uint256) external view returns (uint256);\\n\\n  /// @notice Transfers a token using a signed permit message\\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails The spender's requested transfer details for the permitted token\\n  /// @param signature The signature to verify\\n  function permitTransferFrom(\\n    PermitTransferFrom memory permit,\\n    SignatureTransferDetails calldata transferDetails,\\n    address owner,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Transfers a token using a signed permit message\\n  /// @notice Includes extra data provided by the caller to verify signature over\\n  /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails The spender's requested transfer details for the permitted token\\n  /// @param witness Extra data to include when checking the user signature\\n  /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n  /// @param signature The signature to verify\\n  function permitWitnessTransferFrom(\\n    PermitTransferFrom memory permit,\\n    SignatureTransferDetails calldata transferDetails,\\n    address owner,\\n    bytes32 witness,\\n    string calldata witnessTypeString,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Transfers multiple tokens using a signed permit message\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n  /// @param signature The signature to verify\\n  function permitTransferFrom(\\n    PermitBatchTransferFrom memory permit,\\n    SignatureTransferDetails[] calldata transferDetails,\\n    address owner,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Transfers multiple tokens using a signed permit message\\n  /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n  /// @notice Includes extra data provided by the caller to verify signature over\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n  /// @param witness Extra data to include when checking the user signature\\n  /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n  /// @param signature The signature to verify\\n  function permitWitnessTransferFrom(\\n    PermitBatchTransferFrom memory permit,\\n    SignatureTransferDetails[] calldata transferDetails,\\n    address owner,\\n    bytes32 witness,\\n    string calldata witnessTypeString,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Invalidates the bits specified in mask for the bitmap at the word position\\n  /// @dev The wordPos is maxed at type(uint248).max\\n  /// @param wordPos A number to index the nonceBitmap at\\n  /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\\n  function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\\n}\\n\",\"keccak256\":\"0x6e8fc386e63b612a87ebb33c836457702127fc7b86e9498f2a6dc7dd36f5c6b3\",\"license\":\"MIT\"},\"contracts/interfaces/external/IStargateComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\nimport {IStargateRouter} from './IStargateRouter.sol';\\n\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IStargateComposer is IStargateRouter {\\n  function stargateRouter() external view returns (address);\\n}\\n\",\"keccak256\":\"0x91f0c36063f0c5b9f5a041ed146bb50850e504127cf6400e9250fcee665de984\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/external/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.6;\\n\\ninterface IStargateReceiver {\\n  function sgReceive(\\n    uint16 _srcChainId, // the remote chainId sending the tokens\\n    bytes memory _srcAddress, // the remote Bridge address\\n    uint256 _nonce,\\n    address _token, // the token contract on the local chain\\n    uint256 amountLD, // the qty of local _token contract tokens\\n    bytes memory payload\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7fd06c09139156a4f09a77eac28e453a1d2041a8cf01a108fc875c65192cb637\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/external/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IStargateRouter {\\n  struct lzTxObj {\\n    uint256 dstGasForCall;\\n    uint256 dstNativeAmount;\\n    bytes dstNativeAddr;\\n  }\\n\\n  function swap(\\n    uint16 _dstChainId,\\n    uint256 _srcPoolId,\\n    uint256 _dstPoolId,\\n    address payable _refundAddress,\\n    uint256 _amountLD,\\n    uint256 _minAmountLD,\\n    lzTxObj memory _lzTxParams,\\n    bytes calldata _to,\\n    bytes calldata _payload\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xfeaae75a5900328c68a630720e29a7c613ab3e628d93cbf432abd660083a29bf\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/external/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n  function getReserves()\\n    external\\n    view\\n    returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x9db3539ee014c7b82d3ef721a09c89efe134d0441b01df60dd61ef78afd8658e\"},\"contracts/interfaces/external/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapV3Pool {\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function liquidity() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xeb847b1091ccd93b6f7bd93622fec71a424740bc5820a1ef0abbcb07e0f70cc9\",\"license\":\"MIT\"},\"contracts/libraries/LibCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {ICurvePoolKind1, ICurvePoolKind2, ICurvePoolKind3, ICurvePoolKind4} from '../interfaces/external/ICurvePool.sol';\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibCurve\\n */\\nlibrary LibCurve {\\n  error UnhandledPoolKind();\\n\\n  function exchange(\\n    uint8 kind,\\n    bool underlying,\\n    address pool,\\n    uint256 eth,\\n    uint8 i,\\n    uint8 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    bool useEth\\n  ) internal {\\n    if (kind == 1) {\\n      if (underlying) {\\n        ICurvePoolKind1(pool).exchange_underlying{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      } else {\\n        ICurvePoolKind1(pool).exchange{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      }\\n    } else if (kind == 2) {\\n      if (underlying) {\\n        ICurvePoolKind2(pool).exchange_underlying{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      } else {\\n        ICurvePoolKind2(pool).exchange{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      }\\n    } else if (kind == 3) {\\n      if (underlying) {\\n        ICurvePoolKind3(pool).exchange_underlying{value: eth}(uint256(i), uint256(j), dx, min_dy);\\n      } else if (useEth) {\\n        ICurvePoolKind3(pool).exchange{value: eth}(uint256(i), uint256(j), dx, min_dy, true);\\n      } else {\\n        ICurvePoolKind3(pool).exchange(uint256(i), uint256(j), dx, min_dy);\\n      }\\n    } else if (kind == 4) {\\n      if (underlying) {\\n        revert UnhandledPoolKind();\\n      } else {\\n        ICurvePoolKind4(pool).exchange{value: eth}(uint256(i), uint256(j), dx, min_dy);\\n      }\\n    } else {\\n      revert UnhandledPoolKind();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x3800d83c9e2afba4b7baf4f4f5134d93c41b1100faedbc8b3989d0806e2e5003\",\"license\":\"MIT\"},\"contracts/libraries/LibStarVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibStarVault\\n */\\nlibrary LibStarVault {\\n  /**\\n   * The swap fee is over the maximum allowed\\n   */\\n  error FeeTooHigh(uint256 maxFeeBps);\\n\\n  event Fee(\\n    address indexed partner,\\n    address indexed token,\\n    uint256 partnerFee,\\n    uint256 protocolFee\\n  );\\n\\n  struct State {\\n    /**\\n     * Token balances per partner\\n     * Mapping: Partner -> token -> balance\\n     */\\n    mapping(address => mapping(address => uint256)) partnerBalances;\\n    /**\\n     * Total balances per token for all partners.\\n     * Mapping: token -> balance\\n     */\\n    mapping(address => uint256) partnerBalancesTotal;\\n  }\\n\\n  uint256 private constant MAX_FEE_BPS = 2_000;\\n\\n  function state() internal pure returns (State storage s) {\\n    /**\\n     * NOTE: Three storage slots used to store all partners addresses and partner tokens were\\n     * removed to save gas.\\n     */\\n    unchecked {\\n      uint256 storagePosition = uint256(keccak256('diamond.storage.LibStarVault')) + 3;\\n\\n      assembly {\\n        s.slot := storagePosition\\n      }\\n    }\\n  }\\n\\n  /**\\n   * By using a library function we ensure that the storage used by the library is whichever contract\\n   * is calling this function\\n   */\\n  function registerCollectedFee(\\n    address partner,\\n    address token,\\n    uint256 partnerFee,\\n    uint256 protocolFee\\n  ) internal {\\n    State storage s = state();\\n\\n    unchecked {\\n      s.partnerBalances[partner][token] += partnerFee;\\n      s.partnerBalancesTotal[token] += partnerFee;\\n    }\\n\\n    emit Fee(partner, token, partnerFee, protocolFee);\\n  }\\n\\n  function calculateAndRegisterFee(\\n    address partner,\\n    address token,\\n    uint256 feeBps,\\n    uint256 amountOutQuoted,\\n    uint256 amountOutActual\\n  ) internal returns (uint256 amountOutUser_) {\\n    if (feeBps > MAX_FEE_BPS) {\\n      revert FeeTooHigh(MAX_FEE_BPS);\\n    }\\n\\n    unchecked {\\n      uint256 feeTotal;\\n      uint256 feeBasis = amountOutActual;\\n\\n      if (amountOutActual > amountOutQuoted) {\\n        // Positive slippage\\n        feeTotal = amountOutActual - amountOutQuoted;\\n\\n        // Change the fee basis for use below\\n        feeBasis = amountOutQuoted;\\n      }\\n\\n      // Fee taken from actual\\n      feeTotal += (feeBasis * feeBps) / 10_000;\\n\\n      // If a partner is set, split the fee in half\\n      uint256 feePartner = partner == address(0) ? 0 : (feeTotal * 50) / 100;\\n      uint256 feeProtocol = feeTotal - feePartner;\\n\\n      if (feeProtocol > 0) {\\n        registerCollectedFee(partner, token, feePartner, feeProtocol);\\n      }\\n\\n      return amountOutActual - feeTotal;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x332a4a0e56d3a792a8a6e6ea929ee8c79a5a26de02445a73711228f3966ed948\",\"license\":\"MIT\"},\"contracts/libraries/LibUniV2Like.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IUniswapV2Pair} from 'contracts/interfaces/external/IUniswapV2Pair.sol';\\n\\nlibrary LibUniV2Like {\\n  function getAmountsOut(\\n    uint16[] memory poolFeesBps,\\n    uint256 amountIn,\\n    address[] memory tokens,\\n    address[] memory pools\\n  ) internal view returns (uint256[] memory amounts) {\\n    uint256 poolLength = pools.length;\\n\\n    amounts = new uint256[](tokens.length);\\n    amounts[0] = amountIn;\\n\\n    for (uint256 index; index < poolLength; ) {\\n      address token0 = tokens[index];\\n      address token1 = tokens[index + 1];\\n\\n      // For 30 bps, multiply by 9970\\n      uint256 feeFactor = 10_000 - poolFeesBps[index];\\n\\n      (uint256 reserveIn, uint256 reserveOut, ) = IUniswapV2Pair(pools[index]).getReserves();\\n\\n      if (token0 > token1) {\\n        (reserveIn, reserveOut) = (reserveOut, reserveIn);\\n      }\\n\\n      unchecked {\\n        amountIn =\\n          ((amountIn * feeFactor) * reserveOut) /\\n          ((reserveIn * 10_000) + (amountIn * feeFactor));\\n      }\\n\\n      // Recycling `amountIn`\\n      amounts[index + 1] = amountIn;\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x0448481d2a71459b54795c8fc2b9672898f66acbf24d9a15b4ca256622fb2bca\",\"license\":\"MIT\"},\"contracts/libraries/LibUniV3Like.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibUniV3Like\\n */\\nlibrary LibUniV3Like {\\n  error CallbackAlreadyActive();\\n  error CallbackStillActive();\\n\\n  bytes32 constant DIAMOND_STORAGE_SLOT = keccak256('diamond.storage.LibUniV3Like');\\n\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739 + 1;\\n\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342 - 1;\\n\\n  struct CallbackState {\\n    uint256 amount;\\n    address payer;\\n    address token;\\n  }\\n\\n  struct State {\\n    // TODO: Does this help by using `MSTORE8`?\\n    uint8 isActive;\\n    /**\\n     * Transient storage variable used in the callback\\n     */\\n    CallbackState callback;\\n  }\\n\\n  function state() internal pure returns (State storage s) {\\n    bytes32 slot = DIAMOND_STORAGE_SLOT;\\n\\n    assembly {\\n      s.slot := slot\\n    }\\n  }\\n\\n  function beforeCallback(CallbackState memory callback) internal {\\n    if (state().isActive == 1) {\\n      revert CallbackAlreadyActive();\\n    }\\n\\n    state().isActive = 1;\\n    state().callback = callback;\\n  }\\n\\n  function afterCallback() internal view {\\n    if (state().isActive == 1) {\\n      // The field is expected to be zeroed out by the callback\\n      revert CallbackStillActive();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xce887d71117b221647d2230baed33ba3f3aa467b23a34262c8862cee234c584b\",\"license\":\"MIT\"},\"contracts/libraries/LibWarp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IWETH} from '@uniswap/v2-periphery/contracts/interfaces/IWETH.sol';\\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\\nimport {IStargateComposer} from '../interfaces/external/IStargateComposer.sol';\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibWarp\\n */\\nlibrary LibWarp {\\n  event Warp(\\n    address indexed partner,\\n    address indexed tokenIn,\\n    address indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  struct State {\\n    IWETH weth;\\n    IPermit2 permit2;\\n    IStargateComposer stargateComposer;\\n  }\\n\\n  bytes32 constant DIAMOND_STORAGE_SLOT = keccak256('diamond.storage.LibWarp');\\n\\n  function state() internal pure returns (State storage s) {\\n    bytes32 slot = DIAMOND_STORAGE_SLOT;\\n\\n    assembly {\\n      s.slot := slot\\n    }\\n  }\\n\\n  function applySlippage(uint256 amount, uint16 slippage) internal pure returns (uint256) {\\n    return (amount * (10_000 - slippage)) / 10_000;\\n  }\\n}\\n\",\"keccak256\":\"0x8dc8917472256ee8a304eb2ab94955c873aa3f64d7224ad71f4e8d5af717ca48\",\"license\":\"MIT\"},\"contracts/libraries/PermitParams.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nstruct PermitParams {\\n  uint256 nonce;\\n  bytes signature;\\n}\\n\",\"keccak256\":\"0x71ad794ae61c4443974102a0b88f4e43deb6fcb1e57c04e08c44f903bac7e1fc\",\"license\":\"MIT\"},\"contracts/libraries/Stream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * Stream reader\\n *\\n * Note that the stream position is always behind by one as per the\\n * original implementation\\n *\\n * See https://github.com/sushiswap/sushiswap/blob/master/protocols/route-processor/contracts/InputStream.sol\\n */\\nlibrary Stream {\\n  function createStream(bytes memory data) internal pure returns (uint256 stream) {\\n    assembly {\\n      // Get a pointer to the next free memory\\n      stream := mload(0x40)\\n\\n      // Move the free memory pointer forward by 64 bytes, since\\n      // this function will store 2 words (64 bytes) to memory.\\n      mstore(0x40, add(stream, 64))\\n\\n      // Store a pointer to the data in the first word of the stream\\n      mstore(stream, data)\\n\\n      // Store a pointer to the end of the data in the second word of the stream\\n      let length := mload(data)\\n      mstore(add(stream, 32), add(data, length))\\n    }\\n  }\\n\\n  function isNotEmpty(uint256 stream) internal pure returns (bool) {\\n    uint256 pos;\\n    uint256 finish;\\n    assembly {\\n      pos := mload(stream)\\n      finish := mload(add(stream, 32))\\n    }\\n    return pos < finish;\\n  }\\n\\n  function readUint8(uint256 stream) internal pure returns (uint8 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 1)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint16(uint256 stream) internal pure returns (uint16 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 2)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint24(uint256 stream) internal pure returns (uint24 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 3)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint32(uint256 stream) internal pure returns (uint32 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 4)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint48(uint256 stream) internal pure returns (uint48 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 6)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint160(uint256 stream) internal pure returns (uint160 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 20)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint256(uint256 stream) internal pure returns (uint256 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 32)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readBytes32(uint256 stream) internal pure returns (bytes32 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 32)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readAddress(uint256 stream) internal pure returns (address res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 20)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readBytes(uint256 stream) internal pure returns (bytes memory res) {\\n    assembly {\\n      let pos := mload(stream)\\n      res := add(pos, 32)\\n      let length := mload(res)\\n      mstore(stream, add(res, length))\\n    }\\n  }\\n\\n  function readAddresses(\\n    uint256 stream,\\n    uint256 count\\n  ) internal pure returns (address[] memory res) {\\n    res = new address[](count);\\n\\n    for (uint256 index; index < count; ) {\\n      res[index] = readAddress(stream);\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n\\n  function readUint16s(uint256 stream, uint256 count) internal pure returns (uint16[] memory res) {\\n    res = new uint16[](count);\\n\\n    for (uint256 index; index < count; ) {\\n      res[index] = readUint16(stream);\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1c4eccca88e3487c6b6663ce51b77ea778e91b801373223e998fe96e2fff1750\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [],
        "types": null
      },
      "userdoc": {
        "errors": {
          "FeeTooHigh(uint256)": [
            {
              "notice": "The swap fee is over the maximum allowed"
            },
            {
              "notice": "The swap fee is over the maximum allowed"
            }
          ]
        },
        "kind": "user",
        "methods": {
          "sgReceive(uint16,bytes,uint256,address,uint256,bytes)": {
            "notice": "Cross-chain callback from Stargate The tokens have already been received by this contract, `t.payer` is set to this contract before `sgReceive` is called by the router. The `_nonce` field is not checked since it's assumed that LayerZero will not deliver the same message more than once. The Stargate composer is trusted, meaning `_token` and `amountLD` is not verified. Should the Stargate composer be compromised, an attacker can drain this contract. If the payload can not be decoded, tokens are left in this contract. If execution runs out of gas, tokens are left in this contract. If an error occurs during engage, such as insufficient output amount, tokens are refunded to the recipient. See https://stargateprotocol.gitbook.io/stargate/interfaces/evm-solidity-interfaces/istargatereceiver.sol"
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\n    },\n    \"contracts/facets/Curve.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {ICurve} from '../interfaces/ICurve.sol';\\nimport {LibStarVault} from '../libraries/LibStarVault.sol';\\nimport {LibWarp} from '../libraries/LibWarp.sol';\\nimport {LibCurve} from '../libraries/LibCurve.sol';\\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\\nimport {IAllowanceTransfer} from '../interfaces/external/IAllowanceTransfer.sol';\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\n\\n/**\\n * Swaps for Curve pools\\n *\\n * The pools are not trusted to deliver the correct amount of tokens, so the router\\n * verifies this.\\n */\\ncontract Curve is ICurve {\\n  using SafeERC20 for IERC20;\\n  using Address for address;\\n\\n  function curveExactInputSingle(\\n    ExactInputSingleParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut) {\\n    if (block.timestamp > params.deadline) {\\n      revert DeadlineExpired();\\n    }\\n\\n    bool isToEth = params.tokenOut == address(0);\\n\\n    uint256 tokenOutBalancePrev = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (params.tokenIn != address(0)) {\\n      // TODO: Is this necessary to support USDT? @jflint256: Yes, I think so.\\n      IERC20(params.tokenIn).forceApprove(params.pool, params.amountIn);\\n\\n      // Permit tokens / set allowance\\n      LibWarp.state().permit2.permit(\\n        msg.sender,\\n        IAllowanceTransfer.PermitSingle({\\n          details: IAllowanceTransfer.PermitDetails({\\n            token: params.tokenIn,\\n            amount: (uint160)(params.amountIn),\\n            expiration: (uint48)(params.deadline),\\n            nonce: (uint48)(permit.nonce)\\n          }),\\n          spender: address(this),\\n          sigDeadline: (uint256)(params.deadline)\\n        }),\\n        permit.signature\\n      );\\n\\n      // Transfer tokens from msg.sender to address(this)\\n      LibWarp.state().permit2.transferFrom(\\n        msg.sender,\\n        address(this),\\n        (uint160)(params.amountIn),\\n        params.tokenIn\\n      );\\n    }\\n\\n    LibCurve.exchange({\\n      kind: params.kind,\\n      underlying: params.underlying,\\n      pool: params.pool,\\n      eth: msg.value,\\n      useEth: params.useEth,\\n      i: params.tokenIndexIn,\\n      j: params.tokenIndexOut,\\n      // NOTE: `params.amountIn` is not verified to equal `msg.value`\\n      dx: params.amountIn,\\n      // NOTE: There is no need to set a min out since the balance is verified\\n      min_dy: 0\\n    });\\n\\n    uint256 nextTokenOutBalance = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    amountOut = nextTokenOutBalance - tokenOutBalancePrev;\\n\\n    // Enforce minimum amount/max slippage\\n    if (amountOut < LibWarp.applySlippage(params.amountOut, params.slippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    amountOut = LibStarVault.calculateAndRegisterFee(\\n      params.partner,\\n      params.tokenOut,\\n      params.feeBps,\\n      params.amountOut,\\n      amountOut\\n    );\\n\\n    if (isToEth) {\\n      (bool sent, ) = params.recipient.call{value: amountOut}('');\\n\\n      if (!sent) {\\n        revert EthTransferFailed();\\n      }\\n    } else {\\n      IERC20(params.tokenOut).safeTransfer(params.recipient, amountOut);\\n    }\\n\\n    emit LibWarp.Warp(params.partner, params.tokenIn, params.tokenOut, params.amountIn, amountOut);\\n  }\\n}\\n\"\n    },\n    \"contracts/facets/WarpLink.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {LibWarp} from '../libraries/LibWarp.sol';\\nimport {LibStarVault} from '../libraries/LibStarVault.sol';\\nimport {Stream} from '../libraries/Stream.sol';\\nimport {LibUniV2Like} from '../libraries/LibUniV2Like.sol';\\nimport {IUniswapV2Pair} from '../interfaces/external/IUniswapV2Pair.sol';\\nimport {IWarpLink} from '../interfaces/IWarpLink.sol';\\nimport {LibUniV3Like} from '../libraries/LibUniV3Like.sol';\\nimport {IUniV3Callback} from '../interfaces/IUniV3Callback.sol';\\nimport {IUniswapV3Pool} from '../interfaces/external/IUniswapV3Pool.sol';\\nimport {LibCurve} from '../libraries/LibCurve.sol';\\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\\nimport {IAllowanceTransfer} from '../interfaces/external/IAllowanceTransfer.sol';\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\nimport {IStargateRouter} from '../interfaces/external/IStargateRouter.sol';\\nimport {IStargateReceiver} from '../interfaces/external/IStargateReceiver.sol';\\nimport {IStargateComposer} from '../interfaces/external/IStargateComposer.sol';\\n\\nabstract contract WarpLinkCommandTypes {\\n  uint256 internal constant COMMAND_TYPE_WRAP = 1;\\n  uint256 internal constant COMMAND_TYPE_UNWRAP = 2;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT_SINGLE = 3;\\n  uint256 internal constant COMMAND_TYPE_SPLIT = 4;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT = 5;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT_SINGLE = 6;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT = 7;\\n  uint256 internal constant COMMAND_TYPE_WARP_CURVE_EXACT_INPUT_SINGLE = 8;\\n  uint256 internal constant COMMAND_TYPE_JUMP_STARGATE = 9;\\n}\\n\\ncontract WarpLink is IWarpLink, IStargateReceiver, WarpLinkCommandTypes {\\n  using SafeERC20 for IERC20;\\n  using Stream for uint256;\\n\\n  struct WarpUniV2LikeWarpSingleParams {\\n    address tokenOut;\\n    address pool;\\n    bool zeroForOne; // tokenIn < tokenOut\\n    uint16 poolFeeBps;\\n  }\\n\\n  struct WarpUniV2LikeExactInputParams {\\n    // NOTE: Excluding the first token\\n    address[] tokens;\\n    address[] pools;\\n    uint16[] poolFeesBps;\\n  }\\n\\n  struct WarpUniV3LikeExactInputSingleParams {\\n    address tokenOut;\\n    address pool;\\n    bool zeroForOne; // tokenIn < tokenOut\\n    uint16 poolFeeBps;\\n  }\\n\\n  struct WarpCurveExactInputSingleParams {\\n    address tokenOut;\\n    address pool;\\n    uint8 tokenIndexIn;\\n    uint8 tokenIndexOut;\\n    uint8 kind;\\n    bool underlying;\\n  }\\n\\n  struct JumpStargateParams {\\n    uint16 dstChainId;\\n    uint256 srcPoolId;\\n    uint256 dstPoolId;\\n    uint256 dstGasForCall;\\n    bytes payload;\\n  }\\n\\n  struct TransientState {\\n    address paramPartner;\\n    uint16 paramFeeBps;\\n    address paramRecipient;\\n    address paramTokenIn;\\n    uint256 paramAmountIn;\\n    uint256 paramAmountOut;\\n    uint16 paramSlippageBps;\\n    uint48 paramDeadline;\\n    uint256 amount;\\n    address payer;\\n    address token;\\n    /**\\n     * 0 or 1\\n     */\\n    uint256 jumped;\\n    /**\\n     * The amount of native value not spent. The native value starts off as\\n     * `msg.value - params.amount` and is decreased by spending money on jumps.\\n     *\\n     * Any leftover native value is returned to `msg.sender`\\n     */\\n    uint256 nativeValueRemaining;\\n  }\\n\\n  function processSplit(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    uint256 parts = stream.readUint8();\\n    uint256 amountRemaining = t.amount;\\n    uint256 amountOutSum;\\n\\n    if (parts < 2) {\\n      revert NotEnoughParts();\\n    }\\n\\n    // Store the token out for the previous part to ensure every part has the same output token\\n    address firstPartTokenOut;\\n    address firstPartPayerOut;\\n\\n    for (uint256 partIndex; partIndex < parts; ) {\\n      // TODO: Unchecked?\\n      // For the last part, use the remaining amount. Else read the % from the stream\\n      uint256 partAmount = partIndex < parts - 1\\n        ? (t.amount * stream.readUint16()) / 10_000\\n        : amountRemaining;\\n\\n      if (partAmount > amountRemaining) {\\n        revert InsufficientAmountRemaining();\\n      }\\n\\n      amountRemaining -= partAmount;\\n\\n      TransientState memory tPart;\\n\\n      tPart.amount = partAmount;\\n      tPart.payer = t.payer;\\n      tPart.token = t.token;\\n\\n      tPart = engageInternal(stream, tPart);\\n\\n      if (tPart.jumped == 1) {\\n        revert IllegalJumpInSplit();\\n      }\\n\\n      if (partIndex == 0) {\\n        firstPartPayerOut = tPart.payer;\\n        firstPartTokenOut = tPart.token;\\n      } else {\\n        if (tPart.token != firstPartTokenOut) {\\n          revert InconsistentPartTokenOut();\\n        }\\n\\n        if (tPart.payer != firstPartPayerOut) {\\n          revert InconsistentPartPayerOut();\\n        }\\n      }\\n\\n      // NOTE: Checked\\n      amountOutSum += tPart.amount;\\n\\n      unchecked {\\n        partIndex++;\\n      }\\n    }\\n\\n    t.payer = firstPartPayerOut;\\n    t.token = firstPartTokenOut;\\n    t.amount = amountOutSum;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Wrap ETH into WETH using the WETH contract\\n   *\\n   * The ETH must already be in this contract\\n   *\\n   * The next token will be WETH, with the amount and payer unchanged\\n   */\\n  function processWrap(TransientState memory t) internal returns (TransientState memory) {\\n    LibWarp.State storage s = LibWarp.state();\\n\\n    if (t.token != address(0)) {\\n      revert UnexpectedTokenForWrap();\\n    }\\n\\n    if (t.payer != address(this)) {\\n      // It's not possible to move a user's ETH\\n      revert UnexpectedPayerForWrap();\\n    }\\n\\n    t.token = address(s.weth);\\n\\n    s.weth.deposit{value: t.amount}();\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Unwrap WETH into ETH using the WETH contract\\n   *\\n   * The payer can be the sender or this contract. After this operation, the\\n   * token will be ETH (0) and the amount will be unchanged. The next payer\\n   * will be this contract.\\n   */\\n  function processUnwrap(TransientState memory t) internal returns (TransientState memory) {\\n    LibWarp.State storage s = LibWarp.state();\\n\\n    if (t.token != address(s.weth)) {\\n      revert UnexpectedTokenForUnwrap();\\n    }\\n\\n    address prevPayer = t.payer;\\n    bool shouldMoveTokensFirst = prevPayer != address(this);\\n\\n    if (shouldMoveTokensFirst) {\\n      t.payer = address(this);\\n    }\\n\\n    t.token = address(0);\\n\\n    if (shouldMoveTokensFirst) {\\n      s.permit2.transferFrom(prevPayer, address(this), (uint160)(t.amount), address(s.weth));\\n    }\\n\\n    s.weth.withdraw(t.amount);\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Uniswap V2-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *   - tokenOut (address)\\n   *   - pool (address)\\n   *   - zeroForOne (0 or 1, uint8)\\n   *   - poolFeeBps (uint16)\\n   */\\n  function processWarpUniV2LikeExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    if (t.token == address(0)) {\\n      revert NativeTokenNotSupported();\\n    }\\n\\n    WarpUniV2LikeWarpSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n    params.zeroForOne = stream.readUint8() == 1;\\n    params.poolFeeBps = stream.readUint16();\\n\\n    if (t.payer == address(this)) {\\n      // Transfer tokens to the pool\\n      IERC20(t.token).safeTransfer(params.pool, t.amount);\\n    } else {\\n      // Transfer tokens from the sender to the pool\\n      LibWarp.state().permit2.transferFrom(t.payer, params.pool, (uint160)(t.amount), t.token);\\n\\n      // Update the payer to this contract\\n      t.payer = address(this);\\n    }\\n\\n    (uint256 reserveIn, uint256 reserveOut, ) = IUniswapV2Pair(params.pool).getReserves();\\n\\n    if (!params.zeroForOne) {\\n      // Token in > token out\\n      (reserveIn, reserveOut) = (reserveOut, reserveIn);\\n    }\\n\\n    unchecked {\\n      // For 30 bps, multiply by 997\\n      uint256 feeFactor = 10_000 - params.poolFeeBps;\\n\\n      t.amount =\\n        ((t.amount * feeFactor) * reserveOut) /\\n        ((reserveIn * 10_000) + (t.amount * feeFactor));\\n    }\\n\\n    // NOTE: This check can be avoided if the factory is trusted\\n    uint256 balancePrev = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    IUniswapV2Pair(params.pool).swap(\\n      params.zeroForOne ? 0 : t.amount,\\n      params.zeroForOne ? t.amount : 0,\\n      address(this),\\n      ''\\n    );\\n\\n    uint256 balanceNext = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (balanceNext < balancePrev || balanceNext < balancePrev + t.amount) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    t.token = params.tokenOut;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp multiple tokens in a series of Uniswap V2-like pools\\n   *\\n   * Since the pools are not trusted, the balance of `params.tokenOut` is checked\\n   * before the first swap and after the last swap to ensure the correct amount\\n   * was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the last swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - pool length (uint8)\\n   *  - tokens (address 0, address 1, address pool length - 1) excluding the first\\n   *  - pools (address 0, address 1, address pool length - 1)\\n   *  - pool fees (uint16 0, uint16 1, uint16 pool length - 1)\\n   */\\n  function processWarpUniV2LikeExactInput(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV2LikeExactInputParams memory params;\\n\\n    uint256 poolLength = stream.readUint8();\\n\\n    params.tokens = new address[](poolLength + 1);\\n\\n    // The params will contain all tokens including the first to remain compatible\\n    // with the LibUniV2Like library's getAmountsOut function\\n    params.tokens[0] = t.token;\\n\\n    for (uint256 index; index < poolLength; ) {\\n      params.tokens[index + 1] = stream.readAddress();\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    params.pools = stream.readAddresses(poolLength);\\n    params.poolFeesBps = stream.readUint16s(poolLength);\\n\\n    uint256 tokenOutBalancePrev = IERC20(params.tokens[poolLength]).balanceOf(address(this));\\n\\n    uint256[] memory amounts = LibUniV2Like.getAmountsOut(\\n      params.poolFeesBps,\\n      t.amount,\\n      params.tokens,\\n      params.pools\\n    );\\n\\n    if (t.payer == address(this)) {\\n      // Transfer tokens from this contract to the first pool\\n      IERC20(t.token).safeTransfer(params.pools[0], t.amount);\\n    } else {\\n      // Transfer tokens from the sender to the first pool\\n      LibWarp.state().permit2.transferFrom(t.payer, params.pools[0], (uint160)(t.amount), t.token);\\n\\n      // Update the payer to this contract\\n      t.payer = address(this);\\n    }\\n\\n    // Same as UniV2Like\\n    for (uint index; index < poolLength; ) {\\n      uint256 indexPlusOne = index + 1;\\n      bool zeroForOne = params.tokens[index] < params.tokens[indexPlusOne] ? true : false;\\n      address to = index < params.tokens.length - 2 ? params.pools[indexPlusOne] : address(this);\\n\\n      IUniswapV2Pair(params.pools[index]).swap(\\n        zeroForOne ? 0 : amounts[indexPlusOne],\\n        zeroForOne ? amounts[indexPlusOne] : 0,\\n        to,\\n        ''\\n      );\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    uint256 nextTokenOutBalance = IERC20(params.tokens[poolLength]).balanceOf(address(this));\\n\\n    t.amount = amounts[amounts.length - 1];\\n\\n    if (\\n      // TOOD: Is this overflow check necessary?\\n      nextTokenOutBalance < tokenOutBalancePrev ||\\n      nextTokenOutBalance < tokenOutBalancePrev + t.amount\\n    ) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    t.token = params.tokens[poolLength];\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Uniswap V3-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - tokenOut (address)\\n   *  - pool (address)\\n   */\\n  function processWarpUniV3LikeExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV3LikeExactInputSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n\\n    if (t.token == address(0)) {\\n      revert NativeTokenNotSupported();\\n    }\\n\\n    // NOTE: The pool is untrusted\\n    uint256 balancePrev = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    bool zeroForOne = t.token < params.tokenOut;\\n\\n    LibUniV3Like.beforeCallback(\\n      LibUniV3Like.CallbackState({payer: t.payer, token: t.token, amount: t.amount})\\n    );\\n\\n    if (zeroForOne) {\\n      (, int256 amountOutSigned) = IUniswapV3Pool(params.pool).swap(\\n        address(this),\\n        zeroForOne,\\n        int256(t.amount),\\n        LibUniV3Like.MIN_SQRT_RATIO,\\n        ''\\n      );\\n\\n      t.amount = uint256(-amountOutSigned);\\n    } else {\\n      (int256 amountOutSigned, ) = IUniswapV3Pool(params.pool).swap(\\n        address(this),\\n        zeroForOne,\\n        int256(t.amount),\\n        LibUniV3Like.MAX_SQRT_RATIO,\\n        ''\\n      );\\n\\n      t.amount = uint256(-amountOutSigned);\\n    }\\n\\n    LibUniV3Like.afterCallback();\\n\\n    uint256 balanceNext = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (balanceNext < balancePrev || balanceNext < balancePrev + t.amount) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    t.token = params.tokenOut;\\n\\n    // TODO: Compare check-and-set vs set\\n    t.payer = address(this);\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp multiple tokens in a series of Uniswap V3-like pools\\n   *\\n   * Since the pools are not trusted, the balance of `params.tokenOut` is checked\\n   * before the first swap and after the last swap to ensure the correct amount\\n   * was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the last swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - pool length (uint8)\\n   *  - tokens (address 0, address 1, address pool length - 1) excluding the first\\n   *  - pools (address 0, address 1, address pool length - 1)\\n   */\\n  function processWarpUniV3LikeExactInput(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV2LikeExactInputParams memory params;\\n\\n    uint256 poolLength = stream.readUint8();\\n\\n    // The first token is not included\\n    params.tokens = stream.readAddresses(poolLength);\\n    params.pools = stream.readAddresses(poolLength);\\n\\n    address lastToken = params.tokens[poolLength - 1];\\n\\n    uint256 tokenOutBalancePrev = IERC20(lastToken).balanceOf(address(this));\\n\\n    for (uint index; index < poolLength; ) {\\n      address tokenIn = index == 0 ? t.token : params.tokens[index - 1]; // TOOD: unchecked\\n      t.token = params.tokens[index];\\n      bool zeroForOne = tokenIn < t.token;\\n\\n      LibUniV3Like.beforeCallback(\\n        LibUniV3Like.CallbackState({payer: t.payer, token: tokenIn, amount: t.amount})\\n      );\\n\\n      if (index == 0) {\\n        // Update the payer to this contract\\n        // TODO: Compare check-and-set vs set\\n        t.payer = address(this);\\n      }\\n\\n      address pool = params.pools[index];\\n\\n      if (zeroForOne) {\\n        (, int256 amountOutSigned) = IUniswapV3Pool(pool).swap(\\n          address(this),\\n          zeroForOne,\\n          int256(t.amount),\\n          LibUniV3Like.MIN_SQRT_RATIO,\\n          ''\\n        );\\n\\n        t.amount = uint256(-amountOutSigned);\\n      } else {\\n        (int256 amountOutSigned, ) = IUniswapV3Pool(pool).swap(\\n          address(this),\\n          zeroForOne,\\n          int256(t.amount),\\n          LibUniV3Like.MAX_SQRT_RATIO,\\n          ''\\n        );\\n\\n        t.amount = uint256(-amountOutSigned);\\n      }\\n\\n      LibUniV3Like.afterCallback();\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    uint256 nextTokenOutBalance = IERC20(t.token).balanceOf(address(this));\\n\\n    if (\\n      // TOOD: Is this overflow check necessary?\\n      nextTokenOutBalance < tokenOutBalancePrev ||\\n      nextTokenOutBalance < tokenOutBalancePrev + t.amount\\n    ) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Curve-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token may be ETH (0)\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - tokenOut (address)\\n   *  - pool (address)\\n   */\\n  function processWarpCurveExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpCurveExactInputSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n    params.tokenIndexIn = stream.readUint8();\\n    params.tokenIndexOut = stream.readUint8();\\n    params.kind = stream.readUint8();\\n    params.underlying = stream.readUint8() == 1;\\n\\n    // NOTE: The pool is untrusted\\n    bool isFromEth = t.token == address(0);\\n    bool isToEth = params.tokenOut == address(0);\\n\\n    if (t.payer != address(this)) {\\n      // Transfer tokens from the sender to this contract\\n      LibWarp.state().permit2.transferFrom(t.payer, address(this), (uint160)(t.amount), t.token);\\n\\n      // Update the payer to this contract\\n      t.payer = address(this);\\n    }\\n\\n    uint256 balancePrev = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (!isFromEth) {\\n      // TODO: Is this necessary to support USDT?\\n      IERC20(t.token).forceApprove(params.pool, t.amount);\\n    }\\n\\n    LibCurve.exchange({\\n      kind: params.kind,\\n      underlying: params.underlying,\\n      pool: params.pool,\\n      eth: isFromEth ? t.amount : 0,\\n      useEth: isFromEth || isToEth,\\n      i: params.tokenIndexIn,\\n      j: params.tokenIndexOut,\\n      dx: t.amount,\\n      // NOTE: There is no need to set a min out since the balance will be verified\\n      min_dy: 0\\n    });\\n\\n    uint256 balanceNext = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    t.token = params.tokenOut;\\n    t.amount = balanceNext - balancePrev;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Cross-chain callback from Stargate\\n   *\\n   * The tokens have already been received by this contract, `t.payer` is set to this contract\\n   * before `sgReceive` is called by the router.\\n   *\\n   * The `_nonce` field is not checked since it's assumed that LayerZero will not deliver the\\n   * same message more than once.\\n   *\\n   * The Stargate composer is trusted, meaning `_token` and `amountLD` is not verified. Should the\\n   * Stargate composer be compromised, an attacker can drain this contract.\\n   *\\n   * If the payload can not be decoded, tokens are left in this contract.\\n   * If execution runs out of gas, tokens are left in this contract.\\n   *\\n   * If an error occurs during engage, such as insufficient output amount, tokens are refunded\\n   * to the recipient.\\n   *\\n   * See https://stargateprotocol.gitbook.io/stargate/interfaces/evm-solidity-interfaces/istargatereceiver.sol\\n   */\\n  function sgReceive(\\n    uint16, // _srcChainId\\n    bytes memory _srcAddress,\\n    uint256, // _nonce\\n    address _token,\\n    uint256 amountLD,\\n    bytes memory payload\\n  ) external {\\n    if (msg.sender != address(LibWarp.state().stargateComposer)) {\\n      revert InvalidSgReceiverSender();\\n    }\\n\\n    // NOTE: Addresses cannot be decode from bytes using `abi.decode`\\n    // From https://ethereum.stackexchange.com/a/50528\\n    address srcAddress;\\n\\n    assembly {\\n      srcAddress := mload(add(_srcAddress, 20))\\n    }\\n\\n    if (srcAddress != address(this)) {\\n      // NOTE: This assumes that this contract is deployed at the same address on every chain\\n      revert InvalidSgReceiveSrcAddress();\\n    }\\n\\n    Params memory params = abi.decode(payload, (Params));\\n\\n    if (params.tokenIn == address(0)) {\\n      // Distinguish between receiving ETH and SGETH. Note that the `params.tokenIn` address is useless\\n      // otherwise because `_token` may be different on this chain\\n      _token = address(0);\\n    }\\n\\n    try\\n      IWarpLink(this).warpLinkEngage{value: _token == address(0) ? amountLD : 0}(\\n        Params({\\n          partner: params.partner,\\n          feeBps: params.feeBps,\\n          slippageBps: params.slippageBps,\\n          recipient: params.recipient,\\n          tokenIn: _token,\\n          tokenOut: params.tokenOut,\\n          amountIn: amountLD,\\n          amountOut: params.amountOut,\\n          deadline: params.deadline,\\n          commands: params.commands\\n        }),\\n        PermitParams({nonce: 0, signature: ''})\\n      )\\n    {} catch {\\n      // Refund tokens to the recipient\\n      if (_token == address(0)) {\\n        payable(params.recipient).transfer(amountLD);\\n      } else {\\n        IERC20(_token).safeTransfer(params.recipient, amountLD);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Jump to another chain using the Stargate bridge\\n   *\\n   * After this operation, the token will be unchanged and `t.amount` will\\n   * be how much was sent. `t.jumped` will be set to `1` to indicate\\n   * that no more commands should be run\\n   *\\n   * The user may construct a command where `srcPoolId` is not for `t.token`. This is harmless\\n   * because only `t.token` can be moved by Stargate.\\n   *\\n   * This command must not run inside of a split.\\n   *\\n   * If the jump is the final operation, meaning the tokens will be delivered to the recipient on\\n   * the other chain without further processing, the fee is charged and the `Warp` event is emitted\\n   * in this function.\\n   *\\n   * A bridge fee must be paid in the native token. This fee is determined with\\n   * `IStargateRouter.quoteLayerZeroFee`\\n   *\\n   * The value for `t.token` remains the same and is not chained.\\n   *\\n   * Params are read from the stream as:\\n   *   - dstChainId (uint16)\\n   *   - srcPoolId (uint8)\\n   *   - dstPoolId (uint8)\\n   *   - dstGasForCall (uint32)\\n   *   - tokenOut (address) when `dstGasForCall` > 0\\n   *   - amountOut (uint256) when `dstGasForCall` > 0\\n   *   - commands (uint256 length, ...bytes) when `dstGasForCall` > 0\\n   */\\n  function processJumpStargate(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    // TODO: Does this use the same gas than (a, b, c,) = (stream.read, ...)?\\n    JumpStargateParams memory params;\\n    params.dstChainId = stream.readUint16();\\n    params.srcPoolId = stream.readUint8();\\n    params.dstPoolId = stream.readUint8();\\n    params.dstGasForCall = stream.readUint32();\\n\\n    if (params.dstGasForCall > 0) {\\n      // NOTE: `amountIn` is left as zero\\n      Params memory destParams;\\n      destParams.partner = t.paramPartner;\\n      destParams.feeBps = t.paramFeeBps;\\n      destParams.slippageBps = t.paramSlippageBps;\\n      destParams.recipient = t.paramRecipient;\\n      // NOTE: Used to distinguish ETH vs SGETH. Tokens on the other chain do not not necessarily have\\n      // the same address as on this chain\\n      destParams.tokenIn = t.token;\\n      destParams.tokenOut = stream.readAddress();\\n      destParams.amountOut = stream.readUint256();\\n      destParams.deadline = t.paramDeadline;\\n      destParams.commands = stream.readBytes();\\n      params.payload = abi.encode(destParams);\\n    }\\n\\n    if (t.token != t.paramTokenIn) {\\n      if (params.payload.length == 0) {\\n        // If the tokens are being delivered directly to the recipient without a second\\n        // WarpLink engage, the fee is charged on this chain\\n        // NOTE: It is not possible to know how many tokens were delivered. Therfore positive slippage\\n        // is never charged\\n        t.amount = LibStarVault.calculateAndRegisterFee(\\n          t.paramPartner,\\n          t.token,\\n          t.paramFeeBps,\\n          t.amount,\\n          t.amount\\n        );\\n      }\\n\\n      emit LibWarp.Warp(t.paramPartner, t.paramTokenIn, t.token, t.paramAmountIn, t.amount);\\n    }\\n\\n    // Enforce minimum amount/max slippage\\n    if (t.amount < LibWarp.applySlippage(t.paramAmountOut, t.paramSlippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    IStargateComposer stargateComposer = LibWarp.state().stargateComposer;\\n\\n    if (t.token != address(0)) {\\n      if (t.payer != address(this)) {\\n        // Transfer tokens from the sender to this contract\\n        LibWarp.state().permit2.transferFrom(t.payer, address(this), (uint160)(t.amount), t.token);\\n\\n        // Update the payer to this contract\\n        t.payer = address(this);\\n      }\\n\\n      // Allow Stargate to transfer the tokens. When there is a payload, the composer is used, else the router\\n      IERC20(t.token).forceApprove(\\n        params.payload.length == 0 ? stargateComposer.stargateRouter() : address(stargateComposer),\\n        t.amount\\n      );\\n    }\\n\\n    t.jumped = 1;\\n\\n    // Swap on the composer if there is a payload, else the router\\n    IStargateRouter(\\n      params.payload.length == 0 ? stargateComposer.stargateRouter() : address(stargateComposer)\\n    ).swap{\\n      value: t.token == address(0) ? t.amount + t.nativeValueRemaining : t.nativeValueRemaining\\n    }({\\n      _dstChainId: params.dstChainId,\\n      _srcPoolId: params.srcPoolId,\\n      _dstPoolId: params.dstPoolId,\\n      //  NOTE: There is no guarantee that `msg.sender` can handle receiving tokens/ETH\\n      // TODO: Use `msg.sender` if it's EOA, else use this contract\\n      _refundAddress: payable(address(this)),\\n      _amountLD: t.amount,\\n      // NOTE: This is imperfect because the user may already have eaten some slippage and may eat\\n      // more on the other chain. It also assumes the tokens are of nearly equal value\\n      _minAmountLD: LibWarp.applySlippage(t.amount, t.paramSlippageBps),\\n      _lzTxParams: IStargateRouter.lzTxObj({\\n        dstGasForCall: params.dstGasForCall,\\n        dstNativeAmount: 0,\\n        dstNativeAddr: ''\\n      }),\\n      // NOTE: This assumes the contract is deployed at the same address on every chain.\\n      // If this is not the case, a new param needs to be added with the next WarpLink address\\n      _to: abi.encodePacked(params.payload.length > 0 ? address(this) : t.paramRecipient),\\n      _payload: params.payload\\n    });\\n\\n    t.nativeValueRemaining = 0;\\n\\n    return t;\\n  }\\n\\n  function engageInternal(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    uint256 commandCount = stream.readUint8();\\n\\n    // TODO: End of stream check?\\n    for (uint256 commandIndex; commandIndex < commandCount; commandIndex++) {\\n      // TODO: Unchecked?\\n      uint256 commandType = stream.readUint8();\\n\\n      if (commandType == COMMAND_TYPE_WRAP) {\\n        t = processWrap(t);\\n      } else if (commandType == COMMAND_TYPE_UNWRAP) {\\n        t = processUnwrap(t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT_SINGLE) {\\n        t = processWarpUniV2LikeExactInputSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_SPLIT) {\\n        t = processSplit(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT) {\\n        t = processWarpUniV2LikeExactInput(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT_SINGLE) {\\n        t = processWarpUniV3LikeExactInputSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT) {\\n        t = processWarpUniV3LikeExactInput(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_CURVE_EXACT_INPUT_SINGLE) {\\n        t = processWarpCurveExactInputSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_JUMP_STARGATE) {\\n        if (commandIndex != commandCount - 1) {\\n          revert JumpMustBeLastCommand();\\n        }\\n\\n        t = processJumpStargate(stream, t);\\n      } else {\\n        revert UnhandledCommand();\\n      }\\n    }\\n\\n    return t;\\n  }\\n\\n  function warpLinkEngage(Params memory params, PermitParams calldata permit) external payable {\\n    if (block.timestamp > params.deadline) {\\n      revert DeadlineExpired();\\n    }\\n\\n    TransientState memory t;\\n    t.paramPartner = params.partner;\\n    t.paramFeeBps = params.feeBps;\\n    t.paramSlippageBps = params.slippageBps;\\n    t.paramRecipient = params.recipient;\\n    t.paramTokenIn = params.tokenIn;\\n    t.paramAmountIn = params.amountIn;\\n    t.paramAmountOut = params.amountOut;\\n    t.paramSlippageBps = params.slippageBps;\\n    t.paramDeadline = params.deadline;\\n    t.amount = params.amountIn;\\n    t.token = params.tokenIn;\\n\\n    if (params.tokenIn == address(0)) {\\n      if (msg.value < params.amountIn) {\\n        revert InsufficientEthValue();\\n      }\\n\\n      t.nativeValueRemaining = msg.value - params.amountIn;\\n\\n      // The ETH has already been moved to this contract\\n      t.payer = address(this);\\n    } else {\\n      // Tokens will initially moved from the sender\\n      t.payer = msg.sender;\\n\\n      t.nativeValueRemaining = msg.value;\\n\\n      // Permit tokens / set allowance\\n      // The signature is omitted when `warpLinkEngage` is called from `sgReceive`\\n      if (permit.signature.length > 0) {\\n        LibWarp.state().permit2.permit(\\n          msg.sender,\\n          IAllowanceTransfer.PermitSingle({\\n            details: IAllowanceTransfer.PermitDetails({\\n              token: params.tokenIn,\\n              amount: (uint160)(params.amountIn),\\n              expiration: (uint48)(params.deadline),\\n              nonce: (uint48)(permit.nonce)\\n            }),\\n            spender: address(this),\\n            sigDeadline: (uint256)(params.deadline)\\n          }),\\n          permit.signature\\n        );\\n      }\\n    }\\n\\n    uint256 stream = Stream.createStream(params.commands);\\n\\n    t = engageInternal(stream, t);\\n\\n    uint256 amountOut = t.amount;\\n    address tokenOut = t.token;\\n\\n    if (tokenOut != params.tokenOut) {\\n      revert UnexpectedTokenOut();\\n    }\\n\\n    // Enforce minimum amount/max slippage\\n    if (amountOut < LibWarp.applySlippage(params.amountOut, params.slippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    if (t.jumped == 1) {\\n      // The coins have jumped away from this chain. Fees are colelcted before\\n      // the jump or on the other chain.\\n      //\\n      // `t.nativeValueRemaining` is not checked since it should be zero\\n      return;\\n    }\\n\\n    // Collect fees\\n    amountOut = LibStarVault.calculateAndRegisterFee(\\n      params.partner,\\n      params.tokenOut,\\n      params.feeBps,\\n      params.amountOut,\\n      amountOut\\n    );\\n\\n    if (amountOut == 0) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    // Deliver tokens\\n    if (tokenOut == address(0)) {\\n      payable(params.recipient).transfer(amountOut);\\n    } else {\\n      IERC20(tokenOut).safeTransfer(params.recipient, amountOut);\\n    }\\n\\n    if (t.nativeValueRemaining > 0) {\\n      // TODO: Is this the correct recipient?\\n      payable(msg.sender).transfer(t.nativeValueRemaining);\\n    }\\n\\n    emit LibWarp.Warp(params.partner, params.tokenIn, params.tokenOut, params.amountIn, amountOut);\\n  }\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IAllowanceTransfer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IEIP712} from './IEIP712.sol';\\n\\n/// @title AllowanceTransfer\\n/// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface IAllowanceTransfer is IEIP712 {\\n  /// @notice Thrown when an allowance on a token has expired.\\n  /// @param deadline The timestamp at which the allowed amount is no longer valid\\n  error AllowanceExpired(uint256 deadline);\\n\\n  /// @notice Thrown when an allowance on a token has been depleted.\\n  /// @param amount The maximum amount allowed\\n  error InsufficientAllowance(uint256 amount);\\n\\n  /// @notice Thrown when too many nonces are invalidated.\\n  error ExcessiveInvalidation();\\n\\n  /// @notice Emits an event when the owner successfully invalidates an ordered nonce.\\n  event NonceInvalidation(\\n    address indexed owner,\\n    address indexed token,\\n    address indexed spender,\\n    uint48 newNonce,\\n    uint48 oldNonce\\n  );\\n\\n  /// @notice Emits an event when the owner successfully sets permissions on a token for the spender.\\n  event Approval(\\n    address indexed owner,\\n    address indexed token,\\n    address indexed spender,\\n    uint160 amount,\\n    uint48 expiration\\n  );\\n\\n  /// @notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\\n  event Permit(\\n    address indexed owner,\\n    address indexed token,\\n    address indexed spender,\\n    uint160 amount,\\n    uint48 expiration,\\n    uint48 nonce\\n  );\\n\\n  /// @notice Emits an event when the owner sets the allowance back to 0 with the lockdown function.\\n  event Lockdown(address indexed owner, address token, address spender);\\n\\n  /// @notice The permit data for a token\\n  struct PermitDetails {\\n    // ERC20 token address\\n    address token;\\n    // the maximum amount allowed to spend\\n    uint160 amount;\\n    // timestamp at which a spender's token allowances become invalid\\n    uint48 expiration;\\n    // an incrementing value indexed per owner,token,and spender for each signature\\n    uint48 nonce;\\n  }\\n\\n  /// @notice The permit message signed for a single token allownce\\n  struct PermitSingle {\\n    // the permit data for a single token alownce\\n    PermitDetails details;\\n    // address permissioned on the allowed tokens\\n    address spender;\\n    // deadline on the permit signature\\n    uint256 sigDeadline;\\n  }\\n\\n  /// @notice The permit message signed for multiple token allowances\\n  struct PermitBatch {\\n    // the permit data for multiple token allowances\\n    PermitDetails[] details;\\n    // address permissioned on the allowed tokens\\n    address spender;\\n    // deadline on the permit signature\\n    uint256 sigDeadline;\\n  }\\n\\n  /// @notice The saved permissions\\n  /// @dev This info is saved per owner, per token, per spender and all signed over in the permit message\\n  /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n  struct PackedAllowance {\\n    // amount allowed\\n    uint160 amount;\\n    // permission expiry\\n    uint48 expiration;\\n    // an incrementing value indexed per owner,token,and spender for each signature\\n    uint48 nonce;\\n  }\\n\\n  /// @notice A token spender pair.\\n  struct TokenSpenderPair {\\n    // the token the spender is approved\\n    address token;\\n    // the spender address\\n    address spender;\\n  }\\n\\n  /// @notice Details for a token transfer.\\n  struct AllowanceTransferDetails {\\n    // the owner of the token\\n    address from;\\n    // the recipient of the token\\n    address to;\\n    // the amount of the token\\n    uint160 amount;\\n    // the token to be transferred\\n    address token;\\n  }\\n\\n  /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\\n  /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\\n  /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\\n  function allowance(\\n    address user,\\n    address token,\\n    address spender\\n  ) external view returns (uint160 amount, uint48 expiration, uint48 nonce);\\n\\n  /// @notice Approves the spender to use up to amount of the specified token up until the expiration\\n  /// @param token The token to approve\\n  /// @param spender The spender address to approve\\n  /// @param amount The approved amount of the token\\n  /// @param expiration The timestamp at which the approval is no longer valid\\n  /// @dev The packed allowance also holds a nonce, which will stay unchanged in approve\\n  /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n  function approve(address token, address spender, uint160 amount, uint48 expiration) external;\\n\\n  /// @notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\\n  /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n  /// @param owner The owner of the tokens being approved\\n  /// @param permitSingle Data signed over by the owner specifying the terms of approval\\n  /// @param signature The owner's signature over the permit data\\n  function permit(\\n    address owner,\\n    PermitSingle memory permitSingle,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\\n  /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n  /// @param owner The owner of the tokens being approved\\n  /// @param permitBatch Data signed over by the owner specifying the terms of approval\\n  /// @param signature The owner's signature over the permit data\\n  function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\\n\\n  /// @notice Transfer approved tokens from one address to another\\n  /// @param from The address to transfer from\\n  /// @param to The address of the recipient\\n  /// @param amount The amount of the token to transfer\\n  /// @param token The token address to transfer\\n  /// @dev Requires the from address to have approved at least the desired amount\\n  /// of tokens to msg.sender.\\n  function transferFrom(address from, address to, uint160 amount, address token) external;\\n\\n  /// @notice Transfer approved tokens in a batch\\n  /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\\n  /// @dev Requires the from addresses to have approved at least the desired amount\\n  /// of tokens to msg.sender.\\n  function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\\n\\n  /// @notice Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity\\n  /// by batch revoking approvals\\n  /// @param approvals Array of approvals to revoke.\\n  function lockdown(TokenSpenderPair[] calldata approvals) external;\\n\\n  /// @notice Invalidate nonces for a given (token, spender) pair\\n  /// @param token The token to invalidate nonces for\\n  /// @param spender The spender to invalidate nonces for\\n  /// @param newNonce The new nonce to set. Invalidates all nonces less than it.\\n  /// @dev Can't invalidate more than 2**16 nonces per transaction.\\n  function invalidateNonces(address token, address spender, uint48 newNonce) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/external/ICurvePool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// Kind 1\\n// Example v0.2.4 tripool (stables)\\n// See https://etherscan.io/address/0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7\\ninterface ICurvePoolKind1 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function base_coins(uint256 index) external view returns (address);\\n\\n  function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable;\\n\\n  function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable;\\n}\\n\\n// Kind 2\\n// Example v0.2.8, Stableswap, v0.2.5 Curve GUSD Metapool\\n// See https://etherscan.io/address/0xdc24316b9ae028f1497c275eb9192a3ea0f67022\\ninterface ICurvePoolKind2 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function base_coins(uint256 index) external view returns (address);\\n\\n  // 0x3df02124\\n  function exchange(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n\\n  function exchange_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n}\\n\\n// Kind 3\\n// Example v0.3.0, \\\"# EUR/3crv pool where 3crv is _second_, not first\\\"\\n// See https://etherscan.io/address/0x5D0F47B32fDd343BfA74cE221808e2abE4A53827\\n// NOTE: This contract has an `exchange_underlying` with a receiver also\\ninterface ICurvePoolKind3 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function underlying_coins(uint256 index) external view returns (address);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    bool use_eth\\n  ) external payable returns (uint256);\\n\\n  function exchange_underlying(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n}\\n\\n// Kind 4, uint256s with no return value\\n// Example v0.2.15, \\\"Pool for USDT/BTC/ETH or similar\\\"\\n// See https://arbiscan.io/address/0x960ea3e3C7FB317332d990873d354E18d7645590#code\\ninterface ICurvePoolKind4 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function underlying_coins(uint256 index) external view returns (address);\\n\\n  function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external payable;\\n\\n  function exchange_underlying(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external payable;\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IEIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IEIP712 {\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IPermit2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ISignatureTransfer} from './ISignatureTransfer.sol';\\nimport {IAllowanceTransfer} from './IAllowanceTransfer.sol';\\n\\n/// @notice Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\\n/// @dev Users must approve Permit2 before calling any of the transfer functions.\\ninterface IPermit2 is ISignatureTransfer, IAllowanceTransfer {\\n  // IPermit2 unifies the two interfaces so users have maximal flexibility with their approval.\\n}\\n\"\n    },\n    \"contracts/interfaces/external/ISignatureTransfer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IEIP712} from './IEIP712.sol';\\n\\n/// @title SignatureTransfer\\n/// @notice Handles ERC20 token transfers through signature based actions\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface ISignatureTransfer is IEIP712 {\\n  /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\\n  /// @param maxAmount The maximum amount a spender can request to transfer\\n  error InvalidAmount(uint256 maxAmount);\\n\\n  /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\\n  /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\\n  error LengthMismatch();\\n\\n  /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\\n  event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\\n\\n  /// @notice The token and amount details for a transfer signed in the permit transfer signature\\n  struct TokenPermissions {\\n    // ERC20 token address\\n    address token;\\n    // the maximum amount that can be spent\\n    uint256 amount;\\n  }\\n\\n  /// @notice The signed permit message for a single token transfer\\n  struct PermitTransferFrom {\\n    TokenPermissions permitted;\\n    // a unique value for every token owner's signature to prevent signature replays\\n    uint256 nonce;\\n    // deadline on the permit signature\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Specifies the recipient address and amount for batched transfers.\\n  /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount.\\n  struct SignatureTransferDetails {\\n    // recipient address\\n    address to;\\n    // spender requested amount\\n    uint256 requestedAmount;\\n  }\\n\\n  /// @notice Used to reconstruct the signed permit message for multiple token transfers\\n  /// @dev Do not need to pass in spender address as it is required that it is msg.sender\\n  /// @dev Note that a user still signs over a spender address\\n  struct PermitBatchTransferFrom {\\n    // the tokens and corresponding amounts permitted for a transfer\\n    TokenPermissions[] permitted;\\n    // a unique value for every token owner's signature to prevent signature replays\\n    uint256 nonce;\\n    // deadline on the permit signature\\n    uint256 deadline;\\n  }\\n\\n  /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\\n  /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\\n  /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\\n  /// @dev It returns a uint256 bitmap\\n  /// @dev The index, or wordPosition is capped at type(uint248).max\\n  function nonceBitmap(address, uint256) external view returns (uint256);\\n\\n  /// @notice Transfers a token using a signed permit message\\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails The spender's requested transfer details for the permitted token\\n  /// @param signature The signature to verify\\n  function permitTransferFrom(\\n    PermitTransferFrom memory permit,\\n    SignatureTransferDetails calldata transferDetails,\\n    address owner,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Transfers a token using a signed permit message\\n  /// @notice Includes extra data provided by the caller to verify signature over\\n  /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails The spender's requested transfer details for the permitted token\\n  /// @param witness Extra data to include when checking the user signature\\n  /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n  /// @param signature The signature to verify\\n  function permitWitnessTransferFrom(\\n    PermitTransferFrom memory permit,\\n    SignatureTransferDetails calldata transferDetails,\\n    address owner,\\n    bytes32 witness,\\n    string calldata witnessTypeString,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Transfers multiple tokens using a signed permit message\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n  /// @param signature The signature to verify\\n  function permitTransferFrom(\\n    PermitBatchTransferFrom memory permit,\\n    SignatureTransferDetails[] calldata transferDetails,\\n    address owner,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Transfers multiple tokens using a signed permit message\\n  /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n  /// @notice Includes extra data provided by the caller to verify signature over\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n  /// @param witness Extra data to include when checking the user signature\\n  /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n  /// @param signature The signature to verify\\n  function permitWitnessTransferFrom(\\n    PermitBatchTransferFrom memory permit,\\n    SignatureTransferDetails[] calldata transferDetails,\\n    address owner,\\n    bytes32 witness,\\n    string calldata witnessTypeString,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Invalidates the bits specified in mask for the bitmap at the word position\\n  /// @dev The wordPos is maxed at type(uint248).max\\n  /// @param wordPos A number to index the nonceBitmap at\\n  /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\\n  function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IStargateComposer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\nimport {IStargateRouter} from './IStargateRouter.sol';\\n\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IStargateComposer is IStargateRouter {\\n  function stargateRouter() external view returns (address);\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IStargateReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.6;\\n\\ninterface IStargateReceiver {\\n  function sgReceive(\\n    uint16 _srcChainId, // the remote chainId sending the tokens\\n    bytes memory _srcAddress, // the remote Bridge address\\n    uint256 _nonce,\\n    address _token, // the token contract on the local chain\\n    uint256 amountLD, // the qty of local _token contract tokens\\n    bytes memory payload\\n  ) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IStargateRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IStargateRouter {\\n  struct lzTxObj {\\n    uint256 dstGasForCall;\\n    uint256 dstNativeAmount;\\n    bytes dstNativeAddr;\\n  }\\n\\n  function swap(\\n    uint16 _dstChainId,\\n    uint256 _srcPoolId,\\n    uint256 _dstPoolId,\\n    address payable _refundAddress,\\n    uint256 _amountLD,\\n    uint256 _minAmountLD,\\n    lzTxObj memory _lzTxParams,\\n    bytes calldata _to,\\n    bytes calldata _payload\\n  ) external payable;\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IUniswapV2Pair.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n  function getReserves()\\n    external\\n    view\\n    returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/external/IUniswapV3Pool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapV3Pool {\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function liquidity() external view returns (uint128);\\n}\\n\"\n    },\n    \"contracts/interfaces/ICurve.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\nimport {ILibCurve} from '../interfaces/ILibCurve.sol';\\nimport {ILibStarVault} from '../interfaces/ILibStarVault.sol';\\nimport {ILibWarp} from '../interfaces/ILibWarp.sol';\\n\\ninterface ICurve is ILibCurve, ILibStarVault, ILibWarp {\\n  error DeadlineExpired();\\n  error InsufficientOutputAmount();\\n  error EthTransferFailed();\\n\\n  struct ExactInputSingleParams {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address recipient;\\n    address pool;\\n    uint16 feeBps;\\n    uint16 slippageBps;\\n    address partner;\\n    address tokenIn;\\n    address tokenOut;\\n    uint48 deadline;\\n    uint8 tokenIndexIn;\\n    uint8 tokenIndexOut;\\n    uint8 kind;\\n    bool underlying;\\n    bool useEth;\\n  }\\n\\n  function curveExactInputSingle(\\n    ExactInputSingleParams memory params,\\n    PermitParams calldata permit\\n  ) external payable returns (uint256 amountOut);\\n}\\n\"\n    },\n    \"contracts/interfaces/ILibCurve.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibCurve {\\n  error UnhandledPoolKind();\\n}\\n\"\n    },\n    \"contracts/interfaces/ILibStarVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibStarVault {\\n  /**\\n   * The swap fee is over the maximum allowed\\n   */\\n  error FeeTooHigh(uint256 maxFeeBps);\\n\\n  event Fee(\\n    address indexed partner,\\n    address indexed token,\\n    uint256 partnerFee,\\n    uint256 protocolFee\\n  );\\n}\\n\"\n    },\n    \"contracts/interfaces/ILibUniV3Like.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibUniV3Like {\\n  error CallbackAlreadyActive();\\n  error CallbackStillActive();\\n}\\n\"\n    },\n    \"contracts/interfaces/ILibWarp.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibWarp {\\n  event Warp(\\n    address indexed partner,\\n    address indexed tokenIn,\\n    address indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n}\\n\"\n    },\n    \"contracts/interfaces/IUniV3Callback.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUniV3Callback {\\n  error CallbackInactive();\\n}\\n\"\n    },\n    \"contracts/interfaces/IWarpLink.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\nimport {ILibCurve} from '../interfaces/ILibCurve.sol';\\nimport {ILibStarVault} from '../interfaces/ILibStarVault.sol';\\nimport {ILibUniV3Like} from '../interfaces/ILibUniV3Like.sol';\\nimport {ILibWarp} from '../interfaces/ILibWarp.sol';\\n\\ninterface IWarpLink is ILibCurve, ILibStarVault, ILibUniV3Like, ILibWarp {\\n  error UnhandledCommand();\\n  error InsufficientEthValue();\\n  error InsufficientOutputAmount();\\n  error InsufficientTokensDelivered();\\n  error UnexpectedTokenForWrap();\\n  error UnexpectedTokenForUnwrap();\\n  error UnexpectedTokenOut();\\n  error InsufficientAmountRemaining();\\n  error NotEnoughParts();\\n  error InconsistentPartTokenOut();\\n  error InconsistentPartPayerOut();\\n  error UnexpectedPayerForWrap();\\n  error NativeTokenNotSupported();\\n  error DeadlineExpired();\\n  error IllegalJumpInSplit();\\n  error JumpMustBeLastCommand();\\n  error InvalidSgReceiverSender();\\n  error InvalidSgReceiveSrcAddress();\\n\\n  struct Params {\\n    address partner;\\n    uint16 feeBps;\\n    /**\\n     * How much below `amountOut` the user will accept\\n     */\\n    uint16 slippageBps;\\n    address recipient;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 amountIn;\\n    /**\\n     * The amount the user was quoted\\n     */\\n    uint256 amountOut;\\n    uint48 deadline;\\n    bytes commands;\\n  }\\n\\n  function warpLinkEngage(Params memory params, PermitParams calldata permit) external payable;\\n}\\n\"\n    },\n    \"contracts/libraries/LibCurve.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {ICurvePoolKind1, ICurvePoolKind2, ICurvePoolKind3, ICurvePoolKind4} from '../interfaces/external/ICurvePool.sol';\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibCurve\\n */\\nlibrary LibCurve {\\n  error UnhandledPoolKind();\\n\\n  function exchange(\\n    uint8 kind,\\n    bool underlying,\\n    address pool,\\n    uint256 eth,\\n    uint8 i,\\n    uint8 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    bool useEth\\n  ) internal {\\n    if (kind == 1) {\\n      if (underlying) {\\n        ICurvePoolKind1(pool).exchange_underlying{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      } else {\\n        ICurvePoolKind1(pool).exchange{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      }\\n    } else if (kind == 2) {\\n      if (underlying) {\\n        ICurvePoolKind2(pool).exchange_underlying{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      } else {\\n        ICurvePoolKind2(pool).exchange{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      }\\n    } else if (kind == 3) {\\n      if (underlying) {\\n        ICurvePoolKind3(pool).exchange_underlying{value: eth}(uint256(i), uint256(j), dx, min_dy);\\n      } else if (useEth) {\\n        ICurvePoolKind3(pool).exchange{value: eth}(uint256(i), uint256(j), dx, min_dy, true);\\n      } else {\\n        ICurvePoolKind3(pool).exchange(uint256(i), uint256(j), dx, min_dy);\\n      }\\n    } else if (kind == 4) {\\n      if (underlying) {\\n        revert UnhandledPoolKind();\\n      } else {\\n        ICurvePoolKind4(pool).exchange{value: eth}(uint256(i), uint256(j), dx, min_dy);\\n      }\\n    } else {\\n      revert UnhandledPoolKind();\\n    }\\n  }\\n}\\n\"\n    },\n    \"contracts/libraries/LibStarVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibStarVault\\n */\\nlibrary LibStarVault {\\n  /**\\n   * The swap fee is over the maximum allowed\\n   */\\n  error FeeTooHigh(uint256 maxFeeBps);\\n\\n  event Fee(\\n    address indexed partner,\\n    address indexed token,\\n    uint256 partnerFee,\\n    uint256 protocolFee\\n  );\\n\\n  struct State {\\n    /**\\n     * Token balances per partner\\n     * Mapping: Partner -> token -> balance\\n     */\\n    mapping(address => mapping(address => uint256)) partnerBalances;\\n    /**\\n     * Total balances per token for all partners.\\n     * Mapping: token -> balance\\n     */\\n    mapping(address => uint256) partnerBalancesTotal;\\n  }\\n\\n  uint256 private constant MAX_FEE_BPS = 2_000;\\n\\n  function state() internal pure returns (State storage s) {\\n    /**\\n     * NOTE: Three storage slots used to store all partners addresses and partner tokens were\\n     * removed to save gas.\\n     */\\n    unchecked {\\n      uint256 storagePosition = uint256(keccak256('diamond.storage.LibStarVault')) + 3;\\n\\n      assembly {\\n        s.slot := storagePosition\\n      }\\n    }\\n  }\\n\\n  /**\\n   * By using a library function we ensure that the storage used by the library is whichever contract\\n   * is calling this function\\n   */\\n  function registerCollectedFee(\\n    address partner,\\n    address token,\\n    uint256 partnerFee,\\n    uint256 protocolFee\\n  ) internal {\\n    State storage s = state();\\n\\n    unchecked {\\n      s.partnerBalances[partner][token] += partnerFee;\\n      s.partnerBalancesTotal[token] += partnerFee;\\n    }\\n\\n    emit Fee(partner, token, partnerFee, protocolFee);\\n  }\\n\\n  function calculateAndRegisterFee(\\n    address partner,\\n    address token,\\n    uint256 feeBps,\\n    uint256 amountOutQuoted,\\n    uint256 amountOutActual\\n  ) internal returns (uint256 amountOutUser_) {\\n    if (feeBps > MAX_FEE_BPS) {\\n      revert FeeTooHigh(MAX_FEE_BPS);\\n    }\\n\\n    unchecked {\\n      uint256 feeTotal;\\n      uint256 feeBasis = amountOutActual;\\n\\n      if (amountOutActual > amountOutQuoted) {\\n        // Positive slippage\\n        feeTotal = amountOutActual - amountOutQuoted;\\n\\n        // Change the fee basis for use below\\n        feeBasis = amountOutQuoted;\\n      }\\n\\n      // Fee taken from actual\\n      feeTotal += (feeBasis * feeBps) / 10_000;\\n\\n      // If a partner is set, split the fee in half\\n      uint256 feePartner = partner == address(0) ? 0 : (feeTotal * 50) / 100;\\n      uint256 feeProtocol = feeTotal - feePartner;\\n\\n      if (feeProtocol > 0) {\\n        registerCollectedFee(partner, token, feePartner, feeProtocol);\\n      }\\n\\n      return amountOutActual - feeTotal;\\n    }\\n  }\\n}\\n\"\n    },\n    \"contracts/libraries/LibUniV2Like.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IUniswapV2Pair} from 'contracts/interfaces/external/IUniswapV2Pair.sol';\\n\\nlibrary LibUniV2Like {\\n  function getAmountsOut(\\n    uint16[] memory poolFeesBps,\\n    uint256 amountIn,\\n    address[] memory tokens,\\n    address[] memory pools\\n  ) internal view returns (uint256[] memory amounts) {\\n    uint256 poolLength = pools.length;\\n\\n    amounts = new uint256[](tokens.length);\\n    amounts[0] = amountIn;\\n\\n    for (uint256 index; index < poolLength; ) {\\n      address token0 = tokens[index];\\n      address token1 = tokens[index + 1];\\n\\n      // For 30 bps, multiply by 9970\\n      uint256 feeFactor = 10_000 - poolFeesBps[index];\\n\\n      (uint256 reserveIn, uint256 reserveOut, ) = IUniswapV2Pair(pools[index]).getReserves();\\n\\n      if (token0 > token1) {\\n        (reserveIn, reserveOut) = (reserveOut, reserveIn);\\n      }\\n\\n      unchecked {\\n        amountIn =\\n          ((amountIn * feeFactor) * reserveOut) /\\n          ((reserveIn * 10_000) + (amountIn * feeFactor));\\n      }\\n\\n      // Recycling `amountIn`\\n      amounts[index + 1] = amountIn;\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n}\\n\"\n    },\n    \"contracts/libraries/LibUniV3Like.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibUniV3Like\\n */\\nlibrary LibUniV3Like {\\n  error CallbackAlreadyActive();\\n  error CallbackStillActive();\\n\\n  bytes32 constant DIAMOND_STORAGE_SLOT = keccak256('diamond.storage.LibUniV3Like');\\n\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739 + 1;\\n\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342 - 1;\\n\\n  struct CallbackState {\\n    uint256 amount;\\n    address payer;\\n    address token;\\n  }\\n\\n  struct State {\\n    // TODO: Does this help by using `MSTORE8`?\\n    uint8 isActive;\\n    /**\\n     * Transient storage variable used in the callback\\n     */\\n    CallbackState callback;\\n  }\\n\\n  function state() internal pure returns (State storage s) {\\n    bytes32 slot = DIAMOND_STORAGE_SLOT;\\n\\n    assembly {\\n      s.slot := slot\\n    }\\n  }\\n\\n  function beforeCallback(CallbackState memory callback) internal {\\n    if (state().isActive == 1) {\\n      revert CallbackAlreadyActive();\\n    }\\n\\n    state().isActive = 1;\\n    state().callback = callback;\\n  }\\n\\n  function afterCallback() internal view {\\n    if (state().isActive == 1) {\\n      // The field is expected to be zeroed out by the callback\\n      revert CallbackStillActive();\\n    }\\n  }\\n}\\n\"\n    },\n    \"contracts/libraries/LibWarp.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IWETH} from '@uniswap/v2-periphery/contracts/interfaces/IWETH.sol';\\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\\nimport {IStargateComposer} from '../interfaces/external/IStargateComposer.sol';\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibWarp\\n */\\nlibrary LibWarp {\\n  event Warp(\\n    address indexed partner,\\n    address indexed tokenIn,\\n    address indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  struct State {\\n    IWETH weth;\\n    IPermit2 permit2;\\n    IStargateComposer stargateComposer;\\n  }\\n\\n  bytes32 constant DIAMOND_STORAGE_SLOT = keccak256('diamond.storage.LibWarp');\\n\\n  function state() internal pure returns (State storage s) {\\n    bytes32 slot = DIAMOND_STORAGE_SLOT;\\n\\n    assembly {\\n      s.slot := slot\\n    }\\n  }\\n\\n  function applySlippage(uint256 amount, uint16 slippage) internal pure returns (uint256) {\\n    return (amount * (10_000 - slippage)) / 10_000;\\n  }\\n}\\n\"\n    },\n    \"contracts/libraries/PermitParams.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nstruct PermitParams {\\n  uint256 nonce;\\n  bytes signature;\\n}\\n\"\n    },\n    \"contracts/libraries/Stream.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * Stream reader\\n *\\n * Note that the stream position is always behind by one as per the\\n * original implementation\\n *\\n * See https://github.com/sushiswap/sushiswap/blob/master/protocols/route-processor/contracts/InputStream.sol\\n */\\nlibrary Stream {\\n  function createStream(bytes memory data) internal pure returns (uint256 stream) {\\n    assembly {\\n      // Get a pointer to the next free memory\\n      stream := mload(0x40)\\n\\n      // Move the free memory pointer forward by 64 bytes, since\\n      // this function will store 2 words (64 bytes) to memory.\\n      mstore(0x40, add(stream, 64))\\n\\n      // Store a pointer to the data in the first word of the stream\\n      mstore(stream, data)\\n\\n      // Store a pointer to the end of the data in the second word of the stream\\n      let length := mload(data)\\n      mstore(add(stream, 32), add(data, length))\\n    }\\n  }\\n\\n  function isNotEmpty(uint256 stream) internal pure returns (bool) {\\n    uint256 pos;\\n    uint256 finish;\\n    assembly {\\n      pos := mload(stream)\\n      finish := mload(add(stream, 32))\\n    }\\n    return pos < finish;\\n  }\\n\\n  function readUint8(uint256 stream) internal pure returns (uint8 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 1)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint16(uint256 stream) internal pure returns (uint16 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 2)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint24(uint256 stream) internal pure returns (uint24 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 3)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint32(uint256 stream) internal pure returns (uint32 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 4)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint48(uint256 stream) internal pure returns (uint48 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 6)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint160(uint256 stream) internal pure returns (uint160 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 20)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint256(uint256 stream) internal pure returns (uint256 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 32)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readBytes32(uint256 stream) internal pure returns (bytes32 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 32)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readAddress(uint256 stream) internal pure returns (address res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 20)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readBytes(uint256 stream) internal pure returns (bytes memory res) {\\n    assembly {\\n      let pos := mload(stream)\\n      res := add(pos, 32)\\n      let length := mload(res)\\n      mstore(stream, add(res, length))\\n    }\\n  }\\n\\n  function readAddresses(\\n    uint256 stream,\\n    uint256 count\\n  ) internal pure returns (address[] memory res) {\\n    res = new address[](count);\\n\\n    for (uint256 index; index < count; ) {\\n      res[index] = readAddress(stream);\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n\\n  function readUint16s(uint256 stream, uint256 count) internal pure returns (uint16[] memory res) {\\n    res = new uint16[](count);\\n\\n    for (uint256 index; index < count; ) {\\n      res[index] = readUint16(stream);\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 999999\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    },\n    \"remappings\": [\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\n      \"forge-std/=lib/forge-std/src/\",\n      \"solidity-stringutils/=lib/solidity-stringutils/src/\",\n      \"@openzeppelin/=@openzeppelin/\",\n      \"@uniswap/=@uniswap/\",\n      \"hardhat-deploy/=hardhat-deploy/\",\n      \"hardhat/=hardhat/\"\n    ]\n  }\n}",
      "solcInputHash": "62b3897f582f2743ff2d0ddfebde07d0",
      "transactionHash": "0xbeb5a39e2c8c1c269cbfd9262beb350c385f39f65076e69d173ebf103a3ab1e9",
      "args": []
    },
    "decoded": {
      "from": "0x67E21394bBC46c010D9B8DCf00172Ab7996964BE",
      "gasPrice": "55862369598",
      "maxFeePerGas": "55862369598",
      "maxPriorityFeePerGas": "50000000000",
      "gasLimit": "4672465",
      "to": null,
      "value": "0",
      "nonce": 107,
      "data": "",
      "r": "0x9e14ba68c13ce0b63ec45459558cd41fb4e5fb625c46a67000f3c9d5f5a43a7b",
      "s": "0x387b16bc9e24372f5f9f2d072fc1d5470ba928de411b9cef781f3ef6fc4049fb",
      "v": 1,
      "chainId": 137
    }
  }
}