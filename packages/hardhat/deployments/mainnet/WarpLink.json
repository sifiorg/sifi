{
  "address": "0xb8B3A2C8D3062cae23AbB5A0B29D6DEE88167E70",
  "abi": [
    {
      "inputs": [],
      "name": "CallbackAlreadyActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallbackStillActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeadlineExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EthNotSupportedForWarp",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "maxFeeBps",
          "type": "uint16"
        }
      ],
      "name": "FeeTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentPartPayerOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentPartTokenOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectEthValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAmountRemaining",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientOutputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientTokensDelivered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughParts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedPayerForWrap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedTokenForUnwrap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedTokenForWrap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedTokenOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedValueAndTokenCombination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnhandledCommand",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnhandledPoolKind",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partnerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "diamondFee",
          "type": "uint256"
        }
      ],
      "name": "CollectedFee",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COMMAND_TYPE_SPLIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMAND_TYPE_UNWRAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMAND_TYPE_WARP_CURVE_EXACT_INPUT_SINGLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT_SINGLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT_SINGLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMAND_TYPE_WRAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commandTypeSplit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commandTypeUnwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commandTypeWarpCurveExactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commandTypeWarpUniV2LikeExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commandTypeWarpUniV2LikeExactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commandTypeWarpUniV3LikeExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commandTypeWarpUniV3LikeExactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commandTypeWrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "partner",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "feeBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "slippageBps",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint48",
              "name": "deadline",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "commands",
              "type": "bytes"
            }
          ],
          "internalType": "struct IWarpLink.Params",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "warpLinkEngage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5e478bd2d8bdcf0f38fd669dc6d735ca58d483ef7bb07b2f73c46487cd2085f8",
  "receipt": {
    "to": null,
    "from": "0x67E21394bBC46c010D9B8DCf00172Ab7996964BE",
    "contractAddress": "0xb8B3A2C8D3062cae23AbB5A0B29D6DEE88167E70",
    "transactionIndex": 68,
    "gasUsed": "3277176",
    "logsBloom": "0x
    "blockHash": "0x9c2389ae3384b30665a479845e061854a82d23fd463df3d7e79f4f14d85fb8a9",
    "transactionHash": "0x5e478bd2d8bdcf0f38fd669dc6d735ca58d483ef7bb07b2f73c46487cd2085f8",
    "logs": [],
    "blockNumber": 18117567,
    "cumulativeGasUsed": "8736535",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "a4ac5d642fa54a4b458d2f7e4f0d7ffe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CallbackAlreadyActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallbackStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthNotSupportedForWarp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxFeeBps\",\"type\":\"uint16\"}],\"name\":\"FeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPartPayerOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPartTokenOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectEthValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmountRemaining\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientTokensDelivered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughParts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedPayerForWrap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedTokenForUnwrap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedTokenForWrap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedTokenOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedValueAndTokenCombination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnhandledCommand\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnhandledPoolKind\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"diamondFee\",\"type\":\"uint256\"}],\"name\":\"CollectedFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMMAND_TYPE_SPLIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMAND_TYPE_UNWRAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMAND_TYPE_WARP_CURVE_EXACT_INPUT_SINGLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT_SINGLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT_SINGLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMAND_TYPE_WRAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commandTypeSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commandTypeUnwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commandTypeWarpCurveExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commandTypeWarpUniV2LikeExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commandTypeWarpUniV2LikeExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commandTypeWarpUniV3LikeExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commandTypeWarpUniV3LikeExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commandTypeWrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"slippageBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"commands\",\"type\":\"bytes\"}],\"internalType\":\"struct IWarpLink.Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"warpLinkEngage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"FeeTooHigh(uint16)\":[{\"notice\":\"The swap fee is over the maximum allowed\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/WarpLink.sol\":\"WarpLink\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@openzeppelin/=@openzeppelin/\",\":@uniswap/=@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=hardhat-deploy/\",\":hardhat/=hardhat/\",\":solidity-stringutils/=lib/solidity-stringutils/src/\"]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0xfc10758fd8dba790c39468dccd358cb7cef06ae7c4781832cc7aa76f91f167e6\"},\"contracts/facets/WarpLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {LibWarp} from '../libraries/LibWarp.sol';\\nimport {LibKitty} from '../libraries/LibKitty.sol';\\nimport {Stream} from '../libraries/Stream.sol';\\nimport {LibUniV2Like} from '../libraries/LibUniV2Like.sol';\\nimport {IUniswapV2Pair} from '../interfaces/external/IUniswapV2Pair.sol';\\nimport {IWarpLink} from '../interfaces/IWarpLink.sol';\\nimport {LibUniV3Like} from '../libraries/LibUniV3Like.sol';\\nimport {IUniV3Callback} from '../interfaces/IUniV3Callback.sol';\\nimport {IUniswapV3Pool} from '../interfaces/external/IUniswapV3Pool.sol';\\nimport {LibCurve} from '../libraries/LibCurve.sol';\\n\\ncontract WarpLink is IWarpLink {\\n  using SafeERC20 for IERC20;\\n  using Stream for uint256;\\n\\n  struct WarpUniV2LikeWarpSingleParams {\\n    address tokenOut;\\n    address pool;\\n    bool zeroForOne; // tokenIn < tokenOut\\n    uint16 poolFeeBps;\\n  }\\n\\n  struct WarpUniV2LikeExactInputParams {\\n    // NOTE: Excluding the first token\\n    address[] tokens;\\n    address[] pools;\\n    uint16[] poolFeesBps;\\n  }\\n\\n  struct WarpUniV3LikeExactInputSingleParams {\\n    address tokenOut;\\n    address pool;\\n    bool zeroForOne; // tokenIn < tokenOut\\n    uint16 poolFeeBps;\\n  }\\n\\n  struct WarpCurveExactInputSingleParams {\\n    address tokenOut;\\n    address pool;\\n    uint8 tokenIndexIn;\\n    uint8 tokenIndexOut;\\n    uint8 kind;\\n    bool underlying;\\n  }\\n\\n  struct TransientState {\\n    uint256 amount;\\n    address payer;\\n    address token;\\n  }\\n\\n  uint256 public constant COMMAND_TYPE_WRAP = 1;\\n  uint256 public constant COMMAND_TYPE_UNWRAP = 2;\\n  uint256 public constant COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT_SINGLE = 3;\\n  uint256 public constant COMMAND_TYPE_SPLIT = 4;\\n  uint256 public constant COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT = 5;\\n  uint256 public constant COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT_SINGLE = 6;\\n  uint256 public constant COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT = 7;\\n  uint256 public constant COMMAND_TYPE_WARP_CURVE_EXACT_INPUT_SINGLE = 8;\\n\\n  function commandTypeWrap() external pure returns (uint256) {\\n    return COMMAND_TYPE_WRAP;\\n  }\\n\\n  function commandTypeUnwrap() external pure returns (uint256) {\\n    return COMMAND_TYPE_UNWRAP;\\n  }\\n\\n  function commandTypeWarpUniV2LikeExactInputSingle() external pure returns (uint256) {\\n    return COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT_SINGLE;\\n  }\\n\\n  function commandTypeSplit() external pure returns (uint256) {\\n    return COMMAND_TYPE_SPLIT;\\n  }\\n\\n  function commandTypeWarpUniV2LikeExactInput() external pure returns (uint256) {\\n    return COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT;\\n  }\\n\\n  function commandTypeWarpUniV3LikeExactInputSingle() external pure returns (uint256) {\\n    return COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT_SINGLE;\\n  }\\n\\n  function commandTypeWarpUniV3LikeExactInput() external pure returns (uint256) {\\n    return COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT;\\n  }\\n\\n  function commandTypeWarpCurveExactInputSingle() external pure returns (uint256) {\\n    return COMMAND_TYPE_WARP_CURVE_EXACT_INPUT_SINGLE;\\n  }\\n\\n  function processSplit(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    uint256 parts = stream.readUint8();\\n    uint256 amountRemaining = t.amount;\\n    uint256 amountOutSum;\\n\\n    if (parts < 2) {\\n      revert NotEnoughParts();\\n    }\\n\\n    // Store the token out for the previous part to ensure every part has the same output token\\n    address firstPartTokenOut;\\n    address firstPartPayerOut;\\n\\n    for (uint256 partIndex; partIndex < parts; ) {\\n      // TODO: Unchecked?\\n      // For the last part, use the remaining amount. Else read the % from the stream\\n      uint256 partAmount = partIndex < parts - 1\\n        ? (t.amount * stream.readUint16()) / 10_000\\n        : amountRemaining;\\n\\n      if (partAmount > amountRemaining) {\\n        revert InsufficientAmountRemaining();\\n      }\\n\\n      amountRemaining -= partAmount;\\n\\n      TransientState memory tPart;\\n\\n      tPart.amount = partAmount;\\n      tPart.payer = t.payer;\\n      tPart.token = t.token;\\n\\n      tPart = engageInternal(stream, tPart);\\n\\n      if (partIndex == 0) {\\n        firstPartPayerOut = tPart.payer;\\n        firstPartTokenOut = tPart.token;\\n      } else {\\n        if (tPart.token != firstPartTokenOut) {\\n          revert InconsistentPartTokenOut();\\n        }\\n\\n        if (tPart.payer != firstPartPayerOut) {\\n          revert InconsistentPartPayerOut();\\n        }\\n      }\\n\\n      // NOTE: Checked\\n      amountOutSum += tPart.amount;\\n\\n      unchecked {\\n        partIndex++;\\n      }\\n    }\\n\\n    t.payer = firstPartPayerOut;\\n    t.token = firstPartTokenOut;\\n    t.amount = amountOutSum;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Wrap ETH into WETH using the WETH contract\\n   *\\n   * The ETH must already be in this contract\\n   *\\n   * The next token will be WETH, with the amount and payer unchanged\\n   */\\n  function processWrap(TransientState memory t) internal returns (TransientState memory) {\\n    LibWarp.State storage s = LibWarp.state();\\n\\n    if (t.token != address(0)) {\\n      revert UnexpectedTokenForWrap();\\n    }\\n\\n    if (t.payer != address(this)) {\\n      // It's not possible to move a user's ETH\\n      revert UnexpectedPayerForWrap();\\n    }\\n\\n    t.token = address(s.weth);\\n\\n    s.weth.deposit{value: t.amount}();\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Unwrap WETH into ETH using the WETH contract\\n   *\\n   * The payer can be the sender or this contract. After this operation, the\\n   * token will be ETH (0) and the amount will be unchanged. The next payer\\n   * will be this contract.\\n   */\\n  function processUnwrap(TransientState memory t) internal returns (TransientState memory) {\\n    LibWarp.State storage s = LibWarp.state();\\n\\n    if (t.token != address(s.weth)) {\\n      revert UnexpectedTokenForUnwrap();\\n    }\\n\\n    address prevPayer = t.payer;\\n    bool shouldMoveTokensFirst = prevPayer != address(this);\\n\\n    if (shouldMoveTokensFirst) {\\n      t.payer = address(this);\\n    }\\n\\n    t.token = address(0);\\n\\n    if (shouldMoveTokensFirst) {\\n      IERC20(address(s.weth)).safeTransferFrom(prevPayer, address(this), t.amount);\\n    }\\n\\n    s.weth.withdraw(t.amount);\\n\\n    payable(t.payer).transfer(t.amount);\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Uniswap V2-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *   - tokenOut (address)\\n   *   - pool (address)\\n   *   - zeroForOne (0 or 1, uint8)\\n   *   - poolFeeBps (uint16)\\n   */\\n  function processWarpUniV2LikeExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    if (t.token == address(0)) {\\n      revert EthNotSupportedForWarp();\\n    }\\n\\n    WarpUniV2LikeWarpSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n    params.zeroForOne = stream.readUint8() == 1;\\n    params.poolFeeBps = stream.readUint16();\\n\\n    if (t.payer == address(this)) {\\n      // Transfer tokens to the pool\\n      IERC20(t.token).safeTransfer(params.pool, t.amount);\\n    } else {\\n      // Transfer tokens from the sender to the pool\\n      IERC20(t.token).safeTransferFrom(t.payer, params.pool, t.amount);\\n\\n      // Update the payer to this contract\\n      t.payer = address(this);\\n    }\\n\\n    (uint256 reserveIn, uint256 reserveOut, ) = IUniswapV2Pair(params.pool).getReserves();\\n\\n    if (!params.zeroForOne) {\\n      // Token in > token out\\n      (reserveIn, reserveOut) = (reserveOut, reserveIn);\\n    }\\n\\n    unchecked {\\n      // For 30 bps, multiply by 997\\n      uint256 feeFactor = 10_000 - params.poolFeeBps;\\n\\n      t.amount =\\n        ((t.amount * feeFactor) * reserveOut) /\\n        ((reserveIn * 10_000) + (t.amount * feeFactor));\\n    }\\n\\n    // NOTE: This check can be avoided if the factory is trusted\\n    uint256 balancePrev = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    IUniswapV2Pair(params.pool).swap(\\n      params.zeroForOne ? 0 : t.amount,\\n      params.zeroForOne ? t.amount : 0,\\n      address(this),\\n      ''\\n    );\\n\\n    uint256 balanceNext = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (balanceNext < balancePrev || balanceNext < balancePrev + t.amount) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    t.token = params.tokenOut;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp multiple tokens in a series of Uniswap V2-like pools\\n   *\\n   * Since the pools are not trusted, the balance of `params.tokenOut` is checked\\n   * before the first swap and after the last swap to ensure the correct amount\\n   * was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the last swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - pool length (uint8)\\n   *  - tokens (address 0, address 1, address pool length - 1) excluding the first\\n   *  - pools (address 0, address 1, address pool length - 1)\\n   *  - pool fees (uint16 0, uint16 1, uint16 pool length - 1)\\n   */\\n  function processWarpUniV2LikeExactInput(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV2LikeExactInputParams memory params;\\n\\n    uint256 poolLength = stream.readUint8();\\n\\n    params.tokens = new address[](poolLength + 1);\\n\\n    // The params will contain all tokens including the first to remain compatible\\n    // with the LibUniV2Like library's getAmountsOut function\\n    params.tokens[0] = t.token;\\n\\n    for (uint256 index; index < poolLength; ) {\\n      params.tokens[index + 1] = stream.readAddress();\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    params.pools = stream.readAddresses(poolLength);\\n    params.poolFeesBps = stream.readUint16s(poolLength);\\n\\n    uint256 tokenOutBalancePrev = IERC20(params.tokens[poolLength]).balanceOf(address(this));\\n\\n    uint256[] memory amounts = LibUniV2Like.getAmountsOut(\\n      params.poolFeesBps,\\n      t.amount,\\n      params.tokens,\\n      params.pools\\n    );\\n\\n    if (t.payer == address(this)) {\\n      // Transfer tokens from this contract to the first pool\\n      IERC20(t.token).safeTransfer(params.pools[0], t.amount);\\n    } else {\\n      // Transfer tokens from the sender to the first pool\\n      IERC20(t.token).safeTransferFrom(t.payer, params.pools[0], t.amount);\\n\\n      // Update the payer to this contract\\n      t.payer = address(this);\\n    }\\n\\n    // Same as UniV2Like\\n    for (uint index; index < poolLength; ) {\\n      uint256 indexPlusOne = index + 1;\\n      bool zeroForOne = params.tokens[index] < params.tokens[indexPlusOne] ? true : false;\\n      address to = index < params.tokens.length - 2 ? params.pools[indexPlusOne] : address(this);\\n\\n      IUniswapV2Pair(params.pools[index]).swap(\\n        zeroForOne ? 0 : amounts[indexPlusOne],\\n        zeroForOne ? amounts[indexPlusOne] : 0,\\n        to,\\n        ''\\n      );\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    uint256 nextTokenOutBalance = IERC20(params.tokens[poolLength]).balanceOf(address(this));\\n\\n    t.amount = amounts[amounts.length - 1];\\n\\n    if (\\n      // TOOD: Is this overflow check necessary?\\n      nextTokenOutBalance < tokenOutBalancePrev ||\\n      nextTokenOutBalance < tokenOutBalancePrev + t.amount\\n    ) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    t.token = params.tokens[poolLength];\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Uniswap V3-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - tokenOut (address)\\n   *  - pool (address)\\n   */\\n  function processWarpUniV3LikeExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV3LikeExactInputSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n\\n    if (t.token == address(0)) {\\n      revert EthNotSupportedForWarp();\\n    }\\n\\n    // NOTE: The pool is untrusted\\n    uint256 balancePrev = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    bool zeroForOne = t.token < params.tokenOut;\\n\\n    LibUniV3Like.beforeCallback(\\n      LibUniV3Like.CallbackState({payer: t.payer, token: t.token, amount: t.amount})\\n    );\\n\\n    if (zeroForOne) {\\n      (, int256 amountOutSigned) = IUniswapV3Pool(params.pool).swap(\\n        address(this),\\n        zeroForOne,\\n        int256(t.amount),\\n        LibUniV3Like.MIN_SQRT_RATIO,\\n        ''\\n      );\\n\\n      t.amount = uint256(-amountOutSigned);\\n    } else {\\n      (int256 amountOutSigned, ) = IUniswapV3Pool(params.pool).swap(\\n        address(this),\\n        zeroForOne,\\n        int256(t.amount),\\n        LibUniV3Like.MAX_SQRT_RATIO,\\n        ''\\n      );\\n\\n      t.amount = uint256(-amountOutSigned);\\n    }\\n\\n    LibUniV3Like.afterCallback();\\n\\n    uint256 balanceNext = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (balanceNext < balancePrev || balanceNext < balancePrev + t.amount) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    t.token = params.tokenOut;\\n\\n    // TODO: Compare check-and-set vs set\\n    t.payer = address(this);\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp multiple tokens in a series of Uniswap V3-like pools\\n   *\\n   * Since the pools are not trusted, the balance of `params.tokenOut` is checked\\n   * before the first swap and after the last swap to ensure the correct amount\\n   * was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the last swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - pool length (uint8)\\n   *  - tokens (address 0, address 1, address pool length - 1) excluding the first\\n   *  - pools (address 0, address 1, address pool length - 1)\\n   */\\n  function processWarpUniV3LikeExactInput(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV2LikeExactInputParams memory params;\\n\\n    uint256 poolLength = stream.readUint8();\\n\\n    // The first token is not included\\n    params.tokens = stream.readAddresses(poolLength);\\n    params.pools = stream.readAddresses(poolLength);\\n\\n    address lastToken = params.tokens[poolLength - 1];\\n\\n    uint256 tokenOutBalancePrev = IERC20(lastToken).balanceOf(address(this));\\n\\n    for (uint index; index < poolLength; ) {\\n      address tokenIn = index == 0 ? t.token : params.tokens[index - 1]; // TOOD: unchecked\\n      t.token = params.tokens[index];\\n      bool zeroForOne = tokenIn < t.token;\\n\\n      LibUniV3Like.beforeCallback(\\n        LibUniV3Like.CallbackState({payer: t.payer, token: tokenIn, amount: t.amount})\\n      );\\n\\n      if (index == 0) {\\n        // Update the payer to this contract\\n        // TODO: Compare check-and-set vs set\\n        t.payer = address(this);\\n      }\\n\\n      address pool = params.pools[index];\\n\\n      if (zeroForOne) {\\n        (, int256 amountOutSigned) = IUniswapV3Pool(pool).swap(\\n          address(this),\\n          zeroForOne,\\n          int256(t.amount),\\n          LibUniV3Like.MIN_SQRT_RATIO,\\n          ''\\n        );\\n\\n        t.amount = uint256(-amountOutSigned);\\n      } else {\\n        (int256 amountOutSigned, ) = IUniswapV3Pool(pool).swap(\\n          address(this),\\n          zeroForOne,\\n          int256(t.amount),\\n          LibUniV3Like.MAX_SQRT_RATIO,\\n          ''\\n        );\\n\\n        t.amount = uint256(-amountOutSigned);\\n      }\\n\\n      LibUniV3Like.afterCallback();\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    uint256 nextTokenOutBalance = IERC20(t.token).balanceOf(address(this));\\n\\n    if (\\n      // TOOD: Is this overflow check necessary?\\n      nextTokenOutBalance < tokenOutBalancePrev ||\\n      nextTokenOutBalance < tokenOutBalancePrev + t.amount\\n    ) {\\n      revert InsufficientTokensDelivered();\\n    }\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Curve-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token may be ETH (0)\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - tokenOut (address)\\n   *  - pool (address)\\n   */\\n  function processWarpCurveExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpCurveExactInputSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n    params.tokenIndexIn = stream.readUint8();\\n    params.tokenIndexOut = stream.readUint8();\\n    params.kind = stream.readUint8();\\n    params.underlying = stream.readUint8() == 1;\\n\\n    // NOTE: The pool is untrusted\\n    bool isFromEth = t.token == address(0);\\n    bool isToEth = params.tokenOut == address(0);\\n\\n    if (t.payer != address(this)) {\\n      // Transfer tokens from the sender to this contract\\n      IERC20(t.token).safeTransferFrom(t.payer, address(this), t.amount);\\n\\n      // Update the payer to this contract\\n      t.payer = address(this);\\n    }\\n\\n    uint256 balancePrev = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (!isFromEth) {\\n      // TODO: Is this necessary to support USDT?\\n      IERC20(t.token).forceApprove(params.pool, t.amount);\\n    }\\n\\n    LibCurve.exchange({\\n      kind: params.kind,\\n      underlying: params.underlying,\\n      pool: params.pool,\\n      eth: isFromEth ? t.amount : 0,\\n      i: params.tokenIndexIn,\\n      j: params.tokenIndexOut,\\n      dx: t.amount,\\n      // NOTE: There is no need to set a min out since the balance will be verified\\n      min_dy: 0\\n    });\\n\\n    uint256 balanceNext = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    t.token = params.tokenOut;\\n    t.amount = balanceNext - balancePrev;\\n\\n    return t;\\n  }\\n\\n  function engageInternal(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    uint256 commandCount = stream.readUint8();\\n\\n    // TODO: End of stream check?\\n    for (uint256 commandIndex; commandIndex < commandCount; commandIndex++) {\\n      // TODO: Unchecked?\\n      uint256 commandType = stream.readUint8();\\n\\n      if (commandType == COMMAND_TYPE_WRAP) {\\n        t = processWrap(t);\\n      } else if (commandType == COMMAND_TYPE_UNWRAP) {\\n        t = processUnwrap(t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT_SINGLE) {\\n        t = processWarpUniV2LikeExactInputSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_SPLIT) {\\n        t = processSplit(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT) {\\n        t = processWarpUniV2LikeExactInput(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT_SINGLE) {\\n        t = processWarpUniV3LikeExactInputSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT) {\\n        t = processWarpUniV3LikeExactInput(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_CURVE_EXACT_INPUT_SINGLE) {\\n        t = processWarpCurveExactInputSingle(stream, t);\\n      } else {\\n        revert UnhandledCommand();\\n      }\\n    }\\n\\n    return t;\\n  }\\n\\n  function warpLinkEngage(Params memory params) external payable {\\n    if (block.timestamp > params.deadline) {\\n      revert DeadlineExpired();\\n    }\\n\\n    TransientState memory t;\\n    t.amount = params.amountIn;\\n    t.token = params.tokenIn;\\n\\n    if (msg.value == 0) {\\n      if (params.tokenIn == address(0)) {\\n        revert UnexpectedValueAndTokenCombination();\\n      }\\n\\n      // Tokens will initially moved from the sender\\n      t.payer = msg.sender;\\n    } else {\\n      if (params.tokenIn != address(0)) {\\n        revert UnexpectedValueAndTokenCombination();\\n      }\\n\\n      if (msg.value != params.amountIn) {\\n        revert IncorrectEthValue();\\n      }\\n\\n      // The ETH has already been moved to this contract\\n      t.payer = address(this);\\n    }\\n\\n    uint256 stream = Stream.createStream(params.commands);\\n\\n    t = engageInternal(stream, t);\\n\\n    uint256 amountOut = t.amount;\\n    address tokenOut = t.token;\\n\\n    if (tokenOut != params.tokenOut) {\\n      revert UnexpectedTokenOut();\\n    }\\n\\n    // Enforce minimum amount/max slippage\\n    if (amountOut < LibWarp.applySlippage(params.amountOut, params.slippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    // Collect fees\\n    amountOut = LibKitty.calculateAndRegisterFee(\\n      params.partner,\\n      params.tokenOut,\\n      params.feeBps,\\n      params.amountOut,\\n      amountOut\\n    );\\n\\n    // Deliver tokens\\n    if (tokenOut == address(0)) {\\n      payable(params.recipient).transfer(amountOut);\\n    } else {\\n      IERC20(tokenOut).safeTransfer(params.recipient, amountOut);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x437ccf82f445f19c1c7ae4706fbc41379660787744139522f52c4bd3035ec521\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n  enum FacetCutAction {\\n    Add,\\n    Replace,\\n    Remove\\n  }\\n  // Add=0, Replace=1, Remove=2\\n\\n  struct FacetCut {\\n    address facetAddress;\\n    FacetCutAction action;\\n    bytes4[] functionSelectors;\\n  }\\n\\n  /// @notice Add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function diamondCut(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external;\\n\\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x2542d3d1dc26be46c0c298c6c7a1ac7943fd920dd2ac7cc013fe775e36ba973a\",\"license\":\"MIT\"},\"contracts/interfaces/IUniV3Callback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IUniV3Callback {\\n  error CallbackInactive();\\n}\\n\",\"keccak256\":\"0x29dd7728e90d608ab30e7a4942fc304fd62ba8d867c5edea025b2a096dfda93a\",\"license\":\"MIT\"},\"contracts/interfaces/IWarpLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IWarpLink {\\n  error UnhandledCommand();\\n  error IncorrectEthValue();\\n  error InsufficientOutputAmount();\\n  error InsufficientTokensDelivered();\\n  error UnexpectedTokenForWrap();\\n  error UnexpectedTokenForUnwrap();\\n  error UnexpectedTokenOut();\\n  error InsufficientAmountRemaining();\\n  error NotEnoughParts();\\n  error InconsistentPartTokenOut();\\n  error InconsistentPartPayerOut();\\n  error UnexpectedValueAndTokenCombination();\\n  error UnexpectedPayerForWrap();\\n  error EthNotSupportedForWarp();\\n  error DeadlineExpired();\\n\\n  struct Params {\\n    address partner;\\n    uint16 feeBps;\\n    /**\\n     * How much below `amountOut` the user will accept\\n     */\\n    uint16 slippageBps;\\n    address recipient;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 amountIn;\\n    /**\\n     * The amount the user was quoted\\n     */\\n    uint256 amountOut;\\n    uint48 deadline;\\n    bytes commands;\\n  }\\n\\n  function warpLinkEngage(Params memory params) external payable;\\n\\n  function commandTypeWrap() external pure returns (uint256);\\n\\n  function commandTypeUnwrap() external pure returns (uint256);\\n\\n  function commandTypeWarpUniV2LikeExactInputSingle() external pure returns (uint256);\\n\\n  function commandTypeSplit() external pure returns (uint256);\\n\\n  function commandTypeWarpUniV2LikeExactInput() external pure returns (uint256);\\n\\n  function commandTypeWarpUniV3LikeExactInputSingle() external pure returns (uint256);\\n\\n  function commandTypeWarpUniV3LikeExactInput() external pure returns (uint256);\\n\\n  function commandTypeWarpCurveExactInputSingle() external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0xecf5cb3ae321c7641c238cb2149bf27fdae49b60a8d4124a874b0fa3ab8f2904\",\"license\":\"MIT\"},\"contracts/interfaces/external/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\n// Kind 1\\n// Example v0.2.4 tripool (stables)\\n// See https://etherscan.io/address/0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7\\ninterface ICurvePoolKind1 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function base_coins(uint256 index) external view returns (address);\\n\\n  function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable;\\n\\n  function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable;\\n}\\n\\n// Kind 2\\n// Example v0.2.8, Stableswap, v0.2.5 Curve GUSD Metapool\\n// See https://etherscan.io/address/0xdc24316b9ae028f1497c275eb9192a3ea0f67022\\ninterface ICurvePoolKind2 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function base_coins(uint256 index) external view returns (address);\\n\\n  // 0x3df02124\\n  function exchange(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n\\n  function exchange_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n}\\n\\n// Kind 3\\n// Example v0.3.0, \\\"# EUR/3crv pool where 3crv is _second_, not first\\\"\\n// See https://etherscan.io/address/0x5D0F47B32fDd343BfA74cE221808e2abE4A53827\\n// NOTE: This contract has an `exchange_underlying` with a receiver also\\ninterface ICurvePoolKind3 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function underlying_coins(uint256 index) external view returns (address);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n\\n  function exchange_underlying(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x21f2bda12f0f4741100850a9fbba77e3b581c8ec49fc52ceb37b1b82286d0e7a\",\"license\":\"MIT\"},\"contracts/interfaces/external/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n  function getReserves()\\n    external\\n    view\\n    returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x9db3539ee014c7b82d3ef721a09c89efe134d0441b01df60dd61ef78afd8658e\"},\"contracts/interfaces/external/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IUniswapV3Pool {\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function liquidity() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0x2eb325cc26457bdf6eeb5f89db2cfa73938167d1dc787c159a7d54138d1eb1e7\",\"license\":\"MIT\"},\"contracts/libraries/LibCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {ICurvePoolKind1, ICurvePoolKind2, ICurvePoolKind3} from '../interfaces/external/ICurvePool.sol';\\n\\nlibrary LibCurve {\\n  error UnhandledPoolKind();\\n\\n  function exchange(\\n    uint8 kind,\\n    bool underlying,\\n    address pool,\\n    uint256 eth,\\n    uint8 i,\\n    uint8 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) internal {\\n    if (kind == 1) {\\n      if (underlying) {\\n        ICurvePoolKind1(pool).exchange_underlying{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      } else {\\n        ICurvePoolKind1(pool).exchange{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      }\\n    } else if (kind == 2) {\\n      if (underlying) {\\n        ICurvePoolKind2(pool).exchange_underlying{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      } else {\\n        ICurvePoolKind2(pool).exchange{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      }\\n    } else if (kind == 3) {\\n      if (underlying) {\\n        ICurvePoolKind3(pool).exchange_underlying{value: eth}(uint256(i), uint256(j), dx, min_dy);\\n      } else {\\n        ICurvePoolKind3(pool).exchange{value: eth}(uint256(i), uint256(j), dx, min_dy);\\n      }\\n    } else {\\n      revert UnhandledPoolKind();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa83154bf31d445eb3c17ab040999b71a6d410676e07886b50f1c369707cd57a5\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from '../interfaces/IDiamondCut.sol';\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256('diamond.standard.diamond.storage');\\n\\n  struct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n  }\\n\\n  struct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n  }\\n\\n  struct DiamondStorage {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    address contractOwner;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  function setContractOwner(address _newOwner) internal {\\n    DiamondStorage storage ds = diamondStorage();\\n    address previousOwner = ds.contractOwner;\\n    ds.contractOwner = _newOwner;\\n    emit OwnershipTransferred(previousOwner, _newOwner);\\n  }\\n\\n  function contractOwner() internal view returns (address contractOwner_) {\\n    contractOwner_ = diamondStorage().contractOwner;\\n  }\\n\\n  function enforceIsContractOwner() internal view {\\n    require(msg.sender == diamondStorage().contractOwner, 'LibDiamond: Must be contract owner');\\n  }\\n\\n  event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  // Internal function version of diamondCut\\n  function diamondCut(\\n    IDiamondCut.FacetCut[] memory _diamondCut,\\n    address _init,\\n    bytes memory _calldata\\n  ) internal {\\n    for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n      IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n      if (action == IDiamondCut.FacetCutAction.Add) {\\n        addFunctions(\\n          _diamondCut[facetIndex].facetAddress,\\n          _diamondCut[facetIndex].functionSelectors\\n        );\\n      } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n        replaceFunctions(\\n          _diamondCut[facetIndex].facetAddress,\\n          _diamondCut[facetIndex].functionSelectors\\n        );\\n      } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n        removeFunctions(\\n          _diamondCut[facetIndex].facetAddress,\\n          _diamondCut[facetIndex].functionSelectors\\n        );\\n      } else {\\n        revert('LibDiamondCut: Incorrect FacetCutAction');\\n      }\\n    }\\n    emit DiamondCut(_diamondCut, _init, _calldata);\\n    initializeDiamondCut(_init, _calldata);\\n  }\\n\\n  function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n    uint96 selectorPosition = uint96(\\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n    );\\n    // add new facet address if it does not exist\\n    if (selectorPosition == 0) {\\n      addFacet(ds, _facetAddress);\\n    }\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      require(\\n        oldFacetAddress == address(0),\\n        \\\"LibDiamondCut: Can't add function that already exists\\\"\\n      );\\n      addFunction(ds, selector, selectorPosition, _facetAddress);\\n      selectorPosition++;\\n    }\\n  }\\n\\n  function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n    uint96 selectorPosition = uint96(\\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n    );\\n    // add new facet address if it does not exist\\n    if (selectorPosition == 0) {\\n      addFacet(ds, _facetAddress);\\n    }\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      require(\\n        oldFacetAddress != _facetAddress,\\n        \\\"LibDiamondCut: Can't replace function with same function\\\"\\n      );\\n      removeFunction(ds, oldFacetAddress, selector);\\n      addFunction(ds, selector, selectorPosition, _facetAddress);\\n      selectorPosition++;\\n    }\\n  }\\n\\n  function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\\n    DiamondStorage storage ds = diamondStorage();\\n    // if function does not exist then do nothing and return\\n    require(_facetAddress == address(0), 'LibDiamondCut: Remove facet address must be address(0)');\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      removeFunction(ds, oldFacetAddress, selector);\\n    }\\n  }\\n\\n  function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n    enforceHasContractCode(_facetAddress, 'LibDiamondCut: New facet has no code');\\n    ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n    ds.facetAddresses.push(_facetAddress);\\n  }\\n\\n  function addFunction(\\n    DiamondStorage storage ds,\\n    bytes4 _selector,\\n    uint96 _selectorPosition,\\n    address _facetAddress\\n  ) internal {\\n    ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n    ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n  }\\n\\n  function removeFunction(\\n    DiamondStorage storage ds,\\n    address _facetAddress,\\n    bytes4 _selector\\n  ) internal {\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n    // an immutable function is a function defined directly in a diamond\\n    require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n    // replace selector with last selector, then delete last selector\\n    uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n    uint256 lastSelectorPosition = ds\\n      .facetFunctionSelectors[_facetAddress]\\n      .functionSelectors\\n      .length - 1;\\n    // if not the same then replace _selector with lastSelector\\n    if (selectorPosition != lastSelectorPosition) {\\n      bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n        lastSelectorPosition\\n      ];\\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n      ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(\\n        selectorPosition\\n      );\\n    }\\n    // delete the last selector\\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n    delete ds.selectorToFacetAndPosition[_selector];\\n\\n    // if no more selectors for facet address then delete the facet address\\n    if (lastSelectorPosition == 0) {\\n      // replace facet address with last facet address and delete last facet address\\n      uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n      uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n      if (facetAddressPosition != lastFacetAddressPosition) {\\n        address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n        ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n        ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n      }\\n      ds.facetAddresses.pop();\\n      delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n    }\\n  }\\n\\n  function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n    if (_init == address(0)) {\\n      return;\\n    }\\n    enforceHasContractCode(_init, 'LibDiamondCut: _init address has no code');\\n    (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n    if (!success) {\\n      if (error.length > 0) {\\n        // bubble up error\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(error)\\n          revert(add(32, error), returndata_size)\\n        }\\n      } else {\\n        revert InitializationFunctionReverted(_init, _calldata);\\n      }\\n    }\\n  }\\n\\n  function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n    uint256 contractSize;\\n    assembly {\\n      contractSize := extcodesize(_contract)\\n    }\\n    require(contractSize > 0, _errorMessage);\\n  }\\n}\\n\",\"keccak256\":\"0x9eabc2f173dd41dd854a07d985ede09cfa8f01761eb8565a533a6bb8881761e6\",\"license\":\"MIT\"},\"contracts/libraries/LibKitty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {EnumerableSet} from '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport {LibDiamond} from './LibDiamond.sol';\\n\\nlibrary LibKitty {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  /**\\n   * The swap fee is over the maximum allowed\\n   */\\n  error FeeTooHigh(uint16 maxFeeBps);\\n\\n  event CollectedFee(\\n    address indexed partner,\\n    address indexed token,\\n    uint256 partnerFee,\\n    uint256 diamondFee\\n  );\\n\\n  struct State {\\n    /**\\n     * Set of partner balances. An address is added when the partner is first credited\\n     */\\n    EnumerableSet.AddressSet partners;\\n    /**\\n     * Set of tokens a partner has ever received fees in. The ETH token address zero is not included.\\n     * Tokens are not removed from this set when a partner withdraws.\\n     * Mapping: Partner -> token set\\n     */\\n    mapping(address => EnumerableSet.AddressSet) partnerTokens;\\n    /**\\n     * Token balances per partner\\n     * Mapping: Partner -> token -> balance\\n     */\\n    mapping(address => mapping(address => uint256)) partnerBalances;\\n    /**\\n     * Total balances per token for all partners.\\n     * Mapping: token -> balance\\n     */\\n    mapping(address => uint256) partnerBalancesTotal;\\n  }\\n\\n  uint16 private constant MAX_FEE_BPS = 2_000;\\n\\n  function state() internal pure returns (State storage s) {\\n    bytes32 storagePosition = keccak256('diamond.storage.LibKitty');\\n\\n    assembly {\\n      s.slot := storagePosition\\n    }\\n  }\\n\\n  /**\\n   * By using a library function we ensure that the storage used by the library is whichever contract\\n   * is calling this function\\n   */\\n  function registerCollectedFee(\\n    address partner,\\n    address token,\\n    uint256 partnerFee,\\n    uint256 diamondFee\\n  ) internal {\\n    State storage s = state();\\n\\n    if (token != address(0)) {\\n      s.partnerTokens[partner].add(token);\\n    }\\n\\n    s.partners.add(partner);\\n\\n    unchecked {\\n      s.partnerBalances[partner][token] += partnerFee;\\n      s.partnerBalancesTotal[token] += partnerFee;\\n    }\\n\\n    emit CollectedFee(partner, token, partnerFee, diamondFee);\\n  }\\n\\n  function calculateAndRegisterFee(\\n    address partner,\\n    address token,\\n    uint16 feeBps,\\n    uint256 amountOutQuoted,\\n    uint256 amountOutActual\\n  ) internal returns (uint256 amountOutUser_) {\\n    if (feeBps > MAX_FEE_BPS) {\\n      revert FeeTooHigh(MAX_FEE_BPS);\\n    }\\n\\n    unchecked {\\n      uint256 feeTotal;\\n      uint256 feeBasis = amountOutActual;\\n\\n      if (amountOutActual > amountOutQuoted) {\\n        // Positive slippage\\n        feeTotal = amountOutActual - amountOutQuoted;\\n\\n        // Change the fee basis for use below\\n        feeBasis = amountOutQuoted;\\n      }\\n\\n      // Fee taken from actual\\n      feeTotal += (feeBasis * feeBps) / 10_000;\\n\\n      // If a partner is set, split the fee in half\\n      uint256 feePartner = partner == address(0) ? 0 : (feeTotal * 50) / 100;\\n      uint256 feeDiamond = feeTotal - feePartner;\\n\\n      if (feeDiamond > 0) {\\n        registerCollectedFee(partner, token, feePartner, feeDiamond);\\n      }\\n\\n      return amountOutActual - feeTotal;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1e25b0c81d969534dfd9be55dc873e8e9f301cdd7b49c8ee9fc55039a1ffff94\",\"license\":\"MIT\"},\"contracts/libraries/LibUniV2Like.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {IUniswapV2Pair} from 'contracts/interfaces/external/IUniswapV2Pair.sol';\\n\\nlibrary LibUniV2Like {\\n  function getAmountsOut(\\n    uint16[] memory poolFeesBps,\\n    uint256 amountIn,\\n    address[] memory tokens,\\n    address[] memory pools\\n  ) internal view returns (uint256[] memory amounts) {\\n    uint256 poolLength = pools.length;\\n\\n    amounts = new uint256[](tokens.length);\\n    amounts[0] = amountIn;\\n\\n    for (uint256 index; index < poolLength; ) {\\n      address token0 = tokens[index];\\n      address token1 = tokens[index + 1];\\n\\n      // For 30 bps, multiply by 9970\\n      uint256 feeFactor = 10_000 - poolFeesBps[index];\\n\\n      (uint256 reserveIn, uint256 reserveOut, ) = IUniswapV2Pair(pools[index]).getReserves();\\n\\n      if (token0 > token1) {\\n        (reserveIn, reserveOut) = (reserveOut, reserveIn);\\n      }\\n\\n      unchecked {\\n        amountIn =\\n          ((amountIn * feeFactor) * reserveOut) /\\n          ((reserveIn * 10_000) + (amountIn * feeFactor));\\n      }\\n\\n      // Recycling `amountIn`\\n      amounts[index + 1] = amountIn;\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8b15f1b820ef4dea830d028713e4cfd03cf41ac8acc69e1df5e829879eb4410a\",\"license\":\"MIT\"},\"contracts/libraries/LibUniV3Like.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nlibrary LibUniV3Like {\\n  error CallbackAlreadyActive();\\n  error CallbackStillActive();\\n\\n  bytes32 constant DIAMOND_STORAGE_SLOT = keccak256('diamond.storage.LibUniV3Like');\\n\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739 + 1;\\n\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342 - 1;\\n\\n  struct CallbackState {\\n    uint256 amount;\\n    address payer;\\n    address token;\\n  }\\n\\n  struct State {\\n    // TODO: Does this help by using `MSTORE8`?\\n    uint8 isActive;\\n    /**\\n     * Transient storage variable used in the callback\\n     */\\n    CallbackState callback;\\n  }\\n\\n  function state() internal pure returns (State storage s) {\\n    bytes32 slot = DIAMOND_STORAGE_SLOT;\\n\\n    assembly {\\n      s.slot := slot\\n    }\\n  }\\n\\n  function beforeCallback(CallbackState memory callback) internal {\\n    if (state().isActive == 1) {\\n      revert CallbackAlreadyActive();\\n    }\\n\\n    state().isActive = 1;\\n    state().callback = callback;\\n  }\\n\\n  function afterCallback() internal view {\\n    if (state().isActive == 1) {\\n      // The field is expected to be zeroed out by the callback\\n      revert CallbackStillActive();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xec2a25e998d2b4d6f0222e811e1d427fa93f8ab4534fb14ad894b6844495f7ba\",\"license\":\"MIT\"},\"contracts/libraries/LibWarp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {IWETH} from '@uniswap/v2-periphery/contracts/interfaces/IWETH.sol';\\n\\nlibrary LibWarp {\\n  bytes32 constant DIAMOND_STORAGE_SLOT = keccak256('diamond.storage.LibWarp');\\n\\n  struct State {\\n    IWETH weth;\\n  }\\n\\n  function state() internal pure returns (State storage s) {\\n    bytes32 slot = DIAMOND_STORAGE_SLOT;\\n\\n    assembly {\\n      s.slot := slot\\n    }\\n  }\\n\\n  function applySlippage(uint256 amount, uint16 slippage) internal pure returns (uint256) {\\n    return (amount * (10_000 - slippage)) / 10_000;\\n  }\\n}\\n\",\"keccak256\":\"0x707e062da5e54162b0982b09a34bf8454df42259f6666843cfac18e2c0928635\",\"license\":\"MIT\"},\"contracts/libraries/Stream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\n/**\\n * Stream reader\\n *\\n * Note that the stream position is always behind by one as per the\\n * original implementation\\n *\\n * See https://github.com/sushiswap/sushiswap/blob/master/protocols/route-processor/contracts/InputStream.sol\\n */\\nlibrary Stream {\\n  function createStream(bytes memory data) internal pure returns (uint256 stream) {\\n    assembly {\\n      // Get a pointer to the next free memory\\n      stream := mload(0x40)\\n\\n      // Move the free memory pointer forward by 64 bytes, since\\n      // this function will store 2 words (64 bytes) to memory.\\n      mstore(0x40, add(stream, 64))\\n\\n      // Store a pointer to the data in the first word of the stream\\n      mstore(stream, data)\\n\\n      // Store a pointer to the end of the data in the second word of the stream\\n      let length := mload(data)\\n      mstore(add(stream, 32), add(data, length))\\n    }\\n  }\\n\\n  function isNotEmpty(uint256 stream) internal pure returns (bool) {\\n    uint256 pos;\\n    uint256 finish;\\n    assembly {\\n      pos := mload(stream)\\n      finish := mload(add(stream, 32))\\n    }\\n    return pos < finish;\\n  }\\n\\n  function readUint8(uint256 stream) internal pure returns (uint8 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 1)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint16(uint256 stream) internal pure returns (uint16 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 2)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint24(uint256 stream) internal pure returns (uint24 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 3)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint32(uint256 stream) internal pure returns (uint32 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 4)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint256(uint256 stream) internal pure returns (uint256 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 32)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readBytes32(uint256 stream) internal pure returns (bytes32 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 32)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readAddress(uint256 stream) internal pure returns (address res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 20)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readBytes(uint256 stream) internal pure returns (bytes memory res) {\\n    assembly {\\n      let pos := mload(stream)\\n      res := add(pos, 32)\\n      let length := mload(res)\\n      mstore(stream, add(res, length))\\n    }\\n  }\\n\\n  function readAddresses(\\n    uint256 stream,\\n    uint256 count\\n  ) internal pure returns (address[] memory res) {\\n    res = new address[](count);\\n\\n    for (uint256 index; index < count; ) {\\n      res[index] = readAddress(stream);\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n\\n  function readUint16s(uint256 stream, uint256 count) internal pure returns (uint16[] memory res) {\\n    res = new uint16[](count);\\n\\n    for (uint256 index; index < count; ) {\\n      res[index] = readUint16(stream);\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x3065877d083186218967d5c063facf7b3285521e2921edc5029b5839c40596b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b50613aa08061001d5f395ff3fe608060405260043610610109575f3560e01c8063cd98504c116100a1578063dcc4555111610071578063e92a6f0511610057578063e92a6f051461022d578063eb2b767714610241578063fa31c9c014610255575f80fd5b8063dcc4555114610204578063e67cbdb814610219575f80fd5b8063cd98504c146101b6578063cedf0d18146101ca578063d267733d146101dd578063dc76f872146101f1575f80fd5b806391f46532116100dc57806391f465321461016957806393a4c0cb1461017c578063ad5d50261461018f578063b41e3c2c146101a3575f80fd5b80632cad76e81461010d57806344b14b811461012e57806367ec524c1461014257806372c30b0614610155575b5f80fd5b348015610118575f80fd5b5060085b60405190815260200160405180910390f35b348015610139575f80fd5b5061011c600181565b34801561014d575f80fd5b50600761011c565b348015610160575f80fd5b5061011c600881565b348015610174575f80fd5b50600461011c565b348015610187575f80fd5b50600361011c565b34801561019a575f80fd5b5061011c600781565b3480156101ae575f80fd5b50600661011c565b3480156101c1575f80fd5b5061011c600681565b3480156101d5575f80fd5b50600561011c565b3480156101e8575f80fd5b5061011c600281565b3480156101fc575f80fd5b50600261011c565b61021761021236600461369f565b610268565b005b348015610224575f80fd5b5061011c600381565b348015610238575f80fd5b5061011c600481565b34801561024c575f80fd5b5061011c600581565b348015610260575f80fd5b50600161011c565b80610100015165ffffffffffff164211156102af576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516060810182525f8082526020820181905291810182815260c08401518252608084015173ffffffffffffffffffffffffffffffffffffffff1690529034900361035257608082015173ffffffffffffffffffffffffffffffffffffffff16610347576040517fd34bde3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360208201526103e8565b608082015173ffffffffffffffffffffffffffffffffffffffff16156103a4576040517fd34bde3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160c0015134146103e1576040517fab0a033b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3060208201525b5f61040c836101200151604080518082019091528181528151909101602082015290565b90506104188183610579565b8051604082015160a0860151929450909173ffffffffffffffffffffffffffffffffffffffff80831691161461047a576040517fae39073000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61048c8560e0015186604001516106b1565b8210156104c5576040517f42301c2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104e1855f01518660a0015187602001518860e00151866106de565b915073ffffffffffffffffffffffffffffffffffffffff811661054b57846060015173ffffffffffffffffffffffffffffffffffffffff166108fc8390811502906040515f60405180830381858888f19350505050158015610545573d5f803e3d5ffd5b50610572565b60608501516105729073ffffffffffffffffffffffffffffffffffffffff8316908461079b565b5050505050565b604080516060810182525f80825260208201819052918101919091525f6105a68480516001018051915290565b60ff1690505f5b818110156106a5575f6105c68680516001018051915290565b60ff169050600181036105e3576105dc85610874565b9450610692565b600281036105f4576105dc856109df565b60038103610606576105dc8686610bac565b60048103610618576105dc868661106c565b6005810361062a576105dc86866112fd565b6006810361063c576105dc868661198d565b6007810361064e576105dc8686611e39565b60088103610660576105dc86866122f6565b6040517f8ccd166700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b508061069d816137c5565b9150506105ad565b50829150505b92915050565b5f6127106106bf83826137fc565b6106cd9061ffff1685613817565b6106d7919061385b565b9392505050565b5f6107d061ffff85161115610728576040517f8ea70c070000000000000000000000000000000000000000000000000000000081526107d060048201526024015b60405180910390fd5b5f8284811115610739575050828203835b61271061ffff871682020491909101905f73ffffffffffffffffffffffffffffffffffffffff8916156107725760646032840204610774565b5f5b905080830383821461078c5761078c8a8a8484612611565b50505090910395945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261086f9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612714565b505050565b604080516060810182525f8082526020820181905281830152908201517f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e109073ffffffffffffffffffffffffffffffffffffffff1615610900576040517f45369fbb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602083015173ffffffffffffffffffffffffffffffffffffffff163014610953576040517f32d40df100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805473ffffffffffffffffffffffffffffffffffffffff166040808501829052845181517fd0e30db0000000000000000000000000000000000000000000000000000000008152915163d0e30db0926004808201925f9290919082900301818588803b1580156109c1575f80fd5b505af11580156109d3573d5f803e3d5ffd5b50959695505050505050565b604080516060810182525f80825260208201819052818301527f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e108054928401519192909173ffffffffffffffffffffffffffffffffffffffff918216911614610a74576040517fb2ee070800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602083015173ffffffffffffffffffffffffffffffffffffffff81163014801590610aa0573060208601525b5f60408601528015610ad65784518354610ad69173ffffffffffffffffffffffffffffffffffffffff9091169084903090612821565b825485516040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691632e1a7d4d91610b2f9160040190815260200190565b5f604051808303815f87803b158015610b46575f80fd5b505af1158015610b58573d5f803e3d5ffd5b5050506020860151865160405173ffffffffffffffffffffffffffffffffffffffff909216925080156108fc02915f818181858888f19350505050158015610ba2573d5f803e3d5ffd5b5093949350505050565b604080516060810182525f80825260208201819052818301529082015173ffffffffffffffffffffffffffffffffffffffff16610c15576040517f767836b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516080810182525f8082526020820181905291810182905260608101919091528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1681528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1660208201528351600101805190855260ff1660011460408201528351600201805190855261ffff16606082015260208301513073ffffffffffffffffffffffffffffffffffffffff90911603610cfd57602081015183516040850151610cf89273ffffffffffffffffffffffffffffffffffffffff9091169161079b565b610d40565b610d3983602001518260200151855f0151866040015173ffffffffffffffffffffffffffffffffffffffff16612821909392919063ffffffff16565b3060208401525b5f80826020015173ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610d8f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610db391906138b0565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508260400151610de357905b6060830151855161ffff6127109283031691840290820290810190830281610e0d57610e0d61382e565b0486525082516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610e7c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ea091906138fc565b9050836020015173ffffffffffffffffffffffffffffffffffffffff1663022c0d9f8560400151610ed2578751610ed4565b5f5b8660400151610ee3575f610ee6565b88515b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152306044820152608060648201525f608482015260a4015f604051808303815f87803b158015610f4c575f80fd5b505af1158015610f5e573d5f803e3d5ffd5b505085516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f935073ffffffffffffffffffffffffffffffffffffffff90911691506370a0823190602401602060405180830381865afa158015610fcf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ff391906138fc565b90508181108061100d5750865161100a9083613913565b81105b15611044576040517f946beb5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050915173ffffffffffffffffffffffffffffffffffffffff16604085015250919392505050565b604080516060810182525f80825260208201819052918101919091525f6110998480516001018051915290565b835160ff9190911691505f60028310156110df576040517f1d6beb5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f805f5b858110156112ce575f6110f7600188613926565b82106111035785611130565b6127106111168b80516002018051915290565b8a516111269161ffff1690613817565b611130919061385b565b90508581111561116c576040517f0f24c51700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111768187613926565b604080516060810182525f6020808301828152838501928352868452908e015173ffffffffffffffffffffffffffffffffffffffff908116909152928d01519092169091529096506111c88b82610579565b9050825f036111e45780602001519350806040015194506112b6565b8473ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff161461124d576040517fd7af48f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16146112b6576040517f51a769fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516112c29087613913565b955050506001016110e3565b5073ffffffffffffffffffffffffffffffffffffffff9081166020880152166040860152845250919392505050565b604080516060810182525f808252602082018190529181019190915261133d60405180606001604052806060815260200160608152602001606081525090565b5f61134e8580516001018051915290565b60ff16905061135e816001613913565b67ffffffffffffffff81111561137657611376613553565b60405190808252806020026020018201604052801561139f578160200160208202803683370190505b50808352604085015181519091905f906113bb576113bb613939565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505f5b8181101561145357855160140180519087528351611416836001613913565b8151811061142657611426613939565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016113f7565b5061145e8582612885565b602083015261146d8582612926565b6040830152815180515f91908390811061148957611489613939565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156114fd573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061152191906138fc565b90505f61153e8460400151875f0151865f015187602001516129ae565b90503073ffffffffffffffffffffffffffffffffffffffff16866020015173ffffffffffffffffffffffffffffffffffffffff16036115cb576115c684602001515f8151811061159057611590613939565b6020026020010151875f0151886040015173ffffffffffffffffffffffffffffffffffffffff1661079b9092919063ffffffff16565b611627565b611620866020015185602001515f815181106115e9576115e9613939565b6020026020010151885f0151896040015173ffffffffffffffffffffffffffffffffffffffff16612821909392919063ffffffff16565b3060208701525b5f5b8381101561181b575f61163d826001613913565b90505f865f0151828151811061165557611655613939565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16875f0151848151811061168857611688613939565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16106116b1575f6116b4565b60015b90505f6002885f0151516116c89190613926565b84106116d457306116f3565b876020015183815181106116ea576116ea613939565b60200260200101515b90508760200151848151811061170b5761170b613939565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663022c0d9f836117525786858151811061174557611745613939565b6020026020010151611754565b5f5b8461175f575f61177a565b87868151811061177157611771613939565b60200260200101515b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526004810192909252602482015273ffffffffffffffffffffffffffffffffffffffff84166044820152608060648201525f608482015260a4015f604051808303815f87803b1580156117f6575f80fd5b505af1158015611808573d5f803e3d5ffd5b5050600190950194506116299350505050565b505f845f0151848151811061183257611832613939565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156118a6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118ca91906138fc565b905081600183516118db9190613926565b815181106118eb576118eb613939565b60209081029190910101518752828110806119105750865161190d9084613913565b81105b15611947576040517f946beb5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845180518590811061195b5761195b613939565b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff16604088015250949695505050505050565b60408051606080820183525f80835260208084018290528385018290528451608081018652828152908101829052938401819052908301528351601401805190855290919073ffffffffffffffffffffffffffffffffffffffff1681528351601401805190855273ffffffffffffffffffffffffffffffffffffffff9081166020830152604084015116611a4d576040517f767836b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611ab8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611adc91906138fc565b90505f825f015173ffffffffffffffffffffffffffffffffffffffff16856040015173ffffffffffffffffffffffffffffffffffffffff16109050611b716040518060600160405280875f01518152602001876020015173ffffffffffffffffffffffffffffffffffffffff168152602001876040015173ffffffffffffffffffffffffffffffffffffffff16815250612bdb565b8015611c4957602083015185516040517f128acb08000000000000000000000000000000000000000000000000000000008152306004820152831515602482015260448101919091526401000276a4606482015260a060848201525f60a482018190529173ffffffffffffffffffffffffffffffffffffffff169063128acb089060c40160408051808303815f875af1158015611c10573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c349190613966565b91505080611c4190613988565b865250611d25565b602083015185516040517f128acb080000000000000000000000000000000000000000000000000000000081523060048201528315156024820152604481019190915273fffd8963efd1fc6a506488495d951d5263988d25606482015260a060848201525f60a482018190529173ffffffffffffffffffffffffffffffffffffffff169063128acb089060c40160408051808303815f875af1158015611cf1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d159190613966565b509050611d2181613988565b8652505b611d2d612d44565b82516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611d98573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611dbc91906138fc565b905082811080611dd657508551611dd39084613913565b81105b15611e0d576040517f946beb5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050905173ffffffffffffffffffffffffffffffffffffffff1660408401525050306020820152919050565b604080516060810182525f8082526020820181905291810191909152611e7960405180606001604052806060815260200160608152602001606081525090565b5f611e8a8580516001018051915290565b60ff169050611e998582612885565b8252611ea58582612885565b602083015281515f90611eb9600184613926565b81518110611ec957611ec9613939565b60209081029190910101516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091505f9073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015611f41573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f6591906138fc565b90505f5b83811015612206575f8115611fa2578551611f85600184613926565b81518110611f9557611f95613939565b6020026020010151611fa8565b87604001515b9050855f01518281518110611fbf57611fbf613939565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff9081166040808c0182905280516060810182528c5181528c850151841694810194909452918416918301829052119061201890612bdb565b825f03612026573060208a01525b5f8760200151848151811061203d5761203d613939565b60200260200101519050811561211b5789516040517f128acb08000000000000000000000000000000000000000000000000000000008152306004820152831515602482015260448101919091526401000276a4606482015260a060848201525f60a482018190529073ffffffffffffffffffffffffffffffffffffffff83169063128acb089060c40160408051808303815f875af11580156120e2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121069190613966565b9150508061211390613988565b8b52506121f3565b89516040517f128acb080000000000000000000000000000000000000000000000000000000081523060048201528315156024820152604481019190915273fffd8963efd1fc6a506488495d951d5263988d25606482015260a060848201525f60a482018190529073ffffffffffffffffffffffffffffffffffffffff83169063128acb089060c40160408051808303815f875af11580156121bf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121e39190613966565b5090506121ef81613988565b8b52505b6121fb612d44565b505050600101611f69565b5060408087015190517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015612275573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061229991906138fc565b9050818110806122b3575086516122b09083613913565b81105b156122ea576040517f946beb5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50949695505050505050565b60408051606080820183525f8083526020808401829052838501829052845160c0810186528281529081018290529384018190529083018190526080830181905260a08301528351601401805190855290919073ffffffffffffffffffffffffffffffffffffffff1681528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1660208201528351600101805190855260ff1660408201528351600101805190855260ff1660608201528351600101805190855260ff1660808201528351600101805190855260ff1660011460a082015260408301518151602085015173ffffffffffffffffffffffffffffffffffffffff928316159291821615913091161461243b576020850151855160408701516124349273ffffffffffffffffffffffffffffffffffffffff909116913090612821565b3060208601525b5f816124d55783516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156124ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124d091906138fc565b6124d7565b475b90508261250c5760208401518651604088015161250c9273ffffffffffffffffffffffffffffffffffffffff90911691612da4565b61253e84608001518560a00151866020015186612529575f61252c565b89515b604089015160608a01518c515f612e93565b5f826125d85784516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156125af573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125d391906138fc565b6125da565b475b855173ffffffffffffffffffffffffffffffffffffffff16604089015290506126038282613926565b875250949695505050505050565b7f4edbd34b5b006870ab724677d99b508debf8dcac0dc8134c9c43b93f8afe50f073ffffffffffffffffffffffffffffffffffffffff8416156126805773ffffffffffffffffffffffffffffffffffffffff85165f908152600282016020526040902061267e9085613222565b505b61268a8186613222565b5073ffffffffffffffffffffffffffffffffffffffff8581165f81815260038401602090815260408083209489168084529482528083208054890190556004860182529182902080548801905581518781529081018690527fb9c71741297b7329823b5575aa676062720448277d6da61cf68eb0fed6c4baf4910160405180910390a35050505050565b5f612775826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166132439092919063ffffffff16565b905080515f148061279557508080602001905181019061279591906139be565b61086f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161071f565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261287f9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016107ed565b50505050565b60608167ffffffffffffffff8111156128a0576128a0613553565b6040519080825280602002602001820160405280156128c9578160200160208202803683370190505b5090505f5b8281101561291f57835160140180519085528282815181106128f2576128f2613939565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016128ce565b5092915050565b60608167ffffffffffffffff81111561294157612941613553565b60405190808252806020026020018201604052801561296a578160200160208202803683370190505b5090505f5b8281101561291f578351600201805190855282828151811061299357612993613939565b61ffff9092166020928302919091019091015260010161296f565b805182516060919067ffffffffffffffff8111156129ce576129ce613553565b6040519080825280602002602001820160405280156129f7578160200160208202803683370190505b50915084825f81518110612a0d57612a0d613939565b6020026020010181815250505f5b81811015612bd1575f858281518110612a3657612a36613939565b602002602001015190505f86836001612a4f9190613913565b81518110612a5f57612a5f613939565b602002602001015190505f898481518110612a7c57612a7c613939565b6020026020010151612710612a9191906137fc565b61ffff1690505f80888681518110612aab57612aab613939565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612afb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b1f91906138b0565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161115612b7a57905b828b0282612710020181848d020281612b9557612b9561382e565b049a508a88612ba5886001613913565b81518110612bb557612bb5613939565b6020908102919091010152505060019093019250612a1b915050565b5050949350505050565b7f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7a5460ff16600103612c39576040517f65d4e04900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7a805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911617905580517f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7b5560208101517f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7c80547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff938416179091556040909201517f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7d80549093169116179055565b7f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7a5460ff16600103612da2576040517f129c8cdb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052612e308482613259565b61287f5760405173ffffffffffffffffffffffffffffffffffffffff841660248201525f6044820152612e899085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016107ed565b61287f8482612714565b8760ff16600103612fbd578615612f48576040517fa6417ed600000000000000000000000000000000000000000000000000000000815260ff808616600f90810b6004840152908516900b6024820152604481018390526064810182905273ffffffffffffffffffffffffffffffffffffffff87169063a6417ed69087906084015b5f604051808303818588803b158015612f2c575f80fd5b505af1158015612f3e573d5f803e3d5ffd5b5050505050613218565b6040517f3df0212400000000000000000000000000000000000000000000000000000000815260ff808616600f90810b6004840152908516900b6024820152604481018390526064810182905273ffffffffffffffffffffffffffffffffffffffff871690633df02124908790608401612f15565b8760ff166002036130fb578615613086576040517fa6417ed600000000000000000000000000000000000000000000000000000000815260ff808616600f90810b6004840152908516900b6024820152604481018390526064810182905273ffffffffffffffffffffffffffffffffffffffff87169063a6417ed69087906084015b60206040518083038185885af115801561305b573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061308091906138fc565b50613218565b6040517f3df0212400000000000000000000000000000000000000000000000000000000815260ff808616600f90810b6004840152908516900b6024820152604481018390526064810182905273ffffffffffffffffffffffffffffffffffffffff871690633df0212490879060840161303f565b8760ff166003036131e6578615613179576040517f65b2489b00000000000000000000000000000000000000000000000000000000815260ff808616600483015284166024820152604481018390526064810182905273ffffffffffffffffffffffffffffffffffffffff8716906365b2489b90879060840161303f565b6040517f5b41b90800000000000000000000000000000000000000000000000000000000815260ff808616600483015284166024820152604481018390526064810182905273ffffffffffffffffffffffffffffffffffffffff871690635b41b90890879060840161303f565b6040517ff1c43ede00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050565b5f6106d78373ffffffffffffffffffffffffffffffffffffffff8416613314565b606061325184845f85613360565b949350505050565b5f805f8473ffffffffffffffffffffffffffffffffffffffff168460405161328191906139ff565b5f604051808303815f865af19150503d805f81146132ba576040519150601f19603f3d011682016040523d82523d5f602084013e6132bf565b606091505b50915091508180156132e95750805115806132e95750808060200190518101906132e991906139be565b801561330b575073ffffffffffffffffffffffffffffffffffffffff85163b15155b95945050505050565b5f81815260018301602052604081205461335957508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556106ab565b505f6106ab565b6060824710156133f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161071f565b5f808673ffffffffffffffffffffffffffffffffffffffff16858760405161341a91906139ff565b5f6040518083038185875af1925050503d805f8114613454576040519150601f19603f3d011682016040523d82523d5f602084013e613459565b606091505b509150915061346a87838387613475565b979650505050505050565b6060831561350a5782515f036135035773ffffffffffffffffffffffffffffffffffffffff85163b613503576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161071f565b5081613251565b613251838381511561351f5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071f9190613a1a565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051610140810167ffffffffffffffff811182821017156135a4576135a4613553565b60405290565b803573ffffffffffffffffffffffffffffffffffffffff811681146135cd575f80fd5b919050565b803561ffff811681146135cd575f80fd5b803565ffffffffffff811681146135cd575f80fd5b5f82601f830112613607575f80fd5b813567ffffffffffffffff8082111561362257613622613553565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561366857613668613553565b81604052838152866020858801011115613680575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f602082840312156136af575f80fd5b813567ffffffffffffffff808211156136c6575f80fd5b9083019061014082860312156136da575f80fd5b6136e2613580565b6136eb836135aa565b81526136f9602084016135d2565b602082015261370a604084016135d2565b604082015261371b606084016135aa565b606082015261372c608084016135aa565b608082015261373d60a084016135aa565b60a082015260c083013560c082015260e083013560e08201526101006137648185016135e3565b90820152610120838101358381111561377b575f80fd5b613787888287016135f8565b918301919091525095945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036137f5576137f5613798565b5060010190565b61ffff82811682821603908082111561291f5761291f613798565b80820281158282048414176106ab576106ab613798565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f8261388e577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b80516dffffffffffffffffffffffffffff811681146135cd575f80fd5b5f805f606084860312156138c2575f80fd5b6138cb84613893565b92506138d960208501613893565b9150604084015163ffffffff811681146138f1575f80fd5b809150509250925092565b5f6020828403121561390c575f80fd5b5051919050565b808201808211156106ab576106ab613798565b818103818111156106ab576106ab613798565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f8060408385031215613977575f80fd5b505080516020909101519092909150565b5f7f800000000000000000000000000000000000000000000000000000000000000082036139b8576139b8613798565b505f0390565b5f602082840312156139ce575f80fd5b815180151581146106d7575f80fd5b5f5b838110156139f75781810151838201526020016139df565b50505f910152565b5f8251613a108184602087016139dd565b9190910192915050565b602081525f8251806020840152613a388160408501602087016139dd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220b26ee2a5834b5f17900f49b4bca63a1e86ee414c2e843498f92ab32d93bd084c64736f6c63430008150033",
  "deployedBytecode": "0x608060405260043610610109575f3560e01c8063cd98504c116100a1578063dcc4555111610071578063e92a6f0511610057578063e92a6f051461022d578063eb2b767714610241578063fa31c9c014610255575f80fd5b8063dcc4555114610204578063e67cbdb814610219575f80fd5b8063cd98504c146101b6578063cedf0d18146101ca578063d267733d146101dd578063dc76f872146101f1575f80fd5b806391f46532116100dc57806391f465321461016957806393a4c0cb1461017c578063ad5d50261461018f578063b41e3c2c146101a3575f80fd5b80632cad76e81461010d57806344b14b811461012e57806367ec524c1461014257806372c30b0614610155575b5f80fd5b348015610118575f80fd5b5060085b60405190815260200160405180910390f35b348015610139575f80fd5b5061011c600181565b34801561014d575f80fd5b50600761011c565b348015610160575f80fd5b5061011c600881565b348015610174575f80fd5b50600461011c565b348015610187575f80fd5b50600361011c565b34801561019a575f80fd5b5061011c600781565b3480156101ae575f80fd5b50600661011c565b3480156101c1575f80fd5b5061011c600681565b3480156101d5575f80fd5b50600561011c565b3480156101e8575f80fd5b5061011c600281565b3480156101fc575f80fd5b50600261011c565b61021761021236600461369f565b610268565b005b348015610224575f80fd5b5061011c600381565b348015610238575f80fd5b5061011c600481565b34801561024c575f80fd5b5061011c600581565b348015610260575f80fd5b50600161011c565b80610100015165ffffffffffff164211156102af576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516060810182525f8082526020820181905291810182815260c08401518252608084015173ffffffffffffffffffffffffffffffffffffffff1690529034900361035257608082015173ffffffffffffffffffffffffffffffffffffffff16610347576040517fd34bde3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360208201526103e8565b608082015173ffffffffffffffffffffffffffffffffffffffff16156103a4576040517fd34bde3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160c0015134146103e1576040517fab0a033b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3060208201525b5f61040c836101200151604080518082019091528181528151909101602082015290565b90506104188183610579565b8051604082015160a0860151929450909173ffffffffffffffffffffffffffffffffffffffff80831691161461047a576040517fae39073000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61048c8560e0015186604001516106b1565b8210156104c5576040517f42301c2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104e1855f01518660a0015187602001518860e00151866106de565b915073ffffffffffffffffffffffffffffffffffffffff811661054b57846060015173ffffffffffffffffffffffffffffffffffffffff166108fc8390811502906040515f60405180830381858888f19350505050158015610545573d5f803e3d5ffd5b50610572565b60608501516105729073ffffffffffffffffffffffffffffffffffffffff8316908461079b565b5050505050565b604080516060810182525f80825260208201819052918101919091525f6105a68480516001018051915290565b60ff1690505f5b818110156106a5575f6105c68680516001018051915290565b60ff169050600181036105e3576105dc85610874565b9450610692565b600281036105f4576105dc856109df565b60038103610606576105dc8686610bac565b60048103610618576105dc868661106c565b6005810361062a576105dc86866112fd565b6006810361063c576105dc868661198d565b6007810361064e576105dc8686611e39565b60088103610660576105dc86866122f6565b6040517f8ccd166700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b508061069d816137c5565b9150506105ad565b50829150505b92915050565b5f6127106106bf83826137fc565b6106cd9061ffff1685613817565b6106d7919061385b565b9392505050565b5f6107d061ffff85161115610728576040517f8ea70c070000000000000000000000000000000000000000000000000000000081526107d060048201526024015b60405180910390fd5b5f8284811115610739575050828203835b61271061ffff871682020491909101905f73ffffffffffffffffffffffffffffffffffffffff8916156107725760646032840204610774565b5f5b905080830383821461078c5761078c8a8a8484612611565b50505090910395945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261086f9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612714565b505050565b604080516060810182525f8082526020820181905281830152908201517f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e109073ffffffffffffffffffffffffffffffffffffffff1615610900576040517f45369fbb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602083015173ffffffffffffffffffffffffffffffffffffffff163014610953576040517f32d40df100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805473ffffffffffffffffffffffffffffffffffffffff166040808501829052845181517fd0e30db0000000000000000000000000000000000000000000000000000000008152915163d0e30db0926004808201925f9290919082900301818588803b1580156109c1575f80fd5b505af11580156109d3573d5f803e3d5ffd5b50959695505050505050565b604080516060810182525f80825260208201819052818301527f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e108054928401519192909173ffffffffffffffffffffffffffffffffffffffff918216911614610a74576040517fb2ee070800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602083015173ffffffffffffffffffffffffffffffffffffffff81163014801590610aa0573060208601525b5f60408601528015610ad65784518354610ad69173ffffffffffffffffffffffffffffffffffffffff9091169084903090612821565b825485516040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691632e1a7d4d91610b2f9160040190815260200190565b5f604051808303815f87803b158015610b46575f80fd5b505af1158015610b58573d5f803e3d5ffd5b5050506020860151865160405173ffffffffffffffffffffffffffffffffffffffff909216925080156108fc02915f818181858888f19350505050158015610ba2573d5f803e3d5ffd5b5093949350505050565b604080516060810182525f80825260208201819052818301529082015173ffffffffffffffffffffffffffffffffffffffff16610c15576040517f767836b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516080810182525f8082526020820181905291810182905260608101919091528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1681528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1660208201528351600101805190855260ff1660011460408201528351600201805190855261ffff16606082015260208301513073ffffffffffffffffffffffffffffffffffffffff90911603610cfd57602081015183516040850151610cf89273ffffffffffffffffffffffffffffffffffffffff9091169161079b565b610d40565b610d3983602001518260200151855f0151866040015173ffffffffffffffffffffffffffffffffffffffff16612821909392919063ffffffff16565b3060208401525b5f80826020015173ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610d8f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610db391906138b0565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508260400151610de357905b6060830151855161ffff6127109283031691840290820290810190830281610e0d57610e0d61382e565b0486525082516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610e7c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ea091906138fc565b9050836020015173ffffffffffffffffffffffffffffffffffffffff1663022c0d9f8560400151610ed2578751610ed4565b5f5b8660400151610ee3575f610ee6565b88515b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152306044820152608060648201525f608482015260a4015f604051808303815f87803b158015610f4c575f80fd5b505af1158015610f5e573d5f803e3d5ffd5b505085516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f935073ffffffffffffffffffffffffffffffffffffffff90911691506370a0823190602401602060405180830381865afa158015610fcf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ff391906138fc565b90508181108061100d5750865161100a9083613913565b81105b15611044576040517f946beb5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050915173ffffffffffffffffffffffffffffffffffffffff16604085015250919392505050565b604080516060810182525f80825260208201819052918101919091525f6110998480516001018051915290565b835160ff9190911691505f60028310156110df576040517f1d6beb5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f805f5b858110156112ce575f6110f7600188613926565b82106111035785611130565b6127106111168b80516002018051915290565b8a516111269161ffff1690613817565b611130919061385b565b90508581111561116c576040517f0f24c51700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111768187613926565b604080516060810182525f6020808301828152838501928352868452908e015173ffffffffffffffffffffffffffffffffffffffff908116909152928d01519092169091529096506111c88b82610579565b9050825f036111e45780602001519350806040015194506112b6565b8473ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff161461124d576040517fd7af48f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16146112b6576040517f51a769fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516112c29087613913565b955050506001016110e3565b5073ffffffffffffffffffffffffffffffffffffffff9081166020880152166040860152845250919392505050565b604080516060810182525f808252602082018190529181019190915261133d60405180606001604052806060815260200160608152602001606081525090565b5f61134e8580516001018051915290565b60ff16905061135e816001613913565b67ffffffffffffffff81111561137657611376613553565b60405190808252806020026020018201604052801561139f578160200160208202803683370190505b50808352604085015181519091905f906113bb576113bb613939565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505f5b8181101561145357855160140180519087528351611416836001613913565b8151811061142657611426613939565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016113f7565b5061145e8582612885565b602083015261146d8582612926565b6040830152815180515f91908390811061148957611489613939565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156114fd573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061152191906138fc565b90505f61153e8460400151875f0151865f015187602001516129ae565b90503073ffffffffffffffffffffffffffffffffffffffff16866020015173ffffffffffffffffffffffffffffffffffffffff16036115cb576115c684602001515f8151811061159057611590613939565b6020026020010151875f0151886040015173ffffffffffffffffffffffffffffffffffffffff1661079b9092919063ffffffff16565b611627565b611620866020015185602001515f815181106115e9576115e9613939565b6020026020010151885f0151896040015173ffffffffffffffffffffffffffffffffffffffff16612821909392919063ffffffff16565b3060208701525b5f5b8381101561181b575f61163d826001613913565b90505f865f0151828151811061165557611655613939565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16875f0151848151811061168857611688613939565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16106116b1575f6116b4565b60015b90505f6002885f0151516116c89190613926565b84106116d457306116f3565b876020015183815181106116ea576116ea613939565b60200260200101515b90508760200151848151811061170b5761170b613939565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663022c0d9f836117525786858151811061174557611745613939565b6020026020010151611754565b5f5b8461175f575f61177a565b87868151811061177157611771613939565b60200260200101515b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526004810192909252602482015273ffffffffffffffffffffffffffffffffffffffff84166044820152608060648201525f608482015260a4015f604051808303815f87803b1580156117f6575f80fd5b505af1158015611808573d5f803e3d5ffd5b5050600190950194506116299350505050565b505f845f0151848151811061183257611832613939565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156118a6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118ca91906138fc565b905081600183516118db9190613926565b815181106118eb576118eb613939565b60209081029190910101518752828110806119105750865161190d9084613913565b81105b15611947576040517f946beb5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845180518590811061195b5761195b613939565b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff16604088015250949695505050505050565b60408051606080820183525f80835260208084018290528385018290528451608081018652828152908101829052938401819052908301528351601401805190855290919073ffffffffffffffffffffffffffffffffffffffff1681528351601401805190855273ffffffffffffffffffffffffffffffffffffffff9081166020830152604084015116611a4d576040517f767836b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611ab8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611adc91906138fc565b90505f825f015173ffffffffffffffffffffffffffffffffffffffff16856040015173ffffffffffffffffffffffffffffffffffffffff16109050611b716040518060600160405280875f01518152602001876020015173ffffffffffffffffffffffffffffffffffffffff168152602001876040015173ffffffffffffffffffffffffffffffffffffffff16815250612bdb565b8015611c4957602083015185516040517f128acb08000000000000000000000000000000000000000000000000000000008152306004820152831515602482015260448101919091526401000276a4606482015260a060848201525f60a482018190529173ffffffffffffffffffffffffffffffffffffffff169063128acb089060c40160408051808303815f875af1158015611c10573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c349190613966565b91505080611c4190613988565b865250611d25565b602083015185516040517f128acb080000000000000000000000000000000000000000000000000000000081523060048201528315156024820152604481019190915273fffd8963efd1fc6a506488495d951d5263988d25606482015260a060848201525f60a482018190529173ffffffffffffffffffffffffffffffffffffffff169063128acb089060c40160408051808303815f875af1158015611cf1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d159190613966565b509050611d2181613988565b8652505b611d2d612d44565b82516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611d98573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611dbc91906138fc565b905082811080611dd657508551611dd39084613913565b81105b15611e0d576040517f946beb5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050905173ffffffffffffffffffffffffffffffffffffffff1660408401525050306020820152919050565b604080516060810182525f8082526020820181905291810191909152611e7960405180606001604052806060815260200160608152602001606081525090565b5f611e8a8580516001018051915290565b60ff169050611e998582612885565b8252611ea58582612885565b602083015281515f90611eb9600184613926565b81518110611ec957611ec9613939565b60209081029190910101516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091505f9073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015611f41573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f6591906138fc565b90505f5b83811015612206575f8115611fa2578551611f85600184613926565b81518110611f9557611f95613939565b6020026020010151611fa8565b87604001515b9050855f01518281518110611fbf57611fbf613939565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff9081166040808c0182905280516060810182528c5181528c850151841694810194909452918416918301829052119061201890612bdb565b825f03612026573060208a01525b5f8760200151848151811061203d5761203d613939565b60200260200101519050811561211b5789516040517f128acb08000000000000000000000000000000000000000000000000000000008152306004820152831515602482015260448101919091526401000276a4606482015260a060848201525f60a482018190529073ffffffffffffffffffffffffffffffffffffffff83169063128acb089060c40160408051808303815f875af11580156120e2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121069190613966565b9150508061211390613988565b8b52506121f3565b89516040517f128acb080000000000000000000000000000000000000000000000000000000081523060048201528315156024820152604481019190915273fffd8963efd1fc6a506488495d951d5263988d25606482015260a060848201525f60a482018190529073ffffffffffffffffffffffffffffffffffffffff83169063128acb089060c40160408051808303815f875af11580156121bf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121e39190613966565b5090506121ef81613988565b8b52505b6121fb612d44565b505050600101611f69565b5060408087015190517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015612275573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061229991906138fc565b9050818110806122b3575086516122b09083613913565b81105b156122ea576040517f946beb5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50949695505050505050565b60408051606080820183525f8083526020808401829052838501829052845160c0810186528281529081018290529384018190529083018190526080830181905260a08301528351601401805190855290919073ffffffffffffffffffffffffffffffffffffffff1681528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1660208201528351600101805190855260ff1660408201528351600101805190855260ff1660608201528351600101805190855260ff1660808201528351600101805190855260ff1660011460a082015260408301518151602085015173ffffffffffffffffffffffffffffffffffffffff928316159291821615913091161461243b576020850151855160408701516124349273ffffffffffffffffffffffffffffffffffffffff909116913090612821565b3060208601525b5f816124d55783516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156124ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124d091906138fc565b6124d7565b475b90508261250c5760208401518651604088015161250c9273ffffffffffffffffffffffffffffffffffffffff90911691612da4565b61253e84608001518560a00151866020015186612529575f61252c565b89515b604089015160608a01518c515f612e93565b5f826125d85784516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156125af573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125d391906138fc565b6125da565b475b855173ffffffffffffffffffffffffffffffffffffffff16604089015290506126038282613926565b875250949695505050505050565b7f4edbd34b5b006870ab724677d99b508debf8dcac0dc8134c9c43b93f8afe50f073ffffffffffffffffffffffffffffffffffffffff8416156126805773ffffffffffffffffffffffffffffffffffffffff85165f908152600282016020526040902061267e9085613222565b505b61268a8186613222565b5073ffffffffffffffffffffffffffffffffffffffff8581165f81815260038401602090815260408083209489168084529482528083208054890190556004860182529182902080548801905581518781529081018690527fb9c71741297b7329823b5575aa676062720448277d6da61cf68eb0fed6c4baf4910160405180910390a35050505050565b5f612775826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166132439092919063ffffffff16565b905080515f148061279557508080602001905181019061279591906139be565b61086f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161071f565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261287f9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016107ed565b50505050565b60608167ffffffffffffffff8111156128a0576128a0613553565b6040519080825280602002602001820160405280156128c9578160200160208202803683370190505b5090505f5b8281101561291f57835160140180519085528282815181106128f2576128f2613939565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016128ce565b5092915050565b60608167ffffffffffffffff81111561294157612941613553565b60405190808252806020026020018201604052801561296a578160200160208202803683370190505b5090505f5b8281101561291f578351600201805190855282828151811061299357612993613939565b61ffff9092166020928302919091019091015260010161296f565b805182516060919067ffffffffffffffff8111156129ce576129ce613553565b6040519080825280602002602001820160405280156129f7578160200160208202803683370190505b50915084825f81518110612a0d57612a0d613939565b6020026020010181815250505f5b81811015612bd1575f858281518110612a3657612a36613939565b602002602001015190505f86836001612a4f9190613913565b81518110612a5f57612a5f613939565b602002602001015190505f898481518110612a7c57612a7c613939565b6020026020010151612710612a9191906137fc565b61ffff1690505f80888681518110612aab57612aab613939565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612afb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b1f91906138b0565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161115612b7a57905b828b0282612710020181848d020281612b9557612b9561382e565b049a508a88612ba5886001613913565b81518110612bb557612bb5613939565b6020908102919091010152505060019093019250612a1b915050565b5050949350505050565b7f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7a5460ff16600103612c39576040517f65d4e04900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7a805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911617905580517f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7b5560208101517f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7c80547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff938416179091556040909201517f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7d80549093169116179055565b7f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7a5460ff16600103612da2576040517f129c8cdb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052612e308482613259565b61287f5760405173ffffffffffffffffffffffffffffffffffffffff841660248201525f6044820152612e899085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016107ed565b61287f8482612714565b8760ff16600103612fbd578615612f48576040517fa6417ed600000000000000000000000000000000000000000000000000000000815260ff808616600f90810b6004840152908516900b6024820152604481018390526064810182905273ffffffffffffffffffffffffffffffffffffffff87169063a6417ed69087906084015b5f604051808303818588803b158015612f2c575f80fd5b505af1158015612f3e573d5f803e3d5ffd5b5050505050613218565b6040517f3df0212400000000000000000000000000000000000000000000000000000000815260ff808616600f90810b6004840152908516900b6024820152604481018390526064810182905273ffffffffffffffffffffffffffffffffffffffff871690633df02124908790608401612f15565b8760ff166002036130fb578615613086576040517fa6417ed600000000000000000000000000000000000000000000000000000000815260ff808616600f90810b6004840152908516900b6024820152604481018390526064810182905273ffffffffffffffffffffffffffffffffffffffff87169063a6417ed69087906084015b60206040518083038185885af115801561305b573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061308091906138fc565b50613218565b6040517f3df0212400000000000000000000000000000000000000000000000000000000815260ff808616600f90810b6004840152908516900b6024820152604481018390526064810182905273ffffffffffffffffffffffffffffffffffffffff871690633df0212490879060840161303f565b8760ff166003036131e6578615613179576040517f65b2489b00000000000000000000000000000000000000000000000000000000815260ff808616600483015284166024820152604481018390526064810182905273ffffffffffffffffffffffffffffffffffffffff8716906365b2489b90879060840161303f565b6040517f5b41b90800000000000000000000000000000000000000000000000000000000815260ff808616600483015284166024820152604481018390526064810182905273ffffffffffffffffffffffffffffffffffffffff871690635b41b90890879060840161303f565b6040517ff1c43ede00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050565b5f6106d78373ffffffffffffffffffffffffffffffffffffffff8416613314565b606061325184845f85613360565b949350505050565b5f805f8473ffffffffffffffffffffffffffffffffffffffff168460405161328191906139ff565b5f604051808303815f865af19150503d805f81146132ba576040519150601f19603f3d011682016040523d82523d5f602084013e6132bf565b606091505b50915091508180156132e95750805115806132e95750808060200190518101906132e991906139be565b801561330b575073ffffffffffffffffffffffffffffffffffffffff85163b15155b95945050505050565b5f81815260018301602052604081205461335957508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556106ab565b505f6106ab565b6060824710156133f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161071f565b5f808673ffffffffffffffffffffffffffffffffffffffff16858760405161341a91906139ff565b5f6040518083038185875af1925050503d805f8114613454576040519150601f19603f3d011682016040523d82523d5f602084013e613459565b606091505b509150915061346a87838387613475565b979650505050505050565b6060831561350a5782515f036135035773ffffffffffffffffffffffffffffffffffffffff85163b613503576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161071f565b5081613251565b613251838381511561351f5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071f9190613a1a565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051610140810167ffffffffffffffff811182821017156135a4576135a4613553565b60405290565b803573ffffffffffffffffffffffffffffffffffffffff811681146135cd575f80fd5b919050565b803561ffff811681146135cd575f80fd5b803565ffffffffffff811681146135cd575f80fd5b5f82601f830112613607575f80fd5b813567ffffffffffffffff8082111561362257613622613553565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561366857613668613553565b81604052838152866020858801011115613680575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f602082840312156136af575f80fd5b813567ffffffffffffffff808211156136c6575f80fd5b9083019061014082860312156136da575f80fd5b6136e2613580565b6136eb836135aa565b81526136f9602084016135d2565b602082015261370a604084016135d2565b604082015261371b606084016135aa565b606082015261372c608084016135aa565b608082015261373d60a084016135aa565b60a082015260c083013560c082015260e083013560e08201526101006137648185016135e3565b90820152610120838101358381111561377b575f80fd5b613787888287016135f8565b918301919091525095945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036137f5576137f5613798565b5060010190565b61ffff82811682821603908082111561291f5761291f613798565b80820281158282048414176106ab576106ab613798565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f8261388e577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b80516dffffffffffffffffffffffffffff811681146135cd575f80fd5b5f805f606084860312156138c2575f80fd5b6138cb84613893565b92506138d960208501613893565b9150604084015163ffffffff811681146138f1575f80fd5b809150509250925092565b5f6020828403121561390c575f80fd5b5051919050565b808201808211156106ab576106ab613798565b818103818111156106ab576106ab613798565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f8060408385031215613977575f80fd5b505080516020909101519092909150565b5f7f800000000000000000000000000000000000000000000000000000000000000082036139b8576139b8613798565b505f0390565b5f602082840312156139ce575f80fd5b815180151581146106d7575f80fd5b5f5b838110156139f75781810151838201526020016139df565b50505f910152565b5f8251613a108184602087016139dd565b9190910192915050565b602081525f8251806020840152613a388160408501602087016139dd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220b26ee2a5834b5f17900f49b4bca63a1e86ee414c2e843498f92ab32d93bd084c64736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FeeTooHigh(uint16)": [
        {
          "notice": "The swap fee is over the maximum allowed"
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}