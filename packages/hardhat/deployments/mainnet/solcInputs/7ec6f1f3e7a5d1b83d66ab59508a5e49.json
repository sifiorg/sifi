{
  "language": "Solidity",
  "sources": {
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n"
    },
    "contracts/init/InitUniV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {IWETH} from '@uniswap/v2-periphery/contracts/interfaces/IWETH.sol';\nimport {IUniswapV2Router02} from '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\nimport {LibDiamond} from '../libraries/LibDiamond.sol';\nimport {LibUniV2Router} from '../libraries/LibUniV2Router.sol';\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\n\ncontract InitUniV2Router {\n  function init(address uniswapV2Router02, address uniswapV2Factory, address permit2) public {\n    LibUniV2Router.DiamondStorage storage s = LibUniV2Router.diamondStorage();\n\n    if (!s.isInitialized) {\n      s.isInitialized = true;\n      s.uniswapV2router02 = IUniswapV2Router02(uniswapV2Router02);\n      s.weth = IWETH(s.uniswapV2router02.WETH());\n    }\n\n    s.uniswapV2Factory = uniswapV2Factory;\n    s.permit2 = IPermit2(permit2);\n  }\n}\n"
    },
    "contracts/interfaces/external/IAllowanceTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {IEIP712} from './IEIP712.sol';\n\n/// @title AllowanceTransfer\n/// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\n/// @dev Requires user's token approval on the Permit2 contract\ninterface IAllowanceTransfer is IEIP712 {\n  /// @notice Thrown when an allowance on a token has expired.\n  /// @param deadline The timestamp at which the allowed amount is no longer valid\n  error AllowanceExpired(uint256 deadline);\n\n  /// @notice Thrown when an allowance on a token has been depleted.\n  /// @param amount The maximum amount allowed\n  error InsufficientAllowance(uint256 amount);\n\n  /// @notice Thrown when too many nonces are invalidated.\n  error ExcessiveInvalidation();\n\n  /// @notice Emits an event when the owner successfully invalidates an ordered nonce.\n  event NonceInvalidation(\n    address indexed owner,\n    address indexed token,\n    address indexed spender,\n    uint48 newNonce,\n    uint48 oldNonce\n  );\n\n  /// @notice Emits an event when the owner successfully sets permissions on a token for the spender.\n  event Approval(\n    address indexed owner,\n    address indexed token,\n    address indexed spender,\n    uint160 amount,\n    uint48 expiration\n  );\n\n  /// @notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\n  event Permit(\n    address indexed owner,\n    address indexed token,\n    address indexed spender,\n    uint160 amount,\n    uint48 expiration,\n    uint48 nonce\n  );\n\n  /// @notice Emits an event when the owner sets the allowance back to 0 with the lockdown function.\n  event Lockdown(address indexed owner, address token, address spender);\n\n  /// @notice The permit data for a token\n  struct PermitDetails {\n    // ERC20 token address\n    address token;\n    // the maximum amount allowed to spend\n    uint160 amount;\n    // timestamp at which a spender's token allowances become invalid\n    uint48 expiration;\n    // an incrementing value indexed per owner,token,and spender for each signature\n    uint48 nonce;\n  }\n\n  /// @notice The permit message signed for a single token allownce\n  struct PermitSingle {\n    // the permit data for a single token alownce\n    PermitDetails details;\n    // address permissioned on the allowed tokens\n    address spender;\n    // deadline on the permit signature\n    uint256 sigDeadline;\n  }\n\n  /// @notice The permit message signed for multiple token allowances\n  struct PermitBatch {\n    // the permit data for multiple token allowances\n    PermitDetails[] details;\n    // address permissioned on the allowed tokens\n    address spender;\n    // deadline on the permit signature\n    uint256 sigDeadline;\n  }\n\n  /// @notice The saved permissions\n  /// @dev This info is saved per owner, per token, per spender and all signed over in the permit message\n  /// @dev Setting amount to type(uint160).max sets an unlimited approval\n  struct PackedAllowance {\n    // amount allowed\n    uint160 amount;\n    // permission expiry\n    uint48 expiration;\n    // an incrementing value indexed per owner,token,and spender for each signature\n    uint48 nonce;\n  }\n\n  /// @notice A token spender pair.\n  struct TokenSpenderPair {\n    // the token the spender is approved\n    address token;\n    // the spender address\n    address spender;\n  }\n\n  /// @notice Details for a token transfer.\n  struct AllowanceTransferDetails {\n    // the owner of the token\n    address from;\n    // the recipient of the token\n    address to;\n    // the amount of the token\n    uint160 amount;\n    // the token to be transferred\n    address token;\n  }\n\n  /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\n  /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\n  /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\n  function allowance(\n    address user,\n    address token,\n    address spender\n  ) external view returns (uint160 amount, uint48 expiration, uint48 nonce);\n\n  /// @notice Approves the spender to use up to amount of the specified token up until the expiration\n  /// @param token The token to approve\n  /// @param spender The spender address to approve\n  /// @param amount The approved amount of the token\n  /// @param expiration The timestamp at which the approval is no longer valid\n  /// @dev The packed allowance also holds a nonce, which will stay unchanged in approve\n  /// @dev Setting amount to type(uint160).max sets an unlimited approval\n  function approve(address token, address spender, uint160 amount, uint48 expiration) external;\n\n  /// @notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\n  /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\n  /// @param owner The owner of the tokens being approved\n  /// @param permitSingle Data signed over by the owner specifying the terms of approval\n  /// @param signature The owner's signature over the permit data\n  function permit(\n    address owner,\n    PermitSingle memory permitSingle,\n    bytes calldata signature\n  ) external;\n\n  /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\n  /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\n  /// @param owner The owner of the tokens being approved\n  /// @param permitBatch Data signed over by the owner specifying the terms of approval\n  /// @param signature The owner's signature over the permit data\n  function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\n\n  /// @notice Transfer approved tokens from one address to another\n  /// @param from The address to transfer from\n  /// @param to The address of the recipient\n  /// @param amount The amount of the token to transfer\n  /// @param token The token address to transfer\n  /// @dev Requires the from address to have approved at least the desired amount\n  /// of tokens to msg.sender.\n  function transferFrom(address from, address to, uint160 amount, address token) external;\n\n  /// @notice Transfer approved tokens in a batch\n  /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\n  /// @dev Requires the from addresses to have approved at least the desired amount\n  /// of tokens to msg.sender.\n  function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\n\n  /// @notice Enables performing a \"lockdown\" of the sender's Permit2 identity\n  /// by batch revoking approvals\n  /// @param approvals Array of approvals to revoke.\n  function lockdown(TokenSpenderPair[] calldata approvals) external;\n\n  /// @notice Invalidate nonces for a given (token, spender) pair\n  /// @param token The token to invalidate nonces for\n  /// @param spender The spender to invalidate nonces for\n  /// @param newNonce The new nonce to set. Invalidates all nonces less than it.\n  /// @dev Can't invalidate more than 2**16 nonces per transaction.\n  function invalidateNonces(address token, address spender, uint48 newNonce) external;\n}\n"
    },
    "contracts/interfaces/external/IEIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IEIP712 {\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/external/IPermit2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ISignatureTransfer} from './ISignatureTransfer.sol';\nimport {IAllowanceTransfer} from './IAllowanceTransfer.sol';\n\n/// @notice Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\n/// @dev Users must approve Permit2 before calling any of the transfer functions.\ninterface IPermit2 is ISignatureTransfer, IAllowanceTransfer {\n  // IPermit2 unifies the two interfaces so users have maximal flexibility with their approval.\n}\n"
    },
    "contracts/interfaces/external/ISignatureTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {IEIP712} from './IEIP712.sol';\n\n/// @title SignatureTransfer\n/// @notice Handles ERC20 token transfers through signature based actions\n/// @dev Requires user's token approval on the Permit2 contract\ninterface ISignatureTransfer is IEIP712 {\n  /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\n  /// @param maxAmount The maximum amount a spender can request to transfer\n  error InvalidAmount(uint256 maxAmount);\n\n  /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\n  /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\n  error LengthMismatch();\n\n  /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\n  event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\n\n  /// @notice The token and amount details for a transfer signed in the permit transfer signature\n  struct TokenPermissions {\n    // ERC20 token address\n    address token;\n    // the maximum amount that can be spent\n    uint256 amount;\n  }\n\n  /// @notice The signed permit message for a single token transfer\n  struct PermitTransferFrom {\n    TokenPermissions permitted;\n    // a unique value for every token owner's signature to prevent signature replays\n    uint256 nonce;\n    // deadline on the permit signature\n    uint256 deadline;\n  }\n\n  /// @notice Specifies the recipient address and amount for batched transfers.\n  /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount.\n  struct SignatureTransferDetails {\n    // recipient address\n    address to;\n    // spender requested amount\n    uint256 requestedAmount;\n  }\n\n  /// @notice Used to reconstruct the signed permit message for multiple token transfers\n  /// @dev Do not need to pass in spender address as it is required that it is msg.sender\n  /// @dev Note that a user still signs over a spender address\n  struct PermitBatchTransferFrom {\n    // the tokens and corresponding amounts permitted for a transfer\n    TokenPermissions[] permitted;\n    // a unique value for every token owner's signature to prevent signature replays\n    uint256 nonce;\n    // deadline on the permit signature\n    uint256 deadline;\n  }\n\n  /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\n  /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\n  /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\n  /// @dev It returns a uint256 bitmap\n  /// @dev The index, or wordPosition is capped at type(uint248).max\n  function nonceBitmap(address, uint256) external view returns (uint256);\n\n  /// @notice Transfers a token using a signed permit message\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount\n  /// @param permit The permit data signed over by the owner\n  /// @param owner The owner of the tokens to transfer\n  /// @param transferDetails The spender's requested transfer details for the permitted token\n  /// @param signature The signature to verify\n  function permitTransferFrom(\n    PermitTransferFrom memory permit,\n    SignatureTransferDetails calldata transferDetails,\n    address owner,\n    bytes calldata signature\n  ) external;\n\n  /// @notice Transfers a token using a signed permit message\n  /// @notice Includes extra data provided by the caller to verify signature over\n  /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount\n  /// @param permit The permit data signed over by the owner\n  /// @param owner The owner of the tokens to transfer\n  /// @param transferDetails The spender's requested transfer details for the permitted token\n  /// @param witness Extra data to include when checking the user signature\n  /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\n  /// @param signature The signature to verify\n  function permitWitnessTransferFrom(\n    PermitTransferFrom memory permit,\n    SignatureTransferDetails calldata transferDetails,\n    address owner,\n    bytes32 witness,\n    string calldata witnessTypeString,\n    bytes calldata signature\n  ) external;\n\n  /// @notice Transfers multiple tokens using a signed permit message\n  /// @param permit The permit data signed over by the owner\n  /// @param owner The owner of the tokens to transfer\n  /// @param transferDetails Specifies the recipient and requested amount for the token transfer\n  /// @param signature The signature to verify\n  function permitTransferFrom(\n    PermitBatchTransferFrom memory permit,\n    SignatureTransferDetails[] calldata transferDetails,\n    address owner,\n    bytes calldata signature\n  ) external;\n\n  /// @notice Transfers multiple tokens using a signed permit message\n  /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\n  /// @notice Includes extra data provided by the caller to verify signature over\n  /// @param permit The permit data signed over by the owner\n  /// @param owner The owner of the tokens to transfer\n  /// @param transferDetails Specifies the recipient and requested amount for the token transfer\n  /// @param witness Extra data to include when checking the user signature\n  /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\n  /// @param signature The signature to verify\n  function permitWitnessTransferFrom(\n    PermitBatchTransferFrom memory permit,\n    SignatureTransferDetails[] calldata transferDetails,\n    address owner,\n    bytes32 witness,\n    string calldata witnessTypeString,\n    bytes calldata signature\n  ) external;\n\n  /// @notice Invalidates the bits specified in mask for the bitmap at the word position\n  /// @dev The wordPos is maxed at type(uint248).max\n  /// @param wordPos A number to index the nonceBitmap at\n  /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\n  function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\n}\n"
    },
    "contracts/interfaces/external/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n  function getReserves()\n    external\n    view\n    returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n}\n"
    },
    "contracts/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n  enum FacetCutAction {\n    Add,\n    Replace,\n    Remove\n  }\n  // Add=0, Replace=1, Remove=2\n\n  struct FacetCut {\n    address facetAddress;\n    FacetCutAction action;\n    bytes4[] functionSelectors;\n  }\n\n  /// @notice Add/replace/remove any number of functions and optionally execute\n  ///         a function with delegatecall\n  /// @param _diamondCut Contains the facet addresses and function selectors\n  /// @param _init The address of the contract or facet to execute _calldata\n  /// @param _calldata A function call, including function selector and arguments\n  ///                  _calldata is executed with delegatecall on _init\n  function diamondCut(\n    FacetCut[] calldata _diamondCut,\n    address _init,\n    bytes calldata _calldata\n  ) external;\n\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "contracts/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport {IDiamondCut} from '../interfaces/IDiamondCut.sol';\n\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\n// The loupe functions are required by the EIP2535 Diamonds standard\n\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\n\nlibrary LibDiamond {\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256('diamond.standard.diamond.storage');\n\n  struct FacetAddressAndPosition {\n    address facetAddress;\n    uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n  }\n\n  struct FacetFunctionSelectors {\n    bytes4[] functionSelectors;\n    uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n  }\n\n  struct DiamondStorage {\n    // maps function selector to the facet address and\n    // the position of the selector in the facetFunctionSelectors.selectors array\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n    // maps facet addresses to function selectors\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n    // facet addresses\n    address[] facetAddresses;\n    address contractOwner;\n  }\n\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n    bytes32 position = DIAMOND_STORAGE_POSITION;\n    assembly {\n      ds.slot := position\n    }\n  }\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  function setContractOwner(address _newOwner) internal {\n    DiamondStorage storage ds = diamondStorage();\n    address previousOwner = ds.contractOwner;\n    ds.contractOwner = _newOwner;\n    emit OwnershipTransferred(previousOwner, _newOwner);\n  }\n\n  function contractOwner() internal view returns (address contractOwner_) {\n    contractOwner_ = diamondStorage().contractOwner;\n  }\n\n  function enforceIsContractOwner() internal view {\n    require(msg.sender == diamondStorage().contractOwner, 'LibDiamond: Must be contract owner');\n  }\n\n  event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n  // Internal function version of diamondCut\n  function diamondCut(\n    IDiamondCut.FacetCut[] memory _diamondCut,\n    address _init,\n    bytes memory _calldata\n  ) internal {\n    for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n      IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n      if (action == IDiamondCut.FacetCutAction.Add) {\n        addFunctions(\n          _diamondCut[facetIndex].facetAddress,\n          _diamondCut[facetIndex].functionSelectors\n        );\n      } else if (action == IDiamondCut.FacetCutAction.Replace) {\n        replaceFunctions(\n          _diamondCut[facetIndex].facetAddress,\n          _diamondCut[facetIndex].functionSelectors\n        );\n      } else if (action == IDiamondCut.FacetCutAction.Remove) {\n        removeFunctions(\n          _diamondCut[facetIndex].facetAddress,\n          _diamondCut[facetIndex].functionSelectors\n        );\n      } else {\n        revert('LibDiamondCut: Incorrect FacetCutAction');\n      }\n    }\n    emit DiamondCut(_diamondCut, _init, _calldata);\n    initializeDiamondCut(_init, _calldata);\n  }\n\n  function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n    require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\n    DiamondStorage storage ds = diamondStorage();\n    require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n    uint96 selectorPosition = uint96(\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\n    );\n    // add new facet address if it does not exist\n    if (selectorPosition == 0) {\n      addFacet(ds, _facetAddress);\n    }\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n      bytes4 selector = _functionSelectors[selectorIndex];\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n      require(\n        oldFacetAddress == address(0),\n        \"LibDiamondCut: Can't add function that already exists\"\n      );\n      addFunction(ds, selector, selectorPosition, _facetAddress);\n      selectorPosition++;\n    }\n  }\n\n  function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n    require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\n    DiamondStorage storage ds = diamondStorage();\n    require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n    uint96 selectorPosition = uint96(\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\n    );\n    // add new facet address if it does not exist\n    if (selectorPosition == 0) {\n      addFacet(ds, _facetAddress);\n    }\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n      bytes4 selector = _functionSelectors[selectorIndex];\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n      require(\n        oldFacetAddress != _facetAddress,\n        \"LibDiamondCut: Can't replace function with same function\"\n      );\n      removeFunction(ds, oldFacetAddress, selector);\n      addFunction(ds, selector, selectorPosition, _facetAddress);\n      selectorPosition++;\n    }\n  }\n\n  function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n    require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\n    DiamondStorage storage ds = diamondStorage();\n    // if function does not exist then do nothing and return\n    require(_facetAddress == address(0), 'LibDiamondCut: Remove facet address must be address(0)');\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n      bytes4 selector = _functionSelectors[selectorIndex];\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n      removeFunction(ds, oldFacetAddress, selector);\n    }\n  }\n\n  function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n    enforceHasContractCode(_facetAddress, 'LibDiamondCut: New facet has no code');\n    ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n    ds.facetAddresses.push(_facetAddress);\n  }\n\n  function addFunction(\n    DiamondStorage storage ds,\n    bytes4 _selector,\n    uint96 _selectorPosition,\n    address _facetAddress\n  ) internal {\n    ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n    ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n  }\n\n  function removeFunction(\n    DiamondStorage storage ds,\n    address _facetAddress,\n    bytes4 _selector\n  ) internal {\n    require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n    // an immutable function is a function defined directly in a diamond\n    require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n    // replace selector with last selector, then delete last selector\n    uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n    uint256 lastSelectorPosition = ds\n      .facetFunctionSelectors[_facetAddress]\n      .functionSelectors\n      .length - 1;\n    // if not the same then replace _selector with lastSelector\n    if (selectorPosition != lastSelectorPosition) {\n      bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[\n        lastSelectorPosition\n      ];\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n      ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(\n        selectorPosition\n      );\n    }\n    // delete the last selector\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n    delete ds.selectorToFacetAndPosition[_selector];\n\n    // if no more selectors for facet address then delete the facet address\n    if (lastSelectorPosition == 0) {\n      // replace facet address with last facet address and delete last facet address\n      uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n      uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n      if (facetAddressPosition != lastFacetAddressPosition) {\n        address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n        ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n        ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n      }\n      ds.facetAddresses.pop();\n      delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n    }\n  }\n\n  function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n    if (_init == address(0)) {\n      return;\n    }\n    enforceHasContractCode(_init, 'LibDiamondCut: _init address has no code');\n    (bool success, bytes memory error) = _init.delegatecall(_calldata);\n    if (!success) {\n      if (error.length > 0) {\n        // bubble up error\n        /// @solidity memory-safe-assembly\n        assembly {\n          let returndata_size := mload(error)\n          revert(add(32, error), returndata_size)\n        }\n      } else {\n        revert InitializationFunctionReverted(_init, _calldata);\n      }\n    }\n  }\n\n  function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n    uint256 contractSize;\n    assembly {\n      contractSize := extcodesize(_contract)\n    }\n    require(contractSize > 0, _errorMessage);\n  }\n}\n"
    },
    "contracts/libraries/LibUniV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {IUniswapV2Pair} from 'contracts/interfaces/external/IUniswapV2Pair.sol';\nimport {IUniswapV2Router02} from '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\nimport {IWETH} from '@uniswap/v2-periphery/contracts/interfaces/IWETH.sol';\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\n\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\n\nlibrary LibUniV2Router {\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256('diamond.storage.LibUniV2Router');\n\n  struct DiamondStorage {\n    bool isInitialized;\n    IWETH weth;\n    IUniswapV2Router02 uniswapV2router02;\n    address uniswapV2Factory;\n    IPermit2 permit2;\n  }\n\n  function diamondStorage() internal pure returns (DiamondStorage storage s) {\n    bytes32 position = DIAMOND_STORAGE_POSITION;\n\n    assembly {\n      s.slot := position\n    }\n  }\n\n  // calculates the CREATE2 address for a pair without making any external calls\n  // NOTE: Modified to work with newer Solidity\n  function pairFor(\n    address factory,\n    address tokenA,\n    address tokenB\n  ) internal pure returns (address pair) {\n    if (tokenA > tokenB) {\n      (tokenA, tokenB) = (tokenB, tokenA);\n    }\n\n    pair = address(\n      uint160(\n        uint256(\n          keccak256(\n            abi.encodePacked(\n              hex'ff',\n              factory,\n              keccak256(abi.encodePacked(tokenA, tokenB)),\n              hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            )\n          )\n        )\n      )\n    );\n  }\n\n  function getPairsAndAmountsFromPath(\n    address factory,\n    uint256 amountIn,\n    address[] memory path\n  ) internal view returns (address[] memory pairs, uint256[] memory amounts) {\n    uint256 pathLengthMinusOne = path.length - 1;\n\n    pairs = new address[](pathLengthMinusOne);\n    amounts = new uint256[](path.length);\n    amounts[0] = amountIn;\n\n    for (uint256 index; index < pathLengthMinusOne; ) {\n      address token0 = path[index];\n      address token1 = path[index + 1];\n\n      pairs[index] = pairFor(factory, token0, token1);\n\n      (uint256 reserveIn, uint256 reserveOut, ) = IUniswapV2Pair(pairFor(factory, token0, token1))\n        .getReserves();\n\n      if (token0 > token1) {\n        (reserveIn, reserveOut) = (reserveOut, reserveIn);\n      }\n\n      unchecked {\n        amountIn = ((amountIn * 997) * reserveOut) / ((reserveIn * 1000) + (amountIn * 997));\n      }\n\n      // Recycling `amountIn`\n      amounts[index + 1] = amountIn;\n\n      unchecked {\n        index++;\n      }\n    }\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "remappings": [
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "solidity-stringutils/=lib/solidity-stringutils/src/",
      "@openzeppelin/=@openzeppelin/",
      "@uniswap/=@uniswap/",
      "hardhat-deploy/=hardhat-deploy/",
      "hardhat/=hardhat/"
    ]
  }
}