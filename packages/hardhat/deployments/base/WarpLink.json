{
  "address": "0x195c3182320D98bA0F8443220FEB771a69438251",
  "abi": [
    {
      "inputs": [],
      "name": "CallbackAlreadyActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallbackAlreadyActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallbackStillActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallbackStillActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeadlineExpired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxFeeBps",
          "type": "uint256"
        }
      ],
      "name": "FeeTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxFeeBps",
          "type": "uint256"
        }
      ],
      "name": "FeeTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IllegalJumpInSplit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentPartPayerOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentPartTokenOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAmountRemaining",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientEthValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientOutputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientTokensDelivered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSgReceiveSrcAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSgReceiverSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JumpMustBeLastCommand",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeTokenNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughParts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedPayerForWrap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedTokenForUnwrap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedTokenForWrap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedTokenOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnhandledCommand",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnhandledPoolKind",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnhandledPoolKind",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partnerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "Fee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Warp",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "sgReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "partner",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "feeBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "slippageBps",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint48",
              "name": "deadline",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "commands",
              "type": "bytes"
            }
          ],
          "internalType": "struct IWarpLink.Params",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "warpLinkEngage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "partner",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "feeBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "slippageBps",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint48",
              "name": "deadline",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "commands",
              "type": "bytes"
            }
          ],
          "internalType": "struct IWarpLink.Params",
          "name": "params",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct PermitParams",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "warpLinkEngagePermit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x447af14ef02b7bd10b8e27cc2edbf5429b3814a20b3abc3eed749d4240f3d9eb",
  "receipt": {
    "to": null,
    "from": "0x67E21394bBC46c010D9B8DCf00172Ab7996964BE",
    "contractAddress": "0x195c3182320D98bA0F8443220FEB771a69438251",
    "transactionIndex": 2,
    "gasUsed": "5214007",
    "logsBloom": "0x
    "blockHash": "0x90a5b43b082b8fc534d70b57900c45f2c4bb072503dac4a7c2b1922ccdda4f01",
    "transactionHash": "0x447af14ef02b7bd10b8e27cc2edbf5429b3814a20b3abc3eed749d4240f3d9eb",
    "logs": [],
    "blockNumber": 9294956,
    "cumulativeGasUsed": "5336962",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "27cf7d06461a217daad42aa810728fbe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CallbackAlreadyActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallbackAlreadyActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallbackStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallbackStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFeeBps\",\"type\":\"uint256\"}],\"name\":\"FeeTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFeeBps\",\"type\":\"uint256\"}],\"name\":\"FeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalJumpInSplit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPartPayerOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPartTokenOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmountRemaining\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientEthValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientTokensDelivered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSgReceiveSrcAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSgReceiverSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JumpMustBeLastCommand\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTokenNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughParts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedPayerForWrap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedTokenForUnwrap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedTokenForWrap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedTokenOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnhandledCommand\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnhandledPoolKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnhandledPoolKind\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Warp\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"slippageBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"commands\",\"type\":\"bytes\"}],\"internalType\":\"struct IWarpLink.Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"warpLinkEngage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"slippageBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"commands\",\"type\":\"bytes\"}],\"internalType\":\"struct IWarpLink.Params\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PermitParams\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"warpLinkEngagePermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"FeeTooHigh(uint256)\":[{\"notice\":\"The swap fee is over the maximum allowed\"},{\"notice\":\"The swap fee is over the maximum allowed\"}]},\"kind\":\"user\",\"methods\":{\"sgReceive(uint16,bytes,uint256,address,uint256,bytes)\":{\"notice\":\"Cross-chain callback from Stargate The tokens have already been received by this contract, `t.payer` is set to this contract before `sgReceive` is called by the router. The `_nonce` field is not checked since it's assumed that LayerZero will not deliver the same message more than once. The Stargate composer is trusted, meaning `_token` and `amountLD` is not verified. Should the Stargate composer be compromised, an attacker can drain this contract. If the payload can not be decoded, tokens are left in this contract. If execution runs out of gas, tokens are left in this contract. If an error occurs during engage, such as insufficient output amount, tokens are refunded to the recipient. See https://stargateprotocol.gitbook.io/stargate/interfaces/evm-solidity-interfaces/istargatereceiver.sol\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/WarpLink.sol\":\"WarpLink\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@openzeppelin/=@openzeppelin/\",\":@uniswap/=@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=hardhat-deploy/\",\":hardhat/=hardhat/\",\":solidity-stringutils/=lib/solidity-stringutils/src/\"]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0xfc10758fd8dba790c39468dccd358cb7cef06ae7c4781832cc7aa76f91f167e6\"},\"contracts/facets/WarpLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {LibWarp} from '../libraries/LibWarp.sol';\\nimport {LibStarVault} from '../libraries/LibStarVault.sol';\\nimport {Stream} from '../libraries/Stream.sol';\\nimport {LibUniV2Like} from '../libraries/LibUniV2Like.sol';\\nimport {IUniswapV2Pair} from '../interfaces/external/IUniswapV2Pair.sol';\\nimport {IWarpLink} from '../interfaces/IWarpLink.sol';\\nimport {LibUniV3Like} from '../libraries/LibUniV3Like.sol';\\nimport {IUniV3Callback} from '../interfaces/IUniV3Callback.sol';\\nimport {IUniswapV3Pool} from '../interfaces/external/IUniswapV3Pool.sol';\\nimport {LibCurve} from '../libraries/LibCurve.sol';\\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\\nimport {IAllowanceTransfer} from '../interfaces/external/IAllowanceTransfer.sol';\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\nimport {IStargateRouter} from '../interfaces/external/IStargateRouter.sol';\\nimport {IStargateReceiver} from '../interfaces/external/IStargateReceiver.sol';\\nimport {IStargateComposer} from '../interfaces/external/IStargateComposer.sol';\\nimport {IEnergyShield} from '../interfaces/IEnergyShield.sol';\\n\\nabstract contract WarpLinkCommandTypes {\\n  uint256 internal constant COMMAND_TYPE_WRAP = 1;\\n  uint256 internal constant COMMAND_TYPE_UNWRAP = 2;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT_SINGLE = 3;\\n  uint256 internal constant COMMAND_TYPE_SPLIT = 4;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT = 5;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT_SINGLE = 6;\\n  uint256 internal constant COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT = 7;\\n  uint256 internal constant COMMAND_TYPE_WARP_CURVE_EXACT_INPUT_SINGLE = 8;\\n  uint256 internal constant COMMAND_TYPE_JUMP_STARGATE = 9;\\n  uint256 internal constant COMMAND_TYPE_WARP_STATELESS_SINGLE = 10;\\n  uint256 internal constant COMMAND_TYPE_WARP_STATELESS_MULTI = 11;\\n}\\n\\ncontract WarpLink is IWarpLink, IStargateReceiver, WarpLinkCommandTypes {\\n  using SafeERC20 for IERC20;\\n  using Stream for uint256;\\n\\n  struct WarpUniV2LikeWarpSingleParams {\\n    address tokenOut;\\n    address pool;\\n    bool zeroForOne; // tokenIn < tokenOut\\n    uint16 poolFeeBps;\\n  }\\n\\n  struct WarpUniV2LikeExactInputParams {\\n    // NOTE: Excluding the first token\\n    address[] tokens;\\n    address[] pools;\\n    uint16[] poolFeesBps;\\n  }\\n\\n  struct WarpUniV3LikeExactInputSingleParams {\\n    address tokenOut;\\n    address pool;\\n    bool zeroForOne; // tokenIn < tokenOut\\n    uint16 poolFeeBps;\\n  }\\n\\n  struct WarpCurveExactInputSingleParams {\\n    address tokenOut;\\n    address pool;\\n    uint8 tokenIndexIn;\\n    uint8 tokenIndexOut;\\n    uint8 kind;\\n    bool underlying;\\n  }\\n\\n  struct JumpStargateParams {\\n    uint16 dstChainId;\\n    uint256 srcPoolId;\\n    uint256 dstPoolId;\\n    uint256 dstGasForCall;\\n    bytes payload;\\n  }\\n\\n  struct WarpStatelessSingleParams {\\n    address tokenOut;\\n    address target;\\n    bytes data;\\n    bool push;\\n    bool delivers;\\n  }\\n\\n  struct WarpStatelessMultiParams {\\n    address tokenOut;\\n    address[] targets;\\n    bytes data;\\n    uint256[] offsets;\\n    /**\\n     * The current token amount will be written as uint256 to these offsets in the data.\\n     */\\n    uint256[] amountOffsets;\\n    bool push;\\n    bool delivers;\\n  }\\n\\n  struct TransientState {\\n    address paramPartner;\\n    uint16 paramFeeBps;\\n    address paramRecipient;\\n    address paramTokenIn;\\n    uint256 paramAmountIn;\\n    uint256 paramAmountOut;\\n    uint16 paramSlippageBps;\\n    uint48 paramDeadline;\\n    uint256 amount;\\n    address payer;\\n    address token;\\n    /**\\n     * Whether to use a permit transfer (0 or 1). Only applicable when `payer` is not `address(this)`\\n     */\\n    uint256 usePermit;\\n    /**\\n     * 0 or 1\\n     */\\n    uint256 jumped;\\n    /**\\n     * The amount of native value not spent. The native value starts off as\\n     * `msg.value - params.amount` and is decreased by spending money on jumps.\\n     *\\n     * Any leftover native value is returned to `msg.sender`\\n     */\\n    uint256 nativeValueRemaining;\\n  }\\n\\n  /**\\n   * Reverts with `InsufficientTokensDelivered` if less than `amount` tokens were delivered\\n   */\\n  function ensureDeliveredTokens(\\n    uint256 amount,\\n    uint256 balancePrev,\\n    uint256 balanceNext\\n  ) internal pure {\\n    unchecked {\\n      if (balanceNext < balancePrev || balanceNext < balancePrev + amount) {\\n        revert InsufficientTokensDelivered();\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Moves `t.amount` of `t.token` to `to` if `t.payer` is not this contract.\\n   * When `t.token` is the native token, no actions are taken.\\n   * `t.payer`  and `t.usePermit` are left unchanged.\\n   */\\n  function moveTokensTo(TransientState memory t, address to) internal {\\n    if (t.payer == address(this)) {\\n      if (t.token != address(0)) {\\n        IERC20(t.token).safeTransfer(to, t.amount);\\n      }\\n    } else {\\n      // Transfer tokens from the sender\\n      if (t.usePermit == 1) {\\n        // NOTE: `t.usePermit` is left as 1\\n        LibWarp.state().permit2.transferFrom(t.payer, to, uint160(t.amount), t.token);\\n      } else {\\n        IERC20(t.token).safeTransferFrom(t.payer, to, t.amount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Moves `t.amount` of `t.token` to this contract if `t.payer` is not this contract.\\n   * If `t.token` is the native token, no checks are made/actions taken.\\n   * `t.payer` is set to this contract.\\n   */\\n  function moveTokensToContract(TransientState memory t) internal {\\n    moveTokensTo(t, address(this));\\n\\n    // Update the payer to this contract\\n    t.payer = address(this);\\n  }\\n\\n  function processSplit(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    uint256 parts = stream.readUint8();\\n    uint256 amountRemaining = t.amount;\\n    uint256 amountOutSum;\\n\\n    if (parts < 2) {\\n      revert NotEnoughParts();\\n    }\\n\\n    // Store the token out for the previous part to ensure every part has the same output token\\n    address firstPartTokenOut;\\n    address firstPartPayerOut;\\n\\n    for (uint256 partIndex; partIndex < parts; ) {\\n      // TODO: Unchecked?\\n      // For the last part, use the remaining amount. Else read the % from the stream\\n      uint256 partAmount = partIndex < parts - 1\\n        ? (t.amount * stream.readUint16()) / 10_000\\n        : amountRemaining;\\n\\n      if (partAmount > amountRemaining) {\\n        revert InsufficientAmountRemaining();\\n      }\\n\\n      amountRemaining -= partAmount;\\n\\n      TransientState memory tPart;\\n\\n      tPart.amount = partAmount;\\n      tPart.payer = t.payer;\\n      tPart.token = t.token;\\n\\n      tPart = engageInternal(stream, tPart);\\n\\n      if (tPart.jumped == 1) {\\n        revert IllegalJumpInSplit();\\n      }\\n\\n      if (partIndex == 0) {\\n        firstPartPayerOut = tPart.payer;\\n        firstPartTokenOut = tPart.token;\\n      } else {\\n        if (tPart.token != firstPartTokenOut) {\\n          revert InconsistentPartTokenOut();\\n        }\\n\\n        if (tPart.payer != firstPartPayerOut) {\\n          revert InconsistentPartPayerOut();\\n        }\\n      }\\n\\n      // NOTE: Checked\\n      amountOutSum += tPart.amount;\\n\\n      unchecked {\\n        partIndex++;\\n      }\\n    }\\n\\n    t.payer = firstPartPayerOut;\\n    t.token = firstPartTokenOut;\\n    t.amount = amountOutSum;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Wrap ETH into WETH using the WETH contract\\n   *\\n   * The ETH must already be in this contract\\n   *\\n   * The next token will be WETH, with the amount and payer unchanged\\n   */\\n  function processWrap(TransientState memory t) internal returns (TransientState memory) {\\n    LibWarp.State storage s = LibWarp.state();\\n\\n    if (t.token != address(0)) {\\n      revert UnexpectedTokenForWrap();\\n    }\\n\\n    if (t.payer != address(this)) {\\n      // It's not possible to move a user's ETH\\n      revert UnexpectedPayerForWrap();\\n    }\\n\\n    t.token = address(s.weth);\\n\\n    s.weth.deposit{value: t.amount}();\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Unwrap WETH into ETH using the WETH contract\\n   *\\n   * The payer can be the sender or this contract. After this operation, the\\n   * token will be ETH (0) and the amount will be unchanged. The next payer\\n   * will be this contract.\\n   */\\n  function processUnwrap(TransientState memory t) internal returns (TransientState memory) {\\n    LibWarp.State storage s = LibWarp.state();\\n\\n    if (t.token != address(s.weth)) {\\n      revert UnexpectedTokenForUnwrap();\\n    }\\n\\n    moveTokensToContract(t);\\n\\n    s.weth.withdraw(t.amount);\\n\\n    t.token = address(0);\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Uniswap V2-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *   - tokenOut (address)\\n   *   - pool (address)\\n   *   - zeroForOne (0 or 1, uint8)\\n   *   - poolFeeBps (uint16)\\n   */\\n  function processWarpUniV2LikeExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    if (t.token == address(0)) {\\n      revert NativeTokenNotSupported();\\n    }\\n\\n    WarpUniV2LikeWarpSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n    params.zeroForOne = stream.readUint8() == 1;\\n    params.poolFeeBps = stream.readUint16();\\n\\n    if (t.payer == address(this)) {\\n      // Transfer tokens to the pool\\n      IERC20(t.token).safeTransfer(params.pool, t.amount);\\n    } else {\\n      // Transfer tokens from the sender to the pool\\n      if (t.usePermit == 1) {\\n        LibWarp.state().permit2.transferFrom(t.payer, params.pool, (uint160)(t.amount), t.token);\\n      } else {\\n        // NOTE: `t.usePermit` is left as 1\\n        IERC20(t.token).safeTransferFrom(t.payer, params.pool, t.amount);\\n      }\\n\\n      // Update the payer to this contract\\n      t.payer = address(this);\\n    }\\n\\n    (uint256 reserveIn, uint256 reserveOut, ) = IUniswapV2Pair(params.pool).getReserves();\\n\\n    if (!params.zeroForOne) {\\n      // Token in > token out\\n      (reserveIn, reserveOut) = (reserveOut, reserveIn);\\n    }\\n\\n    unchecked {\\n      // For 30 bps, multiply by 997\\n      uint256 feeFactor = 10_000 - params.poolFeeBps;\\n\\n      t.amount =\\n        ((t.amount * feeFactor) * reserveOut) /\\n        ((reserveIn * 10_000) + (t.amount * feeFactor));\\n    }\\n\\n    // NOTE: This check can be avoided if the factory is trusted\\n    uint256 balancePrev = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    IUniswapV2Pair(params.pool).swap(\\n      params.zeroForOne ? 0 : t.amount,\\n      params.zeroForOne ? t.amount : 0,\\n      address(this),\\n      ''\\n    );\\n\\n    ensureDeliveredTokens(t.amount, balancePrev, IERC20(params.tokenOut).balanceOf(address(this)));\\n\\n    t.token = params.tokenOut;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp multiple tokens in a series of Uniswap V2-like pools\\n   *\\n   * Since the pools are not trusted, the balance of `params.tokenOut` is checked\\n   * before the first swap and after the last swap to ensure the correct amount\\n   * was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the last swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - pool length (uint8)\\n   *  - tokens (address 0, address 1, address pool length - 1) excluding the first\\n   *  - pools (address 0, address 1, address pool length - 1)\\n   *  - pool fees (uint16 0, uint16 1, uint16 pool length - 1)\\n   */\\n  function processWarpUniV2LikeExactInput(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV2LikeExactInputParams memory params;\\n\\n    uint256 poolLength = stream.readUint8();\\n\\n    params.tokens = new address[](poolLength + 1);\\n\\n    // The params will contain all tokens including the first to remain compatible\\n    // with the LibUniV2Like library's getAmountsOut function\\n    params.tokens[0] = t.token;\\n\\n    for (uint256 index; index < poolLength; ) {\\n      params.tokens[index + 1] = stream.readAddress();\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    params.pools = stream.readAddresses(poolLength);\\n    params.poolFeesBps = stream.readUint16s(poolLength);\\n\\n    uint256 balancePrev = IERC20(params.tokens[poolLength]).balanceOf(address(this));\\n\\n    uint256[] memory amounts = LibUniV2Like.getAmountsOut(\\n      params.poolFeesBps,\\n      t.amount,\\n      params.tokens,\\n      params.pools\\n    );\\n\\n    if (t.payer == address(this)) {\\n      // Transfer tokens from this contract to the first pool\\n      IERC20(t.token).safeTransfer(params.pools[0], t.amount);\\n    } else {\\n      if (t.usePermit == 1) {\\n        // Transfer tokens from the sender to the first pool\\n        LibWarp.state().permit2.transferFrom(\\n          t.payer,\\n          params.pools[0],\\n          (uint160)(t.amount),\\n          t.token\\n        );\\n      } else {\\n        // NOTE: `t.usePermit` is left as 1\\n        IERC20(t.token).safeTransferFrom(t.payer, params.pools[0], t.amount);\\n      }\\n\\n      // Update the payer to this contract\\n      t.payer = address(this);\\n    }\\n\\n    // Same as UniV2Like\\n    for (uint index; index < poolLength; ) {\\n      uint256 indexPlusOne = index + 1;\\n      bool zeroForOne = params.tokens[index] < params.tokens[indexPlusOne] ? true : false;\\n      address to = index < params.tokens.length - 2 ? params.pools[indexPlusOne] : address(this);\\n\\n      IUniswapV2Pair(params.pools[index]).swap(\\n        zeroForOne ? 0 : amounts[indexPlusOne],\\n        zeroForOne ? amounts[indexPlusOne] : 0,\\n        to,\\n        ''\\n      );\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    t.amount = amounts[amounts.length - 1];\\n\\n    ensureDeliveredTokens(\\n      t.amount,\\n      balancePrev,\\n      IERC20(params.tokens[poolLength]).balanceOf(address(this))\\n    );\\n\\n    t.token = params.tokens[poolLength];\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Uniswap V3-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - tokenOut (address)\\n   *  - pool (address)\\n   */\\n  function processWarpUniV3LikeExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV3LikeExactInputSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n\\n    if (t.token == address(0)) {\\n      revert NativeTokenNotSupported();\\n    }\\n\\n    // NOTE: The pool is untrusted\\n    uint256 balancePrev = IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    bool zeroForOne = t.token < params.tokenOut;\\n\\n    LibUniV3Like.beforeCallback(\\n      LibUniV3Like.CallbackState({\\n        payer: t.payer,\\n        token: t.token,\\n        amount: t.amount,\\n        usePermit: t.usePermit\\n      })\\n    );\\n\\n    if (zeroForOne) {\\n      (, int256 amountOutSigned) = IUniswapV3Pool(params.pool).swap(\\n        address(this),\\n        zeroForOne,\\n        int256(t.amount),\\n        LibUniV3Like.MIN_SQRT_RATIO,\\n        ''\\n      );\\n\\n      t.amount = uint256(-amountOutSigned);\\n    } else {\\n      (int256 amountOutSigned, ) = IUniswapV3Pool(params.pool).swap(\\n        address(this),\\n        zeroForOne,\\n        int256(t.amount),\\n        LibUniV3Like.MAX_SQRT_RATIO,\\n        ''\\n      );\\n\\n      t.amount = uint256(-amountOutSigned);\\n    }\\n\\n    LibUniV3Like.afterCallback();\\n\\n    ensureDeliveredTokens(t.amount, balancePrev, IERC20(params.tokenOut).balanceOf(address(this)));\\n\\n    t.token = params.tokenOut;\\n\\n    // TODO: Compare check-and-set vs set\\n    t.payer = address(this);\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp multiple tokens in a series of Uniswap V3-like pools\\n   *\\n   * Since the pools are not trusted, the balance of `params.tokenOut` is checked\\n   * before the first swap and after the last swap to ensure the correct amount\\n   * was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token must not be ETH (0).\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the last swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - pool length (uint8)\\n   *  - tokens (address 0, address 1, address pool length - 1) excluding the first\\n   *  - pools (address 0, address 1, address pool length - 1)\\n   */\\n  function processWarpUniV3LikeExactInput(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpUniV2LikeExactInputParams memory params;\\n\\n    uint256 poolLength = stream.readUint8();\\n\\n    // The first token is not included\\n    params.tokens = stream.readAddresses(poolLength);\\n    params.pools = stream.readAddresses(poolLength);\\n\\n    address lastToken = params.tokens[poolLength - 1];\\n\\n    uint256 balancePrev = IERC20(lastToken).balanceOf(address(this));\\n\\n    for (uint index; index < poolLength; ) {\\n      address tokenIn = index == 0 ? t.token : params.tokens[index - 1]; // TOOD: unchecked\\n      t.token = params.tokens[index];\\n      bool zeroForOne = tokenIn < t.token;\\n\\n      LibUniV3Like.beforeCallback(\\n        LibUniV3Like.CallbackState({\\n          payer: t.payer,\\n          token: tokenIn,\\n          amount: t.amount,\\n          usePermit: t.usePermit\\n        })\\n      );\\n\\n      if (index == 0) {\\n        // Update the payer to this contract\\n        // TODO: Compare check-and-set vs set\\n        t.payer = address(this);\\n      }\\n\\n      address pool = params.pools[index];\\n\\n      if (zeroForOne) {\\n        (, int256 amountOutSigned) = IUniswapV3Pool(pool).swap(\\n          address(this),\\n          zeroForOne,\\n          int256(t.amount),\\n          LibUniV3Like.MIN_SQRT_RATIO,\\n          ''\\n        );\\n\\n        t.amount = uint256(-amountOutSigned);\\n      } else {\\n        (int256 amountOutSigned, ) = IUniswapV3Pool(pool).swap(\\n          address(this),\\n          zeroForOne,\\n          int256(t.amount),\\n          LibUniV3Like.MAX_SQRT_RATIO,\\n          ''\\n        );\\n\\n        t.amount = uint256(-amountOutSigned);\\n      }\\n\\n      LibUniV3Like.afterCallback();\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n\\n    ensureDeliveredTokens(t.amount, balancePrev, IERC20(lastToken).balanceOf(address(this)));\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp a single token in a Curve-like pool\\n   *\\n   * Since the pool is not trusted, the amount out is checked before\\n   * and after the swap to ensure the correct amount was delivered.\\n   *\\n   * The payer can be the sender or this contract. The token may be ETH (0)\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - tokenOut (address)\\n   *  - pool (address)\\n   */\\n  function processWarpCurveExactInputSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpCurveExactInputSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.pool = stream.readAddress();\\n    params.tokenIndexIn = stream.readUint8();\\n    params.tokenIndexOut = stream.readUint8();\\n    params.kind = stream.readUint8();\\n    params.underlying = stream.readUint8() == 1;\\n\\n    // NOTE: The pool is untrusted\\n    bool isFromEth = t.token == address(0);\\n    bool isToEth = params.tokenOut == address(0);\\n\\n    moveTokensToContract(t);\\n\\n    uint256 balancePrev = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    if (!isFromEth) {\\n      // TODO: Is this necessary to support USDT?\\n      IERC20(t.token).forceApprove(params.pool, t.amount);\\n    }\\n\\n    LibCurve.exchange({\\n      kind: params.kind,\\n      underlying: params.underlying,\\n      pool: params.pool,\\n      eth: isFromEth ? t.amount : 0,\\n      useEth: isFromEth || isToEth,\\n      i: params.tokenIndexIn,\\n      j: params.tokenIndexOut,\\n      dx: t.amount,\\n      // NOTE: There is no need to set a min out since the balance will be verified\\n      min_dy: 0\\n    });\\n\\n    uint256 balanceNext = isToEth\\n      ? address(this).balance\\n      : IERC20(params.tokenOut).balanceOf(address(this));\\n\\n    t.token = params.tokenOut;\\n    t.amount = balanceNext - balancePrev;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Cross-chain callback from Stargate\\n   *\\n   * The tokens have already been received by this contract, `t.payer` is set to this contract\\n   * before `sgReceive` is called by the router.\\n   *\\n   * The `_nonce` field is not checked since it's assumed that LayerZero will not deliver the\\n   * same message more than once.\\n   *\\n   * The Stargate composer is trusted, meaning `_token` and `amountLD` is not verified. Should the\\n   * Stargate composer be compromised, an attacker can drain this contract.\\n   *\\n   * If the payload can not be decoded, tokens are left in this contract.\\n   * If execution runs out of gas, tokens are left in this contract.\\n   *\\n   * If an error occurs during engage, such as insufficient output amount, tokens are refunded\\n   * to the recipient.\\n   *\\n   * See https://stargateprotocol.gitbook.io/stargate/interfaces/evm-solidity-interfaces/istargatereceiver.sol\\n   */\\n  function sgReceive(\\n    uint16, // _srcChainId\\n    bytes memory _srcAddress,\\n    uint256, // _nonce\\n    address _token,\\n    uint256 amountLD,\\n    bytes memory payload\\n  ) external {\\n    if (msg.sender != address(LibWarp.state().stargateComposer)) {\\n      revert InvalidSgReceiverSender();\\n    }\\n\\n    // NOTE: Addresses cannot be decode from bytes using `abi.decode`\\n    // From https://ethereum.stackexchange.com/a/50528\\n    address srcAddress;\\n\\n    assembly {\\n      srcAddress := mload(add(_srcAddress, 20))\\n    }\\n\\n    if (srcAddress != address(this)) {\\n      // NOTE: This assumes that this contract is deployed at the same address on every chain\\n      revert InvalidSgReceiveSrcAddress();\\n    }\\n\\n    Params memory params = abi.decode(payload, (Params));\\n\\n    if (params.tokenIn == address(0)) {\\n      // Distinguish between receiving ETH and SGETH. Note that the `params.tokenIn` address is useless\\n      // otherwise because `_token` may be different on this chain\\n      _token = address(0);\\n    }\\n\\n    try\\n      IWarpLink(this).warpLinkEngage{value: _token == address(0) ? amountLD : 0}(\\n        Params({\\n          partner: params.partner,\\n          feeBps: params.feeBps,\\n          slippageBps: params.slippageBps,\\n          recipient: params.recipient,\\n          tokenIn: _token,\\n          tokenOut: params.tokenOut,\\n          amountIn: amountLD,\\n          amountOut: params.amountOut,\\n          deadline: params.deadline,\\n          commands: params.commands\\n        })\\n      )\\n    {} catch {\\n      // Refund tokens to the recipient\\n      if (_token == address(0)) {\\n        payable(params.recipient).transfer(amountLD);\\n      } else {\\n        IERC20(_token).safeTransfer(params.recipient, amountLD);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Jump to another chain using the Stargate bridge\\n   *\\n   * After this operation, the token will be unchanged and `t.amount` will\\n   * be how much was sent. `t.jumped` will be set to `1` to indicate\\n   * that no more commands should be run\\n   *\\n   * The user may construct a command where `srcPoolId` is not for `t.token`. This is harmless\\n   * because only `t.token` can be moved by Stargate.\\n   *\\n   * This command must not run inside of a split.\\n   *\\n   * If the jump is the final operation, meaning the tokens will be delivered to the recipient on\\n   * the other chain without further processing, the fee is charged and the `Warp` event is emitted\\n   * in this function.\\n   *\\n   * A bridge fee must be paid in the native token. This fee is determined with\\n   * `IStargateRouter.quoteLayerZeroFee`\\n   *\\n   * The value for `t.token` remains the same and is not chained.\\n   *\\n   * Params are read from the stream as:\\n   *   - dstChainId (uint16)\\n   *   - srcPoolId (uint8)\\n   *   - dstPoolId (uint8)\\n   *   - dstGasForCall (uint32)\\n   *   - tokenOut (address) when `dstGasForCall` > 0\\n   *   - amountOut (uint256) when `dstGasForCall` > 0\\n   *   - commands (uint256 length, ...bytes) when `dstGasForCall` > 0\\n   */\\n  function processJumpStargate(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    // TODO: Does this use the same gas than (a, b, c,) = (stream.read, ...)?\\n    JumpStargateParams memory params;\\n    params.dstChainId = stream.readUint16();\\n    params.srcPoolId = stream.readUint8();\\n    params.dstPoolId = stream.readUint8();\\n    params.dstGasForCall = stream.readUint32();\\n\\n    if (params.dstGasForCall > 0) {\\n      // NOTE: `amountIn` is left as zero\\n      Params memory destParams;\\n      destParams.partner = t.paramPartner;\\n      destParams.feeBps = t.paramFeeBps;\\n      destParams.slippageBps = t.paramSlippageBps;\\n      destParams.recipient = t.paramRecipient;\\n      // NOTE: Used to distinguish ETH vs SGETH. Tokens on the other chain do not not necessarily have\\n      // the same address as on this chain\\n      destParams.tokenIn = t.token;\\n      destParams.tokenOut = stream.readAddress();\\n      destParams.amountOut = stream.readUint256();\\n      destParams.deadline = t.paramDeadline;\\n      destParams.commands = stream.readBytes();\\n      params.payload = abi.encode(destParams);\\n    }\\n\\n    // Enforce minimum amount/max slippage\\n    if (t.amount < LibWarp.applySlippage(t.paramAmountOut, t.paramSlippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    if (t.token != t.paramTokenIn) {\\n      emit LibWarp.Warp(t.paramPartner, t.paramTokenIn, t.token, t.paramAmountIn, t.amount);\\n\\n      if (params.payload.length == 0) {\\n        // If the tokens are being delivered directly to the recipient without a second\\n        // WarpLink engage, the fee is charged on this chain\\n        // NOTE: It is not possible to know how many tokens were delivered. Therfore positive slippage\\n        // is never charged\\n        t.amount = LibStarVault.calculateAndRegisterFee(\\n          t.paramPartner,\\n          t.token,\\n          t.paramFeeBps,\\n          t.amount,\\n          t.amount\\n        );\\n      }\\n    }\\n\\n    IStargateComposer stargateComposer = LibWarp.state().stargateComposer;\\n\\n    moveTokensToContract(t);\\n\\n    if (t.token != address(0)) {\\n      // Allow Stargate to transfer the tokens. When there is a payload, the composer is used, else the router\\n      IERC20(t.token).forceApprove(\\n        params.payload.length == 0 ? stargateComposer.stargateRouter() : address(stargateComposer),\\n        t.amount\\n      );\\n    }\\n\\n    t.jumped = 1;\\n\\n    // Swap on the composer if there is a payload, else the router\\n    IStargateRouter(\\n      params.payload.length == 0 ? stargateComposer.stargateRouter() : address(stargateComposer)\\n    ).swap{\\n      value: t.token == address(0) ? t.amount + t.nativeValueRemaining : t.nativeValueRemaining\\n    }({\\n      _dstChainId: params.dstChainId,\\n      _srcPoolId: params.srcPoolId,\\n      _dstPoolId: params.dstPoolId,\\n      //  NOTE: There is no guarantee that `msg.sender` can handle receiving tokens/ETH\\n      // TODO: Use `msg.sender` if it's EOA, else use this contract\\n      _refundAddress: payable(address(this)),\\n      _amountLD: t.amount,\\n      // NOTE: This is imperfect because the user may already have eaten some slippage and may eat\\n      // more on the other chain. It also assumes the tokens are of nearly equal value\\n      _minAmountLD: LibWarp.applySlippage(t.amount, t.paramSlippageBps),\\n      _lzTxParams: IStargateRouter.lzTxObj({\\n        dstGasForCall: params.dstGasForCall,\\n        dstNativeAmount: 0,\\n        dstNativeAddr: ''\\n      }),\\n      // NOTE: This assumes the contract is deployed at the same address on every chain.\\n      // If this is not the case, a new param needs to be added with the next WarpLink address\\n      _to: abi.encodePacked(params.payload.length > 0 ? address(this) : t.paramRecipient),\\n      _payload: params.payload\\n    });\\n\\n    t.nativeValueRemaining = 0;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp using the Energy shield (single call)\\n   *\\n   * While the target call is not trusted, the Energy Shield is trusted to report\\n   * the correct output amount.\\n   *\\n   * The payer can be the sender or this contract. The token may be ETH (0)\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - tokenOut (address)\\n   *  - target (address)\\n   *  - data (bytes)\\n   *  - amountOffset (uint16), when > 0 the amount is written this many bytes into `data`\\n   *  - push (uint8, 0 or 1)\\n   *  - delivers (uint8, 0 or 1)\\n   */\\n  function processWarpStatelessSingle(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpStatelessSingleParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n    params.target = stream.readAddress();\\n\\n    bytes memory data = stream.readBytes();\\n\\n    uint256 amountOffset = stream.readUint16();\\n\\n    if (amountOffset > 0) {\\n      uint256 amount = t.amount;\\n\\n      // Write amount at the offset in data\\n      assembly {\\n        mstore(add(add(data, 32), amountOffset), amount)\\n      }\\n    }\\n\\n    params.data = data;\\n    params.push = stream.readUint8() == 1;\\n    params.delivers = stream.readUint8() == 1;\\n\\n    IEnergyShield energyShield = LibWarp.state().energyShield;\\n\\n    moveTokensTo(t, params.push ? params.target : address(energyShield));\\n\\n    // NOTE: The EnergyShield is trusted to report the correct output amount\\n    t.amount = LibWarp.state().energyShield.single{value: t.token == address(0) ? t.amount : 0}(\\n      IEnergyShield.SingleParams({\\n        tokenOut: params.tokenOut,\\n        target: params.target,\\n        data: params.data,\\n        delivers: params.delivers\\n      })\\n    );\\n\\n    t.token = params.tokenOut;\\n    t.payer = address(this);\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Warp using the Energy Shield (multi call)\\n   *\\n   * While the target call is not trusted, the Energy Shield is trusted to report\\n   * the correct output amount.\\n   *\\n   * The payer can be the sender or this contract. The token may be ETH (0)\\n   *\\n   * After this operation, the token will be `params.tokenOut` and the amount will\\n   * be the output of the swap. The next payer will be this contract.\\n   *\\n   * Params are read from the stream as:\\n   *  - tokenOut (address)\\n   *  - target count (uint8)\\n   *  - targets (target count of address)\\n   *  - data (bytes)\\n   *  - offsets (target count - 1 of uint16)\\n   *  - push (uint8, 0 or 1)\\n   *  - delivers (uint8, 0 or 1)\\n   */\\n  function processWarpStatelessMulti(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    WarpStatelessMultiParams memory params;\\n\\n    params.tokenOut = stream.readAddress();\\n\\n    uint256 targetCount = stream.readUint8();\\n    params.targets = new address[](targetCount);\\n\\n    unchecked {\\n      for (uint256 index; index < targetCount; index++) {\\n        params.targets[index] = stream.readAddress();\\n      }\\n    }\\n\\n    bytes memory data = stream.readBytes();\\n\\n    unchecked {\\n      params.offsets = new uint256[](targetCount - 1);\\n    }\\n\\n    unchecked {\\n      for (uint256 index = 0; index < targetCount - 1; index++) {\\n        params.offsets[index] = stream.readUint16();\\n      }\\n    }\\n\\n    uint256 amountOffsetsLength = stream.readUint8();\\n\\n    unchecked {\\n      for (uint256 index; index < amountOffsetsLength; index++) {\\n        uint256 amountOffset = stream.readUint16();\\n\\n        uint256 amount = t.amount;\\n\\n        // Write amount at the offset in data\\n        assembly {\\n          mstore(add(add(data, 32), amountOffset), amount)\\n        }\\n      }\\n    }\\n\\n    params.data = data;\\n    params.push = stream.readUint8() == 1;\\n    params.delivers = stream.readUint8() == 1;\\n\\n    IEnergyShield energyShield = LibWarp.state().energyShield;\\n\\n    moveTokensTo(t, params.push ? params.targets[0] : address(energyShield));\\n\\n    // NOTE: The EnergyShield is trusted to report the correct output amount\\n    t.amount = LibWarp.state().energyShield.multi{value: t.token == address(0) ? t.amount : 0}(\\n      IEnergyShield.MultiParams({\\n        tokenOut: params.tokenOut,\\n        targets: params.targets,\\n        data: params.data,\\n        offsets: params.offsets,\\n        delivers: params.delivers\\n      })\\n    );\\n\\n    t.token = params.tokenOut;\\n    t.payer = address(this);\\n\\n    return t;\\n  }\\n\\n  function engageInternal(\\n    uint256 stream,\\n    TransientState memory t\\n  ) internal returns (TransientState memory) {\\n    uint256 commandCount = stream.readUint8();\\n\\n    // TODO: End of stream check?\\n    for (uint256 commandIndex; commandIndex < commandCount; commandIndex++) {\\n      // TODO: Unchecked?\\n      uint256 commandType = stream.readUint8();\\n\\n      if (commandType == COMMAND_TYPE_WRAP) {\\n        t = processWrap(t);\\n      } else if (commandType == COMMAND_TYPE_UNWRAP) {\\n        t = processUnwrap(t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT_SINGLE) {\\n        t = processWarpUniV2LikeExactInputSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_SPLIT) {\\n        t = processSplit(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V2_LIKE_EXACT_INPUT) {\\n        t = processWarpUniV2LikeExactInput(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT_SINGLE) {\\n        t = processWarpUniV3LikeExactInputSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_UNI_V3_LIKE_EXACT_INPUT) {\\n        t = processWarpUniV3LikeExactInput(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_CURVE_EXACT_INPUT_SINGLE) {\\n        t = processWarpCurveExactInputSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_JUMP_STARGATE) {\\n        if (commandIndex != commandCount - 1) {\\n          revert JumpMustBeLastCommand();\\n        }\\n\\n        t = processJumpStargate(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_STATELESS_SINGLE) {\\n        t = processWarpStatelessSingle(stream, t);\\n      } else if (commandType == COMMAND_TYPE_WARP_STATELESS_MULTI) {\\n        t = processWarpStatelessMulti(stream, t);\\n      } else {\\n        revert UnhandledCommand();\\n      }\\n    }\\n\\n    return t;\\n  }\\n\\n  function createTransientStateFromParams(\\n    Params calldata params\\n  ) internal pure returns (TransientState memory) {\\n    TransientState memory t;\\n    t.paramPartner = params.partner;\\n    t.paramFeeBps = params.feeBps;\\n    t.paramSlippageBps = params.slippageBps;\\n    t.paramRecipient = params.recipient;\\n    t.paramTokenIn = params.tokenIn;\\n    t.paramAmountIn = params.amountIn;\\n    t.paramAmountOut = params.amountOut;\\n    t.paramSlippageBps = params.slippageBps;\\n    t.paramDeadline = params.deadline;\\n    t.amount = params.amountIn;\\n    t.token = params.tokenIn;\\n\\n    return t;\\n  }\\n\\n  /**\\n   * Shared logic for `warpLinkEngage` and `warpLinkEngagePermit` to be run once the `TransientState`\\n   * has been initialized.\\n   */\\n  function warpLinkEngageRoot(Params calldata params, TransientState memory t) internal {\\n    uint256 stream = Stream.createStream(params.commands);\\n\\n    t = engageInternal(stream, t);\\n\\n    uint256 amountOut = t.amount;\\n    address tokenOut = t.token;\\n\\n    if (tokenOut != params.tokenOut) {\\n      revert UnexpectedTokenOut();\\n    }\\n\\n    // Enforce minimum amount/max slippage\\n    if (amountOut == 0 || amountOut < LibWarp.applySlippage(params.amountOut, params.slippageBps)) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    if (t.jumped == 1) {\\n      // The coins have jumped away from this chain. Fees are colelcted before\\n      // the jump or on the other chain.\\n      //\\n      // `t.nativeValueRemaining` is not checked since it should be zero\\n      return;\\n    }\\n\\n    // Collect fees\\n    amountOut = LibStarVault.calculateAndRegisterFee(\\n      params.partner,\\n      params.tokenOut,\\n      params.feeBps,\\n      params.amountOut,\\n      amountOut\\n    );\\n\\n    if (amountOut == 0) {\\n      revert InsufficientOutputAmount();\\n    }\\n\\n    // Deliver tokens\\n    if (tokenOut == address(0)) {\\n      payable(params.recipient).transfer(amountOut);\\n    } else {\\n      IERC20(tokenOut).safeTransfer(params.recipient, amountOut);\\n    }\\n\\n    if (t.nativeValueRemaining > 0) {\\n      // TODO: Is this the correct recipient?\\n      payable(msg.sender).transfer(t.nativeValueRemaining);\\n    }\\n\\n    emit LibWarp.Warp(params.partner, params.tokenIn, params.tokenOut, params.amountIn, amountOut);\\n  }\\n\\n  function warpLinkEngage(Params calldata params) external payable {\\n    if (block.timestamp > params.deadline) {\\n      revert DeadlineExpired();\\n    }\\n\\n    TransientState memory t = createTransientStateFromParams(params);\\n\\n    if (params.tokenIn == address(0)) {\\n      if (msg.value < params.amountIn) {\\n        revert InsufficientEthValue();\\n      }\\n\\n      t.nativeValueRemaining = msg.value - params.amountIn;\\n\\n      // The ETH has already been moved to this contract\\n      t.payer = address(this);\\n    } else {\\n      // Tokens will initially moved from the sender\\n      t.payer = msg.sender;\\n\\n      t.nativeValueRemaining = msg.value;\\n    }\\n\\n    warpLinkEngageRoot(params, t);\\n  }\\n\\n  function warpLinkEngagePermit(\\n    Params calldata params,\\n    PermitParams calldata permit\\n  ) external payable {\\n    TransientState memory t = createTransientStateFromParams(params);\\n\\n    t.usePermit = 1;\\n\\n    // Tokens will initially moved from the sender\\n    t.payer = msg.sender;\\n\\n    t.nativeValueRemaining = msg.value;\\n\\n    // Permit tokens / set allowance\\n    LibWarp.state().permit2.permit(\\n      msg.sender,\\n      IAllowanceTransfer.PermitSingle({\\n        details: IAllowanceTransfer.PermitDetails({\\n          token: params.tokenIn,\\n          amount: (uint160)(params.amountIn),\\n          expiration: (uint48)(params.deadline),\\n          nonce: (uint48)(permit.nonce)\\n        }),\\n        spender: address(this),\\n        sigDeadline: (uint256)(params.deadline)\\n      }),\\n      permit.signature\\n    );\\n\\n    warpLinkEngageRoot(params, t);\\n  }\\n}\\n\",\"keccak256\":\"0x63e1d37cae527e22e79c3266054a14a76a028b4b48f1662de704c676f8f115c4\",\"license\":\"MIT\"},\"contracts/interfaces/IEnergyShield.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IEnergyShield {\\n  error CallFailed();\\n  error EthTransferFailed();\\n\\n  struct SingleParams {\\n    address tokenOut;\\n    address target;\\n    bytes data;\\n    /**\\n     *\\n     * When true, the target is expected to deliver the tokens directly to `msg.sender`\\n     * When false, the target is expected to deliver the tokens to the energy shield\\n     */\\n    bool delivers;\\n  }\\n\\n  struct MultiParams {\\n    address tokenOut;\\n    address[] targets;\\n    bytes data;\\n    /**\\n     * The offsets in data for each target excluding the first, which would be 0\\n     */\\n    uint256[] offsets;\\n    /**\\n     *\\n     * When true, the final target is expected to deliver the tokens directly to `msg.sender`\\n     * When false, the final target is expected to deliver the tokens to the energy shield\\n     */\\n    bool delivers;\\n  }\\n\\n  function single(SingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n  function multi(MultiParams calldata params) external payable returns (uint256 amountOut);\\n\\n  function drain(address token) external;\\n}\\n\",\"keccak256\":\"0xc75a67f8984f59cd5a4684293f88b7a2d3ec00a56294c468a9823b28ca520b8f\",\"license\":\"MIT\"},\"contracts/interfaces/ILibCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibCurve {\\n  error UnhandledPoolKind();\\n}\\n\",\"keccak256\":\"0xbc06582fb299db2a9174bcee01d6ff8ef611dfd92cbecc9b475f515acf3af45b\",\"license\":\"MIT\"},\"contracts/interfaces/ILibStarVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibStarVault {\\n  /**\\n   * The swap fee is over the maximum allowed\\n   */\\n  error FeeTooHigh(uint256 maxFeeBps);\\n\\n  event Fee(\\n    address indexed partner,\\n    address indexed token,\\n    uint256 partnerFee,\\n    uint256 protocolFee\\n  );\\n}\\n\",\"keccak256\":\"0xd19e560bc438be0ce218fa8f907038c5afca7b742d11af65e7892585227969e1\",\"license\":\"MIT\"},\"contracts/interfaces/ILibUniV3Like.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibUniV3Like {\\n  error CallbackAlreadyActive();\\n  error CallbackStillActive();\\n}\\n\",\"keccak256\":\"0x8f4ef11af715b9c39c44879ea04310cf0bc74e35cfa1b005fd17a3198880246a\",\"license\":\"MIT\"},\"contracts/interfaces/ILibWarp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ILibWarp {\\n  event Warp(\\n    address indexed partner,\\n    address indexed tokenIn,\\n    address indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n}\\n\",\"keccak256\":\"0x0ccca1960a2a145b0b26c8c0c5974a883f9a2f909556f5a539222e3cb59cfbaa\",\"license\":\"MIT\"},\"contracts/interfaces/IUniV3Callback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUniV3Callback {\\n  error CallbackInactive();\\n}\\n\",\"keccak256\":\"0x0a70c7deeb178bc6724fb3f2ff087eee95cb4e7779ed7bf8045a0dde1d2200dd\",\"license\":\"MIT\"},\"contracts/interfaces/IWarpLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {PermitParams} from '../libraries/PermitParams.sol';\\nimport {ILibCurve} from '../interfaces/ILibCurve.sol';\\nimport {ILibStarVault} from '../interfaces/ILibStarVault.sol';\\nimport {ILibUniV3Like} from '../interfaces/ILibUniV3Like.sol';\\nimport {ILibWarp} from '../interfaces/ILibWarp.sol';\\n\\ninterface IWarpLink is ILibCurve, ILibStarVault, ILibUniV3Like, ILibWarp {\\n  error UnhandledCommand();\\n  error InsufficientEthValue();\\n  error InsufficientOutputAmount();\\n  error InsufficientTokensDelivered();\\n  error UnexpectedTokenForWrap();\\n  error UnexpectedTokenForUnwrap();\\n  error UnexpectedTokenOut();\\n  error InsufficientAmountRemaining();\\n  error NotEnoughParts();\\n  error InconsistentPartTokenOut();\\n  error InconsistentPartPayerOut();\\n  error UnexpectedPayerForWrap();\\n  error NativeTokenNotSupported();\\n  error DeadlineExpired();\\n  error IllegalJumpInSplit();\\n  error JumpMustBeLastCommand();\\n  error InvalidSgReceiverSender();\\n  error InvalidSgReceiveSrcAddress();\\n\\n  struct Params {\\n    address partner;\\n    uint16 feeBps;\\n    /**\\n     * How much below `amountOut` the user will accept\\n     */\\n    uint16 slippageBps;\\n    address recipient;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 amountIn;\\n    /**\\n     * The amount the user was quoted\\n     */\\n    uint256 amountOut;\\n    uint48 deadline;\\n    bytes commands;\\n  }\\n\\n  function warpLinkEngage(Params calldata params) external payable;\\n\\n  function warpLinkEngagePermit(\\n    Params calldata params,\\n    PermitParams calldata permit\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0x0eff4788d9f45d72b6a05f34f1e8236a6f9d76a4778396d9a53c66ec04ebf726\",\"license\":\"MIT\"},\"contracts/interfaces/external/IAllowanceTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IEIP712} from './IEIP712.sol';\\n\\n/// @title AllowanceTransfer\\n/// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface IAllowanceTransfer is IEIP712 {\\n  /// @notice Thrown when an allowance on a token has expired.\\n  /// @param deadline The timestamp at which the allowed amount is no longer valid\\n  error AllowanceExpired(uint256 deadline);\\n\\n  /// @notice Thrown when an allowance on a token has been depleted.\\n  /// @param amount The maximum amount allowed\\n  error InsufficientAllowance(uint256 amount);\\n\\n  /// @notice Thrown when too many nonces are invalidated.\\n  error ExcessiveInvalidation();\\n\\n  /// @notice Emits an event when the owner successfully invalidates an ordered nonce.\\n  event NonceInvalidation(\\n    address indexed owner,\\n    address indexed token,\\n    address indexed spender,\\n    uint48 newNonce,\\n    uint48 oldNonce\\n  );\\n\\n  /// @notice Emits an event when the owner successfully sets permissions on a token for the spender.\\n  event Approval(\\n    address indexed owner,\\n    address indexed token,\\n    address indexed spender,\\n    uint160 amount,\\n    uint48 expiration\\n  );\\n\\n  /// @notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\\n  event Permit(\\n    address indexed owner,\\n    address indexed token,\\n    address indexed spender,\\n    uint160 amount,\\n    uint48 expiration,\\n    uint48 nonce\\n  );\\n\\n  /// @notice Emits an event when the owner sets the allowance back to 0 with the lockdown function.\\n  event Lockdown(address indexed owner, address token, address spender);\\n\\n  /// @notice The permit data for a token\\n  struct PermitDetails {\\n    // ERC20 token address\\n    address token;\\n    // the maximum amount allowed to spend\\n    uint160 amount;\\n    // timestamp at which a spender's token allowances become invalid\\n    uint48 expiration;\\n    // an incrementing value indexed per owner,token,and spender for each signature\\n    uint48 nonce;\\n  }\\n\\n  /// @notice The permit message signed for a single token allownce\\n  struct PermitSingle {\\n    // the permit data for a single token alownce\\n    PermitDetails details;\\n    // address permissioned on the allowed tokens\\n    address spender;\\n    // deadline on the permit signature\\n    uint256 sigDeadline;\\n  }\\n\\n  /// @notice The permit message signed for multiple token allowances\\n  struct PermitBatch {\\n    // the permit data for multiple token allowances\\n    PermitDetails[] details;\\n    // address permissioned on the allowed tokens\\n    address spender;\\n    // deadline on the permit signature\\n    uint256 sigDeadline;\\n  }\\n\\n  /// @notice The saved permissions\\n  /// @dev This info is saved per owner, per token, per spender and all signed over in the permit message\\n  /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n  struct PackedAllowance {\\n    // amount allowed\\n    uint160 amount;\\n    // permission expiry\\n    uint48 expiration;\\n    // an incrementing value indexed per owner,token,and spender for each signature\\n    uint48 nonce;\\n  }\\n\\n  /// @notice A token spender pair.\\n  struct TokenSpenderPair {\\n    // the token the spender is approved\\n    address token;\\n    // the spender address\\n    address spender;\\n  }\\n\\n  /// @notice Details for a token transfer.\\n  struct AllowanceTransferDetails {\\n    // the owner of the token\\n    address from;\\n    // the recipient of the token\\n    address to;\\n    // the amount of the token\\n    uint160 amount;\\n    // the token to be transferred\\n    address token;\\n  }\\n\\n  /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\\n  /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\\n  /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\\n  function allowance(\\n    address user,\\n    address token,\\n    address spender\\n  ) external view returns (uint160 amount, uint48 expiration, uint48 nonce);\\n\\n  /// @notice Approves the spender to use up to amount of the specified token up until the expiration\\n  /// @param token The token to approve\\n  /// @param spender The spender address to approve\\n  /// @param amount The approved amount of the token\\n  /// @param expiration The timestamp at which the approval is no longer valid\\n  /// @dev The packed allowance also holds a nonce, which will stay unchanged in approve\\n  /// @dev Setting amount to type(uint160).max sets an unlimited approval\\n  function approve(address token, address spender, uint160 amount, uint48 expiration) external;\\n\\n  /// @notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\\n  /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n  /// @param owner The owner of the tokens being approved\\n  /// @param permitSingle Data signed over by the owner specifying the terms of approval\\n  /// @param signature The owner's signature over the permit data\\n  function permit(\\n    address owner,\\n    PermitSingle memory permitSingle,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\\n  /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n  /// @param owner The owner of the tokens being approved\\n  /// @param permitBatch Data signed over by the owner specifying the terms of approval\\n  /// @param signature The owner's signature over the permit data\\n  function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\\n\\n  /// @notice Transfer approved tokens from one address to another\\n  /// @param from The address to transfer from\\n  /// @param to The address of the recipient\\n  /// @param amount The amount of the token to transfer\\n  /// @param token The token address to transfer\\n  /// @dev Requires the from address to have approved at least the desired amount\\n  /// of tokens to msg.sender.\\n  function transferFrom(address from, address to, uint160 amount, address token) external;\\n\\n  /// @notice Transfer approved tokens in a batch\\n  /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\\n  /// @dev Requires the from addresses to have approved at least the desired amount\\n  /// of tokens to msg.sender.\\n  function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\\n\\n  /// @notice Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity\\n  /// by batch revoking approvals\\n  /// @param approvals Array of approvals to revoke.\\n  function lockdown(TokenSpenderPair[] calldata approvals) external;\\n\\n  /// @notice Invalidate nonces for a given (token, spender) pair\\n  /// @param token The token to invalidate nonces for\\n  /// @param spender The spender to invalidate nonces for\\n  /// @param newNonce The new nonce to set. Invalidates all nonces less than it.\\n  /// @dev Can't invalidate more than 2**16 nonces per transaction.\\n  function invalidateNonces(address token, address spender, uint48 newNonce) external;\\n}\\n\",\"keccak256\":\"0xbfddf3c6b671cc3c00dd342a9ee23612e0524103cf827a4cfd89c1ae0dc0309f\",\"license\":\"MIT\"},\"contracts/interfaces/external/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// Kind 1\\n// Example v0.2.4 tripool (stables)\\n// See https://etherscan.io/address/0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7\\ninterface ICurvePoolKind1 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function base_coins(uint256 index) external view returns (address);\\n\\n  function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable;\\n\\n  function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable;\\n}\\n\\n// Kind 2\\n// Example v0.2.8, Stableswap, v0.2.5 Curve GUSD Metapool\\n// See https://etherscan.io/address/0xdc24316b9ae028f1497c275eb9192a3ea0f67022\\ninterface ICurvePoolKind2 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function base_coins(uint256 index) external view returns (address);\\n\\n  // 0x3df02124\\n  function exchange(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n\\n  function exchange_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n}\\n\\n// Kind 3\\n// Example v0.3.0, \\\"# EUR/3crv pool where 3crv is _second_, not first\\\"\\n// See https://etherscan.io/address/0x5D0F47B32fDd343BfA74cE221808e2abE4A53827\\n// NOTE: This contract has an `exchange_underlying` with a receiver also\\ninterface ICurvePoolKind3 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function underlying_coins(uint256 index) external view returns (address);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    bool use_eth\\n  ) external payable returns (uint256);\\n\\n  function exchange_underlying(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n}\\n\\n// Kind 4, uint256s with no return value\\n// Example v0.2.15, \\\"Pool for USDT/BTC/ETH or similar\\\"\\n// See https://arbiscan.io/address/0x960ea3e3C7FB317332d990873d354E18d7645590#code\\ninterface ICurvePoolKind4 {\\n  function coins(uint256 index) external view returns (address);\\n\\n  function underlying_coins(uint256 index) external view returns (address);\\n\\n  function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external payable;\\n\\n  function exchange_underlying(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external payable;\\n}\\n\",\"keccak256\":\"0xa820ad027992cf16e3a71318c38b2f30ebaeb197c82f9d7fdc3dffd6928e98f5\",\"license\":\"MIT\"},\"contracts/interfaces/external/IEIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IEIP712 {\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb8fcd9ab837508adefbc619330151c4dc234a6738cdd08f4e108bfcc1908e5d8\",\"license\":\"MIT\"},\"contracts/interfaces/external/IPermit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ISignatureTransfer} from './ISignatureTransfer.sol';\\nimport {IAllowanceTransfer} from './IAllowanceTransfer.sol';\\n\\n/// @notice Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\\n/// @dev Users must approve Permit2 before calling any of the transfer functions.\\ninterface IPermit2 is ISignatureTransfer, IAllowanceTransfer {\\n  // IPermit2 unifies the two interfaces so users have maximal flexibility with their approval.\\n}\\n\",\"keccak256\":\"0x9ea8e6c589429d5edeb0c9bd091b3883536e36d947653fa7cc432bd3bcab2367\",\"license\":\"MIT\"},\"contracts/interfaces/external/ISignatureTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IEIP712} from './IEIP712.sol';\\n\\n/// @title SignatureTransfer\\n/// @notice Handles ERC20 token transfers through signature based actions\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface ISignatureTransfer is IEIP712 {\\n  /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\\n  /// @param maxAmount The maximum amount a spender can request to transfer\\n  error InvalidAmount(uint256 maxAmount);\\n\\n  /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\\n  /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\\n  error LengthMismatch();\\n\\n  /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\\n  event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\\n\\n  /// @notice The token and amount details for a transfer signed in the permit transfer signature\\n  struct TokenPermissions {\\n    // ERC20 token address\\n    address token;\\n    // the maximum amount that can be spent\\n    uint256 amount;\\n  }\\n\\n  /// @notice The signed permit message for a single token transfer\\n  struct PermitTransferFrom {\\n    TokenPermissions permitted;\\n    // a unique value for every token owner's signature to prevent signature replays\\n    uint256 nonce;\\n    // deadline on the permit signature\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Specifies the recipient address and amount for batched transfers.\\n  /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount.\\n  struct SignatureTransferDetails {\\n    // recipient address\\n    address to;\\n    // spender requested amount\\n    uint256 requestedAmount;\\n  }\\n\\n  /// @notice Used to reconstruct the signed permit message for multiple token transfers\\n  /// @dev Do not need to pass in spender address as it is required that it is msg.sender\\n  /// @dev Note that a user still signs over a spender address\\n  struct PermitBatchTransferFrom {\\n    // the tokens and corresponding amounts permitted for a transfer\\n    TokenPermissions[] permitted;\\n    // a unique value for every token owner's signature to prevent signature replays\\n    uint256 nonce;\\n    // deadline on the permit signature\\n    uint256 deadline;\\n  }\\n\\n  /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\\n  /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\\n  /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\\n  /// @dev It returns a uint256 bitmap\\n  /// @dev The index, or wordPosition is capped at type(uint248).max\\n  function nonceBitmap(address, uint256) external view returns (uint256);\\n\\n  /// @notice Transfers a token using a signed permit message\\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails The spender's requested transfer details for the permitted token\\n  /// @param signature The signature to verify\\n  function permitTransferFrom(\\n    PermitTransferFrom memory permit,\\n    SignatureTransferDetails calldata transferDetails,\\n    address owner,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Transfers a token using a signed permit message\\n  /// @notice Includes extra data provided by the caller to verify signature over\\n  /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails The spender's requested transfer details for the permitted token\\n  /// @param witness Extra data to include when checking the user signature\\n  /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n  /// @param signature The signature to verify\\n  function permitWitnessTransferFrom(\\n    PermitTransferFrom memory permit,\\n    SignatureTransferDetails calldata transferDetails,\\n    address owner,\\n    bytes32 witness,\\n    string calldata witnessTypeString,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Transfers multiple tokens using a signed permit message\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n  /// @param signature The signature to verify\\n  function permitTransferFrom(\\n    PermitBatchTransferFrom memory permit,\\n    SignatureTransferDetails[] calldata transferDetails,\\n    address owner,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Transfers multiple tokens using a signed permit message\\n  /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n  /// @notice Includes extra data provided by the caller to verify signature over\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails Specifies the recipient and requested amount for the token transfer\\n  /// @param witness Extra data to include when checking the user signature\\n  /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n  /// @param signature The signature to verify\\n  function permitWitnessTransferFrom(\\n    PermitBatchTransferFrom memory permit,\\n    SignatureTransferDetails[] calldata transferDetails,\\n    address owner,\\n    bytes32 witness,\\n    string calldata witnessTypeString,\\n    bytes calldata signature\\n  ) external;\\n\\n  /// @notice Invalidates the bits specified in mask for the bitmap at the word position\\n  /// @dev The wordPos is maxed at type(uint248).max\\n  /// @param wordPos A number to index the nonceBitmap at\\n  /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\\n  function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\\n}\\n\",\"keccak256\":\"0x6e8fc386e63b612a87ebb33c836457702127fc7b86e9498f2a6dc7dd36f5c6b3\",\"license\":\"MIT\"},\"contracts/interfaces/external/IStargateComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\nimport {IStargateRouter} from './IStargateRouter.sol';\\n\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IStargateComposer is IStargateRouter {\\n  function stargateRouter() external view returns (address);\\n}\\n\",\"keccak256\":\"0x91f0c36063f0c5b9f5a041ed146bb50850e504127cf6400e9250fcee665de984\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/external/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.6;\\n\\ninterface IStargateReceiver {\\n  function sgReceive(\\n    uint16 _srcChainId, // the remote chainId sending the tokens\\n    bytes memory _srcAddress, // the remote Bridge address\\n    uint256 _nonce,\\n    address _token, // the token contract on the local chain\\n    uint256 amountLD, // the qty of local _token contract tokens\\n    bytes memory payload\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7fd06c09139156a4f09a77eac28e453a1d2041a8cf01a108fc875c65192cb637\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/external/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IStargateRouter {\\n  struct lzTxObj {\\n    uint256 dstGasForCall;\\n    uint256 dstNativeAmount;\\n    bytes dstNativeAddr;\\n  }\\n\\n  function swap(\\n    uint16 _dstChainId,\\n    uint256 _srcPoolId,\\n    uint256 _dstPoolId,\\n    address payable _refundAddress,\\n    uint256 _amountLD,\\n    uint256 _minAmountLD,\\n    lzTxObj memory _lzTxParams,\\n    bytes calldata _to,\\n    bytes calldata _payload\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xfeaae75a5900328c68a630720e29a7c613ab3e628d93cbf432abd660083a29bf\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/external/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n  function getReserves()\\n    external\\n    view\\n    returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x9db3539ee014c7b82d3ef721a09c89efe134d0441b01df60dd61ef78afd8658e\"},\"contracts/interfaces/external/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapV3Pool {\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function liquidity() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xeb847b1091ccd93b6f7bd93622fec71a424740bc5820a1ef0abbcb07e0f70cc9\",\"license\":\"MIT\"},\"contracts/libraries/LibCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {ICurvePoolKind1, ICurvePoolKind2, ICurvePoolKind3, ICurvePoolKind4} from '../interfaces/external/ICurvePool.sol';\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibCurve\\n */\\nlibrary LibCurve {\\n  error UnhandledPoolKind();\\n\\n  function exchange(\\n    uint8 kind,\\n    bool underlying,\\n    address pool,\\n    uint256 eth,\\n    uint8 i,\\n    uint8 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    bool useEth\\n  ) internal {\\n    if (kind == 1) {\\n      if (underlying) {\\n        ICurvePoolKind1(pool).exchange_underlying{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      } else {\\n        ICurvePoolKind1(pool).exchange{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      }\\n    } else if (kind == 2) {\\n      if (underlying) {\\n        ICurvePoolKind2(pool).exchange_underlying{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      } else {\\n        ICurvePoolKind2(pool).exchange{value: eth}(\\n          int128(uint128(i)),\\n          int128(uint128(j)),\\n          dx,\\n          min_dy\\n        );\\n      }\\n    } else if (kind == 3) {\\n      if (underlying) {\\n        ICurvePoolKind3(pool).exchange_underlying{value: eth}(uint256(i), uint256(j), dx, min_dy);\\n      } else if (useEth) {\\n        ICurvePoolKind3(pool).exchange{value: eth}(uint256(i), uint256(j), dx, min_dy, true);\\n      } else {\\n        ICurvePoolKind3(pool).exchange(uint256(i), uint256(j), dx, min_dy);\\n      }\\n    } else if (kind == 4) {\\n      if (underlying) {\\n        revert UnhandledPoolKind();\\n      } else {\\n        ICurvePoolKind4(pool).exchange{value: eth}(uint256(i), uint256(j), dx, min_dy);\\n      }\\n    } else {\\n      revert UnhandledPoolKind();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x3800d83c9e2afba4b7baf4f4f5134d93c41b1100faedbc8b3989d0806e2e5003\",\"license\":\"MIT\"},\"contracts/libraries/LibStarVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibStarVault\\n */\\nlibrary LibStarVault {\\n  /**\\n   * The swap fee is over the maximum allowed\\n   */\\n  error FeeTooHigh(uint256 maxFeeBps);\\n\\n  event Fee(\\n    address indexed partner,\\n    address indexed token,\\n    uint256 partnerFee,\\n    uint256 protocolFee\\n  );\\n\\n  struct State {\\n    /**\\n     * Token balances per partner\\n     * Mapping: Partner -> token -> balance\\n     */\\n    mapping(address => mapping(address => uint256)) partnerBalances;\\n    /**\\n     * Total balances per token for all partners.\\n     * Mapping: token -> balance\\n     */\\n    mapping(address => uint256) partnerBalancesTotal;\\n  }\\n\\n  uint256 private constant MAX_FEE_BPS = 2_000;\\n\\n  function state() internal pure returns (State storage s) {\\n    /**\\n     * NOTE: Three storage slots used to store all partners addresses and partner tokens were\\n     * removed to save gas.\\n     */\\n    unchecked {\\n      uint256 storagePosition = uint256(keccak256('diamond.storage.LibStarVault')) + 3;\\n\\n      assembly {\\n        s.slot := storagePosition\\n      }\\n    }\\n  }\\n\\n  /**\\n   * By using a library function we ensure that the storage used by the library is whichever contract\\n   * is calling this function\\n   */\\n  function registerCollectedFee(\\n    address partner,\\n    address token,\\n    uint256 partnerFee,\\n    uint256 protocolFee\\n  ) internal {\\n    State storage s = state();\\n\\n    unchecked {\\n      s.partnerBalances[partner][token] += partnerFee;\\n      s.partnerBalancesTotal[token] += partnerFee;\\n    }\\n\\n    emit Fee(partner, token, partnerFee, protocolFee);\\n  }\\n\\n  function calculateAndRegisterFee(\\n    address partner,\\n    address token,\\n    uint256 feeBps,\\n    uint256 amountOutQuoted,\\n    uint256 amountOutActual\\n  ) internal returns (uint256 amountOutUser_) {\\n    if (feeBps > MAX_FEE_BPS) {\\n      revert FeeTooHigh(MAX_FEE_BPS);\\n    }\\n\\n    unchecked {\\n      uint256 feeTotal;\\n      uint256 feeBasis = amountOutActual;\\n\\n      if (amountOutActual > amountOutQuoted) {\\n        // Positive slippage\\n        feeTotal = amountOutActual - amountOutQuoted;\\n\\n        // Change the fee basis for use below\\n        feeBasis = amountOutQuoted;\\n      }\\n\\n      // Fee taken from actual\\n      feeTotal += (feeBasis * feeBps) / 10_000;\\n\\n      // If a partner is set, split the fee in half\\n      uint256 feePartner = partner == address(0) ? 0 : (feeTotal * 50) / 100;\\n      uint256 feeProtocol = feeTotal - feePartner;\\n\\n      if (feeProtocol > 0) {\\n        registerCollectedFee(partner, token, feePartner, feeProtocol);\\n      }\\n\\n      return amountOutActual - feeTotal;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x332a4a0e56d3a792a8a6e6ea929ee8c79a5a26de02445a73711228f3966ed948\",\"license\":\"MIT\"},\"contracts/libraries/LibUniV2Like.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IUniswapV2Pair} from 'contracts/interfaces/external/IUniswapV2Pair.sol';\\n\\nlibrary LibUniV2Like {\\n  function getAmountsOut(\\n    uint16[] memory poolFeesBps,\\n    uint256 amountIn,\\n    address[] memory tokens,\\n    address[] memory pools\\n  ) internal view returns (uint256[] memory amounts) {\\n    uint256 poolLength = pools.length;\\n\\n    amounts = new uint256[](tokens.length);\\n    amounts[0] = amountIn;\\n\\n    for (uint256 index; index < poolLength; ) {\\n      address token0 = tokens[index];\\n      address token1 = tokens[index + 1];\\n\\n      // For 30 bps, multiply by 9970\\n      uint256 feeFactor = 10_000 - poolFeesBps[index];\\n\\n      (uint256 reserveIn, uint256 reserveOut, ) = IUniswapV2Pair(pools[index]).getReserves();\\n\\n      if (token0 > token1) {\\n        (reserveIn, reserveOut) = (reserveOut, reserveIn);\\n      }\\n\\n      unchecked {\\n        amountIn =\\n          ((amountIn * feeFactor) * reserveOut) /\\n          ((reserveIn * 10_000) + (amountIn * feeFactor));\\n      }\\n\\n      // Recycling `amountIn`\\n      amounts[index + 1] = amountIn;\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x0448481d2a71459b54795c8fc2b9672898f66acbf24d9a15b4ca256622fb2bca\",\"license\":\"MIT\"},\"contracts/libraries/LibUniV3Like.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibUniV3Like\\n */\\nlibrary LibUniV3Like {\\n  error CallbackAlreadyActive();\\n  error CallbackStillActive();\\n\\n  bytes32 constant DIAMOND_STORAGE_SLOT = keccak256('diamond.storage.LibUniV3Like');\\n\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739 + 1;\\n\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342 - 1;\\n\\n  struct CallbackState {\\n    uint256 amount;\\n    address payer;\\n    address token;\\n    /**\\n     * Whether to use a permit transfer (0 or 1)\\n     */\\n    uint256 usePermit;\\n  }\\n\\n  struct State {\\n    // TODO: Does this help by using `MSTORE8`?\\n    uint8 isActive;\\n    /**\\n     * Transient storage variable used in the callback\\n     */\\n    CallbackState callback;\\n  }\\n\\n  function state() internal pure returns (State storage s) {\\n    bytes32 slot = DIAMOND_STORAGE_SLOT;\\n\\n    assembly {\\n      s.slot := slot\\n    }\\n  }\\n\\n  function beforeCallback(CallbackState memory callback) internal {\\n    if (state().isActive == 1) {\\n      revert CallbackAlreadyActive();\\n    }\\n\\n    state().isActive = 1;\\n    state().callback = callback;\\n  }\\n\\n  function afterCallback() internal view {\\n    if (state().isActive == 1) {\\n      // The field is expected to be zeroed out by the callback\\n      revert CallbackStillActive();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8206898e916bdfd9fe9353245bb9e7063ff75879e57e10b3565611040772237f\",\"license\":\"MIT\"},\"contracts/libraries/LibWarp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IWETH} from '@uniswap/v2-periphery/contracts/interfaces/IWETH.sol';\\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\\nimport {IStargateComposer} from '../interfaces/external/IStargateComposer.sol';\\nimport {IEnergyShield} from '../interfaces/IEnergyShield.sol';\\n\\n/**\\n * NOTE: Events and errors must be copied to ILibWarp\\n */\\nlibrary LibWarp {\\n  event Warp(\\n    address indexed partner,\\n    address indexed tokenIn,\\n    address indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  struct State {\\n    IWETH weth;\\n    IPermit2 permit2;\\n    IStargateComposer stargateComposer;\\n    uint256 unusedEnergyShieldLegacy;\\n    IEnergyShield energyShield;\\n  }\\n\\n  bytes32 constant DIAMOND_STORAGE_SLOT = keccak256('diamond.storage.LibWarp');\\n\\n  function state() internal pure returns (State storage s) {\\n    bytes32 slot = DIAMOND_STORAGE_SLOT;\\n\\n    assembly {\\n      s.slot := slot\\n    }\\n  }\\n\\n  function applySlippage(uint256 amount, uint16 slippage) internal pure returns (uint256) {\\n    return (amount * (10_000 - slippage)) / 10_000;\\n  }\\n}\\n\",\"keccak256\":\"0x599492ea1d6191d46bd5f04ca94622e6d94ba7343fbb385113c26c016ebeb87d\",\"license\":\"MIT\"},\"contracts/libraries/PermitParams.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nstruct PermitParams {\\n  uint256 nonce;\\n  bytes signature;\\n}\\n\",\"keccak256\":\"0x71ad794ae61c4443974102a0b88f4e43deb6fcb1e57c04e08c44f903bac7e1fc\",\"license\":\"MIT\"},\"contracts/libraries/Stream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * Stream reader\\n *\\n * Note that the stream position is always behind by one as per the\\n * original implementation\\n *\\n * See https://github.com/sushiswap/sushiswap/blob/master/protocols/route-processor/contracts/InputStream.sol\\n */\\nlibrary Stream {\\n  function createStream(bytes memory data) internal pure returns (uint256 stream) {\\n    assembly {\\n      // Get a pointer to the next free memory\\n      stream := mload(0x40)\\n\\n      // Move the free memory pointer forward by 64 bytes, since\\n      // this function will store 2 words (64 bytes) to memory.\\n      mstore(0x40, add(stream, 64))\\n\\n      // Store a pointer to the data in the first word of the stream\\n      mstore(stream, data)\\n\\n      // Store a pointer to the end of the data in the second word of the stream\\n      let length := mload(data)\\n      mstore(add(stream, 32), add(data, length))\\n    }\\n  }\\n\\n  function isNotEmpty(uint256 stream) internal pure returns (bool) {\\n    uint256 pos;\\n    uint256 finish;\\n    assembly {\\n      pos := mload(stream)\\n      finish := mload(add(stream, 32))\\n    }\\n    return pos < finish;\\n  }\\n\\n  function readUint8(uint256 stream) internal pure returns (uint8 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 1)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint16(uint256 stream) internal pure returns (uint16 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 2)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint24(uint256 stream) internal pure returns (uint24 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 3)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint32(uint256 stream) internal pure returns (uint32 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 4)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint48(uint256 stream) internal pure returns (uint48 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 6)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint160(uint256 stream) internal pure returns (uint160 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 20)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint256(uint256 stream) internal pure returns (uint256 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 32)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readBytes32(uint256 stream) internal pure returns (bytes32 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 32)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readAddress(uint256 stream) internal pure returns (address res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 20)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readBytes(uint256 stream) internal pure returns (bytes memory res) {\\n    assembly {\\n      let pos := mload(stream)\\n      res := add(pos, 32)\\n      let length := mload(res)\\n      mstore(stream, add(res, length))\\n    }\\n  }\\n\\n  function readAddresses(\\n    uint256 stream,\\n    uint256 count\\n  ) internal pure returns (address[] memory res) {\\n    res = new address[](count);\\n\\n    for (uint256 index; index < count; ) {\\n      res[index] = readAddress(stream);\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n\\n  function readUint16s(uint256 stream, uint256 count) internal pure returns (uint16[] memory res) {\\n    res = new uint16[](count);\\n\\n    for (uint256 index; index < count; ) {\\n      res[index] = readUint16(stream);\\n\\n      unchecked {\\n        index++;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1c4eccca88e3487c6b6663ce51b77ea778e91b801373223e998fe96e2fff1750\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615dbc80620000216000396000f3fe6080604052600436106100345760003560e01c8063a703fc4014610039578063ab8236f31461004e578063dcc455511461006e575b600080fd5b61004c610047366004615184565b610081565b005b34801561005a57600080fd5b5061004c610069366004615368565b6101eb565b61004c61007c366004615405565b6104d1565b600061008c836105d9565b6001610160820152336101208201819052346101a08301527f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e11546040805160e0810190915292935073ffffffffffffffffffffffffffffffffffffffff1691632b67b570919080606081018061010860a08b0160808c0161543a565b73ffffffffffffffffffffffffffffffffffffffff908116825260c08b01351660208201526040016101426101208b016101008c0161546b565b65ffffffffffff9081168252893516602091820152908252309082015260400161017461012089016101008a0161546b565b65ffffffffffff16905261018b6020870187615488565b6040518563ffffffff1660e01b81526004016101aa94939291906154f4565b600060405180830381600087803b1580156101c457600080fd5b505af11580156101d8573d6000803e3d6000fd5b505050506101e683826107f4565b505050565b7f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e106002015473ffffffffffffffffffffffffffffffffffffffff16331461025e576040517fcebf3f7700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601485015173ffffffffffffffffffffffffffffffffffffffff811630146102b2576040517fa9d0d13300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828060200190518101906102c89190615645565b608081015190915073ffffffffffffffffffffffffffffffffffffffff166102ef57600094505b3063dcc4555173ffffffffffffffffffffffffffffffffffffffff87161561031857600061031a565b855b604051806101400160405280856000015173ffffffffffffffffffffffffffffffffffffffff168152602001856020015161ffff168152602001856040015161ffff168152602001856060015173ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018560a0015173ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018560e00151815260200185610100015165ffffffffffff1681526020018561012001518152506040518363ffffffff1660e01b8152600401610406919061578d565b6000604051808303818588803b15801561041f57600080fd5b505af193505050508015610431575060015b6104c75773ffffffffffffffffffffffffffffffffffffffff85166104a057806060015173ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f1935050505015801561049a573d6000803e3d6000fd5b506104c7565b60608101516104c79073ffffffffffffffffffffffffffffffffffffffff87169086610b60565b5050505050505050565b6104e36101208201610100830161546b565b65ffffffffffff16421115610524576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061052f826105d9565b9050600061054360a084016080850161543a565b73ffffffffffffffffffffffffffffffffffffffff16036105bc578160c0013534101561059c576040517f1985c73500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105aa60c0830135346158bf565b6101a0820152306101208201526105cb565b33610120820152346101a08201525b6105d582826107f4565b5050565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a0810191909152604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101919091526106c8602084018461543a565b73ffffffffffffffffffffffffffffffffffffffff1681526106f060408401602085016158d2565b61ffff16602082015261070960608401604085016158d2565b61ffff1660c0820152610722608084016060850161543a565b73ffffffffffffffffffffffffffffffffffffffff16604082015261074d60a084016080850161543a565b73ffffffffffffffffffffffffffffffffffffffff1660608083019190915260c0840135608083015260e084013560a083015261078f908401604085016158d2565b61ffff1660c08201526107aa6101208401610100850161546b565b65ffffffffffff1660e082015260c08301356101008201526107d260a084016080850161543a565b73ffffffffffffffffffffffffffffffffffffffff1661014082015292915050565b6000610841610807610120850185615488565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c3492505050565b905061084d8183610c4e565b6101008101516101408201519193509061086d60c0860160a0870161543a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108d1576040517fae39073000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8115806108f957506108f660e08601356108f160608801604089016158d2565b610e57565b82105b15610930576040517f42301c2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836101800151600103610944575050505050565b610983610954602087018761543a565b61096460c0880160a0890161543a565b6109746040890160208a016158d2565b61ffff168860e0013586610e85565b9150816000036109bf576040517f42301c2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116610a35576109ea608086016060870161543a565b73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610a2f573d6000803e3d6000fd5b50610a66565b610a66610a48608087016060880161543a565b73ffffffffffffffffffffffffffffffffffffffff83169084610b60565b6101a084015115610aa4576101a0840151604051339180156108fc02916000818181858888f19350505050158015610aa2573d6000803e3d6000fd5b505b610ab460c0860160a0870161543a565b73ffffffffffffffffffffffffffffffffffffffff16610ada60a087016080880161543a565b73ffffffffffffffffffffffffffffffffffffffff16610afd602088018861543a565b73ffffffffffffffffffffffffffffffffffffffff167f1d81b4318b379c644b5546ae9cf37d861a5c7547bf3dae6cfaecffa12f8748f38860c0013586604051610b51929190918252602082015260400190565b60405180910390a45050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526101e69084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f3e565b604080518082019091528181528151909101602082015290565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101919091526000610cd18480516001018051915290565b60ff16905060005b81811015610e4b576000610cf38680516001018051915290565b60ff16905060018103610d1057610d098561104d565b9450610e38565b60028103610d2157610d098561121d565b60038103610d3357610d0986866113b2565b60048103610d4557610d0986866119a4565b60058103610d5757610d098686611d3b565b60068103610d6957610d0986866124d3565b60078103610d7b57610d098686612989565b60088103610d8d57610d098686612e4d565b60098103610de257610da06001846158bf565b8214610dd8576040517fe31c95e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d0986866131ae565b600a8103610df457610d0986866138ab565b600b8103610e0657610d098686613bad565b6040517f8ccd166700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5080610e43816158ef565b915050610cd9565b50829150505b92915050565b6000612710610e668382615927565b610e749061ffff1685615942565b610e7e9190615988565b9392505050565b60006107d0841115610ecc576040517f7b9314200000000000000000000000000000000000000000000000000000000081526107d060048201526024015b60405180910390fd5b60008284811115610ede575050828203835b612710818702049190910190600073ffffffffffffffffffffffffffffffffffffffff891615610f145760646032840204610f17565b60005b9050808303838214610f2f57610f2f8a8a8484614030565b50505090910395945050505050565b6000610fa0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166140f89092919063ffffffff16565b9050805160001480610fc1575080806020019051810190610fc191906159c3565b6101e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610ec3565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140808201839052610160820183905261018082018390526101a0820192909252908201517f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e109073ffffffffffffffffffffffffffffffffffffffff1615611132576040517f45369fbb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012083015173ffffffffffffffffffffffffffffffffffffffff163014611186576040517f32d40df100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805473ffffffffffffffffffffffffffffffffffffffff166101408401819052610100840151604080517fd0e30db0000000000000000000000000000000000000000000000000000000008152905163d0e30db0929160048082019260009290919082900301818588803b1580156111fd57600080fd5b505af1158015611211573d6000803e3d6000fd5b50959695505050505050565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101829052907f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e10805461014085015191925073ffffffffffffffffffffffffffffffffffffffff91821691161461130b576040517fb2ee070800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113148361410f565b80546101008401516040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691632e1a7d4d916113719160040190815260200190565b600060405180830381600087803b15801561138b57600080fd5b505af115801561139f573d6000803e3d6000fd5b5050600061014086015250929392505050565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081019190915261014082015173ffffffffffffffffffffffffffffffffffffffff16611475576040517fb10b947e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160808101825260008082526020820181905291810182905260608101919091528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1681528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1660208201528351600101805190855260ff1660011460408201528351600201805190855261ffff1660608201526101208301513073ffffffffffffffffffffffffffffffffffffffff9091160361156a57611565816020015184610100015185610140015173ffffffffffffffffffffffffffffffffffffffff16610b609092919063ffffffff16565b611698565b826101600151600103611650577f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e106001015461012084015160208301516101008601516101408701516040517f36c7851600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff948516600482015292841660248401529083166044830152821660648201529116906336c7851690608401600060405180830381600087803b15801561163357600080fd5b505af1158015611647573d6000803e3d6000fd5b50505050611690565b611690836101200151826020015185610100015186610140015173ffffffffffffffffffffffffffffffffffffffff16614123909392919063ffffffff16565b306101208401525b600080826020015173ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156116ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170e9190615a03565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150826040015161173e57905b606083015161010086015161ffff612710928303169184029082029081019083028161176c5761176c615959565b046101008701525082516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156117e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118069190615a53565b9050836020015173ffffffffffffffffffffffffffffffffffffffff1663022c0d9f856040015161183c5787610100015161183f565b60005b866040015161184f576000611856565b8861010001515b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152306044820152608060648201526000608482015260a401600060405180830381600087803b1580156118c057600080fd5b505af11580156118d4573d6000803e3d6000fd5b5050505061010086015184516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261197c9291849173ffffffffffffffffffffffffffffffffffffffff909116906370a08231906024015b602060405180830381865afa158015611953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119779190615a53565b614187565b5050905173ffffffffffffffffffffffffffffffffffffffff16610140840152509092915050565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101919091526000611a278480516001018051915290565b60ff1690506000836101000151905060006002831015611a73576040517f1d6beb5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060005b85811015611d06576000611a8e6001886158bf565b8210611a9a5785611acb565b612710611aad8b80516002018051915290565b61ffff168a6101000151611ac19190615942565b611acb9190615988565b905085811115611b07576040517f0f24c51700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b1181876158bf565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610120808201838152610140808401858152610160850186905261018085018690526101a08501959095526101008401879052918e015173ffffffffffffffffffffffffffffffffffffffff908116909152908d015116909152909650611bb88b82610c4e565b9050806101800151600103611bf9576040517fd35869f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600003611c165780610120015193508061014001519450611cea565b8473ffffffffffffffffffffffffffffffffffffffff1681610140015173ffffffffffffffffffffffffffffffffffffffff1614611c80576040517fd7af48f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1681610120015173ffffffffffffffffffffffffffffffffffffffff1614611cea576040517f51a769fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610100810151611cfa9087615a6c565b95505050600101611a79565b5073ffffffffffffffffffffffffffffffffffffffff9081166101208801521661014086015261010085015250919392505050565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a0810191909152611dd060405180606001604052806060815260200160608152602001606081525090565b6000611de28580516001018051915290565b60ff169050611df2816001615a6c565b67ffffffffffffffff811115611e0a57611e0a615202565b604051908082528060200260200182016040528015611e33578160200160208202803683370190505b508083526101408501518151909190600090611e5157611e51615a7f565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060005b81811015611eea57855160140180519087528351611ead836001615a6c565b81518110611ebd57611ebd615a7f565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101611e8e565b50611ef585826141cd565b6020830152611f04858261426f565b6040830152815180516000919083908110611f2157611f21615a7f565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbb9190615a53565b90506000611fdc8460400151876101000151866000015187602001516142f8565b90503073ffffffffffffffffffffffffffffffffffffffff1686610120015173ffffffffffffffffffffffffffffffffffffffff160361206e57612069846020015160008151811061203057612030615a7f565b602002602001015187610100015188610140015173ffffffffffffffffffffffffffffffffffffffff16610b609092919063ffffffff16565b6121d9565b856101600151600103612177577f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e11546101208701516020860151805173ffffffffffffffffffffffffffffffffffffffff909316926336c785169291906000906120da576120da615a7f565b60200260200101518961010001518a61014001516040518563ffffffff1660e01b8152600401612140949392919073ffffffffffffffffffffffffffffffffffffffff948516815292841660208401529083166040830152909116606082015260800190565b600060405180830381600087803b15801561215a57600080fd5b505af115801561216e573d6000803e3d6000fd5b505050506121d1565b6121d1866101200151856020015160008151811061219757612197615a7f565b602002602001015188610100015189610140015173ffffffffffffffffffffffffffffffffffffffff16614123909392919063ffffffff16565b306101208701525b60005b838110156123dd5760006121f1826001615a6c565b905060008660000151828151811061220b5761220b615a7f565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168760000151848151811061223f5761223f615a7f565b602002602001015173ffffffffffffffffffffffffffffffffffffffff161061226957600061226c565b60015b90506000600288600001515161228291906158bf565b841061228e57306122ad565b876020015183815181106122a4576122a4615a7f565b60200260200101515b9050876020015184815181106122c5576122c5615a7f565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663022c0d9f8361230c578685815181106122ff576122ff615a7f565b602002602001015161230f565b60005b8461231b576000612336565b87868151811061232d5761232d615a7f565b60200260200101515b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526004810192909252602482015273ffffffffffffffffffffffffffffffffffffffff84166044820152608060648201526000608482015260a401600060405180830381600087803b1580156123b657600080fd5b505af11580156123ca573d6000803e3d6000fd5b5050600190950194506121dc9350505050565b5080600182516123ed91906158bf565b815181106123fd576123fd615a7f565b60200260200101518661010001818152505061248d866101000151838660000151868151811061242f5761242f615a7f565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401611936565b83518051849081106124a1576124a1615a7f565b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff16610140870152509395945050505050565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101919091526040805160808101825260008082526020820181905291810182905260608101919091528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1681528351601401805190855273ffffffffffffffffffffffffffffffffffffffff9081166020830152610140840151166125ee576040517fb10b947e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa15801561265c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126809190615a53565b90506000826000015173ffffffffffffffffffffffffffffffffffffffff1685610140015173ffffffffffffffffffffffffffffffffffffffff161090506127276040518060800160405280876101000151815260200187610120015173ffffffffffffffffffffffffffffffffffffffff16815260200187610140015173ffffffffffffffffffffffffffffffffffffffff16815260200187610160015181525061452d565b801561280b5760208301516101008601516040517f128acb08000000000000000000000000000000000000000000000000000000008152306004820152831515602482015260448101919091526401000276a4606482015260a06084820152600060a482018190529173ffffffffffffffffffffffffffffffffffffffff169063128acb089060c40160408051808303816000875af11580156127ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f29190615aae565b915050806127ff90615ad2565b610100870152506128f3565b60208301516101008601516040517f128acb080000000000000000000000000000000000000000000000000000000081523060048201528315156024820152604481019190915273fffd8963efd1fc6a506488495d951d5263988d25606482015260a06084820152600060a482018190529173ffffffffffffffffffffffffffffffffffffffff169063128acb089060c40160408051808303816000875af11580156128bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128df9190615aae565b5090506128eb81615ad2565b610100870152505b6128fb6146bc565b61010085015183516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261295d9291859173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401611936565b50505173ffffffffffffffffffffffffffffffffffffffff166101408301525030610120820152919050565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a0810191909152612a1e60405180606001604052806060815260200160608152602001606081525090565b6000612a308580516001018051915290565b60ff169050612a3f85826141cd565b8252612a4b85826141cd565b60208301528151600090612a606001846158bf565b81518110612a7057612a70615a7f565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015612aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0f9190615a53565b905060005b83811015612de25760008115612b4e578551612b316001846158bf565b81518110612b4157612b41615a7f565b6020026020010151612b55565b8761014001515b905085600001518281518110612b6d57612b6d615a7f565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff9081166101408b01819052604080516080810182526101008d015181526101208d01518416948101949094529184169183018290526101608b015160608401521190612bd99061452d565b82600003612be957306101208a01525b600087602001518481518110612c0157612c01615a7f565b602002602001015190508115612ceb576101008a01516040517f128acb08000000000000000000000000000000000000000000000000000000008152306004820152831515602482015260448101919091526401000276a4606482015260a06084820152600060a482018190529073ffffffffffffffffffffffffffffffffffffffff83169063128acb089060c40160408051808303816000875af1158015612cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd29190615aae565b91505080612cdf90615ad2565b6101008c015250612dcf565b6101008a01516040517f128acb080000000000000000000000000000000000000000000000000000000081523060048201528315156024820152604481019190915273fffd8963efd1fc6a506488495d951d5263988d25606482015260a06084820152600060a482018190529073ffffffffffffffffffffffffffffffffffffffff83169063128acb089060c40160408051808303816000875af1158015612d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dbb9190615aae565b509050612dc781615ad2565b6101008c0152505b612dd76146bc565b505050600101612b14565b506101008601516040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152612e429190839073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401611936565b509395945050505050565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101919091526040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1681528351601401805190855273ffffffffffffffffffffffffffffffffffffffff1660208201528351600101805190855260ff1660408201528351600101805190855260ff1660608201528351600101805190855260ff1660808201528351600101805190855260ff1660011460a0820152610140830151815173ffffffffffffffffffffffffffffffffffffffff91821615911615612faf8561410f565b60008161304c5783516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015613023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130479190615a53565b61304e565b475b90508261308e5761308e846020015187610100015188610140015173ffffffffffffffffffffffffffffffffffffffff1661471c9092919063ffffffff16565b6130d384608001518560a001518660200151866130ac5760006130b3565b8961010001515b886040015189606001518c610100015160008b806130ce57508a5b61480c565b6000826131705784516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015613147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316b9190615a53565b613172565b475b855173ffffffffffffffffffffffffffffffffffffffff16610140890152905061319c82826158bf565b61010088015250949695505050505050565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101919091526132556040518060a00160405280600061ffff168152602001600081526020016000815260200160008152602001606081525090565b8351600201805190855261ffff1681528351600101805190855260ff1660208201528351600101805190855260ff1660408201528351600401805190855263ffffffff1660608201819052156133e2576040805161014080820183526000808352602080840182815284860183815260608087018581526080880186815260a0890187905260c0808a0188905260e08a018890526101008a01979097526101208901929092528b5173ffffffffffffffffffffffffffffffffffffffff9081168952948c015161ffff908116909452948b0151909216905294880151811690915290860151169091528451601401805190865273ffffffffffffffffffffffffffffffffffffffff1660a08201528451602001805190865260e08281019190915284015165ffffffffffff166101008201528451602080820180519092010186526101208201526040516133ad90829060200161578d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526080830152505b6133f48360a001518460c00151610e57565b8361010001511015613432576040517f42301c2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826060015173ffffffffffffffffffffffffffffffffffffffff1683610140015173ffffffffffffffffffffffffffffffffffffffff16146135435782610140015173ffffffffffffffffffffffffffffffffffffffff16836060015173ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff167f1d81b4318b379c644b5546ae9cf37d861a5c7547bf3dae6cfaecffa12f8748f38660800151876101000151604051613503929190918252602082015260400190565b60405180910390a4806080015151600003613543578251610140840151602085015161010086015161353c93929161ffff169080610e85565b6101008401525b7f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e125473ffffffffffffffffffffffffffffffffffffffff166135848461410f565b61014084015173ffffffffffffffffffffffffffffffffffffffff1615613653576136538260800151516000146135bb578161362a565b8173ffffffffffffffffffffffffffffffffffffffff1663a9e56f3c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362a9190615b0a565b61010086015161014087015173ffffffffffffffffffffffffffffffffffffffff16919061471c565b60016101808501526080820151511561366c57806136db565b8073ffffffffffffffffffffffffffffffffffffffff1663a9e56f3c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136db9190615b0a565b73ffffffffffffffffffffffffffffffffffffffff16639fbf10fc600073ffffffffffffffffffffffffffffffffffffffff1686610140015173ffffffffffffffffffffffffffffffffffffffff161461373a57856101a00151613750565b856101a001518661010001516137509190615a6c565b8451602086015160408701516101008a015160c08b0151309190613775908290610e57565b60405180606001604052808c606001518152602001600081526020016040518060200160405280600081525081525060008c6080015151116137bb578d604001516137bd565b305b6040516020016137f8919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905260808e01517fffffffff0000000000000000000000000000000000000000000000000000000060e08d901b1683526138689998979695949392600401615b27565b6000604051808303818588803b15801561388157600080fd5b505af1158015613895573d6000803e3d6000fd5b505060006101a088015250949695505050505050565b604080516101c081018252600080825260208083018290528284018290526060808401839052608080850184905260a080860185905260c0860185905260e08601859052610100860185905261012086018590526101408601859052610160860185905261018086018590526101a08601859052865190810187528481529283018490529482018190528101829052928301528351601401805190855290919073ffffffffffffffffffffffffffffffffffffffff1681528351601401805190855273ffffffffffffffffffffffffffffffffffffffff16602082015260006139a1858051602080820180519092010190915290565b905060006139b58680516002018051915290565b61ffff16905080156139cf57610100850151828201602001525b604083018290528551600101805190875260ff1660019081146060850152865101805190875260ff16600114608084015260007f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e1060040154606085015173ffffffffffffffffffffffffffffffffffffffff9091169150613a60908790613a565782614d08565b8560200151614d08565b7f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e145461014087015173ffffffffffffffffffffffffffffffffffffffff91821691635321fbe5911615613ab4576000613abb565b8761010001515b6040518060800160405280886000015173ffffffffffffffffffffffffffffffffffffffff168152602001886020015173ffffffffffffffffffffffffffffffffffffffff16815260200188604001518152602001886080015115158152506040518363ffffffff1660e01b8152600401613b369190615bd3565b60206040518083038185885af1158015613b54573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190613b799190615a53565b6101008701525050905173ffffffffffffffffffffffffffffffffffffffff16610140840152505030610120820152919050565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a0810191909152613c786040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081526020016000151581526020016000151581525090565b8351601401805190855273ffffffffffffffffffffffffffffffffffffffff1681526000613cac8580516001018051915290565b60ff1690508067ffffffffffffffff811115613cca57613cca615202565b604051908082528060200260200182016040528015613cf3578160200160208202803683370190505b50602083015260005b81811015613d51578551601401805190875283602001518281518110613d2457613d24615a7f565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101613cfc565b508451602080820180519092010186526001820367ffffffffffffffff811115613d7d57613d7d615202565b604051908082528060200260200182016040528015613da6578160200160208202803683370190505b50606084015260005b60018303811015613df1578651600201805190885261ffff1684606001518281518110613dde57613dde615a7f565b6020908102919091010152600101613daf565b506000613e048780516001018051915290565b60ff16905060005b81811015613e42576000613e268980516002018051915290565b61010089015161ffff9190911685016020015250600101613e0c565b50604084018290528651600101805190885260ff16600190811460a0860152875101805190885260ff1660011460c085015260007f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e106004015460a086015173ffffffffffffffffffffffffffffffffffffffff9091169150613eee908890613eca5782614d08565b8660200151600081518110613ee157613ee1615a7f565b6020026020010151614d08565b7f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e145461014088015173ffffffffffffffffffffffffffffffffffffffff9182169163616afc15911615613f42576000613f49565b8861010001515b6040518060a00160405280896000015173ffffffffffffffffffffffffffffffffffffffff1681526020018960200151815260200189604001518152602001896060015181526020018960c0015115158152506040518363ffffffff1660e01b8152600401613fb89190615c70565b60206040518083038185885af1158015613fd6573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190613ffb9190615a53565b6101008801525050915173ffffffffffffffffffffffffffffffffffffffff1661014085015250503061012083015250919050565b73ffffffffffffffffffffffffffffffffffffffff84811660008181527f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc90602081815260408084209589168085529582528084208054890190557f77fbd1c38a5ead50a5764a860fef6b91e5432a95f91228e67197edaf911cfc9182529283902080548801905582518781529081018690528251919493927f3d2a5b5aa3c9e4a41eed8ae2e9e470c5cfb96fa51eb0935c607c0fd8ec3f3f5792918290030190a35050505050565b60606141078484600085614eb2565b949350505050565b6141198130614d08565b3061012090910152565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526141819085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610bb2565b50505050565b81811080614196575082820181105b156101e6576040517f946beb5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608167ffffffffffffffff8111156141e8576141e8615202565b604051908082528060200260200182016040528015614211578160200160208202803683370190505b50905060005b82811015614268578351601401805190855282828151811061423b5761423b615a7f565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101614217565b5092915050565b60608167ffffffffffffffff81111561428a5761428a615202565b6040519080825280602002602001820160405280156142b3578160200160208202803683370190505b50905060005b8281101561426857835160020180519085528282815181106142dd576142dd615a7f565b61ffff909216602092830291909101909101526001016142b9565b805182516060919067ffffffffffffffff81111561431857614318615202565b604051908082528060200260200182016040528015614341578160200160208202803683370190505b509150848260008151811061435857614358615a7f565b60200260200101818152505060005b8181101561452357600085828151811061438357614383615a7f565b6020026020010151905060008683600161439d9190615a6c565b815181106143ad576143ad615a7f565b6020026020010151905060008984815181106143cb576143cb615a7f565b60200260200101516127106143e09190615927565b61ffff1690506000808886815181106143fb576143fb615a7f565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561444d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144719190615a03565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1611156144cc57905b828b0282612710020181848d0202816144e7576144e7615959565b049a508a886144f7886001615a6c565b8151811061450757614507615a7f565b6020908102919091010152505060019093019250614367915050565b5050949350505050565b7f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7a5460ff1660010361458b576040517f65d4e04900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580517f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7b5560208101517f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7c80547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff9384161790915560408301517f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7d80549092169216919091179055606001517f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7e55565b7f3029b773e586da235d6a0709bacd2cb14a2e6562f997f3c8684513a487bcbf7a5460ff1660010361471a576040517f129c8cdb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526147a88482614fcb565b6141815760405173ffffffffffffffffffffffffffffffffffffffff84166024820152600060448201526148029085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401610bb2565b6141818482610f3e565b8860ff1660010361493a5787156148c5576040517fa6417ed600000000000000000000000000000000000000000000000000000000815260ff808716600f90810b6004840152908616900b6024820152604481018490526064810183905273ffffffffffffffffffffffffffffffffffffffff88169063a6417ed69088906084015b6000604051808303818588803b1580156148a757600080fd5b505af11580156148bb573d6000803e3d6000fd5b5050505050614cfd565b6040517f3df0212400000000000000000000000000000000000000000000000000000000815260ff808716600f90810b6004840152908616900b6024820152604481018490526064810183905273ffffffffffffffffffffffffffffffffffffffff881690633df0212490889060840161488e565b8860ff16600203614a7a578715614a05576040517fa6417ed600000000000000000000000000000000000000000000000000000000815260ff808716600f90810b6004840152908616900b6024820152604481018490526064810183905273ffffffffffffffffffffffffffffffffffffffff88169063a6417ed69088906084015b60206040518083038185885af11580156149da573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906149ff9190615a53565b50614cfd565b6040517f3df0212400000000000000000000000000000000000000000000000000000000815260ff808716600f90810b6004840152908616900b6024820152604481018490526064810183905273ffffffffffffffffffffffffffffffffffffffff881690633df021249088906084016149bc565b8860ff16600303614c1b578715614af8576040517f65b2489b00000000000000000000000000000000000000000000000000000000815260ff808716600483015285166024820152604481018490526064810183905273ffffffffffffffffffffffffffffffffffffffff8816906365b2489b9088906084016149bc565b8015614b72576040517f394747c500000000000000000000000000000000000000000000000000000000815260ff80871660048301528516602482015260448101849052606481018390526001608482015273ffffffffffffffffffffffffffffffffffffffff88169063394747c590889060a4016149bc565b6040517f5b41b90800000000000000000000000000000000000000000000000000000000815260ff868116600483015285166024820152604481018490526064810183905273ffffffffffffffffffffffffffffffffffffffff881690635b41b908906084016020604051808303816000875af1158015614bf7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149ff9190615a53565b8860ff16600403614ccb578715614c5e576040517ff1c43ede00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f5b41b90800000000000000000000000000000000000000000000000000000000815260ff808716600483015285166024820152604481018490526064810183905273ffffffffffffffffffffffffffffffffffffffff881690635b41b90890889060840161488e565b6040517ff1c43ede00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050565b3073ffffffffffffffffffffffffffffffffffffffff1682610120015173ffffffffffffffffffffffffffffffffffffffff1603614d965761014082015173ffffffffffffffffffffffffffffffffffffffff16156105d5576105d58183610100015184610140015173ffffffffffffffffffffffffffffffffffffffff16610b609092919063ffffffff16565b816101600151600103614e76577f1c1cf3c8827d48db80e17913589584c81d7f8da7f2100c9a87a7bf64829a0e10600101546101208301516101008401516101408501516040517f36c7851600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015285841660248201529183166044830152821660648201529116906336c7851690608401600060405180830381600087803b158015614e5a57600080fd5b505af1158015614e6e573d6000803e3d6000fd5b505050505050565b6105d58261012001518284610100015185610140015173ffffffffffffffffffffffffffffffffffffffff16614123909392919063ffffffff16565b606082471015614f44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610ec3565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051614f6d9190615d57565b60006040518083038185875af1925050503d8060008114614faa576040519150601f19603f3d011682016040523d82523d6000602084013e614faf565b606091505b5091509150614fc08783838761508c565b979650505050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051614ff59190615d57565b6000604051808303816000865af19150503d8060008114615032576040519150601f19603f3d011682016040523d82523d6000602084013e615037565b606091505b509150915081801561506157508051158061506157508080602001905181019061506191906159c3565b8015615083575073ffffffffffffffffffffffffffffffffffffffff85163b15155b95945050505050565b6060831561512257825160000361511b5773ffffffffffffffffffffffffffffffffffffffff85163b61511b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ec3565b5081614107565b61410783838151156151375781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec39190615d73565b6000610140828403121561517e57600080fd5b50919050565b6000806040838503121561519757600080fd5b823567ffffffffffffffff808211156151af57600080fd5b6151bb8683870161516b565b935060208501359150808211156151d157600080fd5b508301604081860312156151e457600080fd5b809150509250929050565b61ffff811681146151ff57600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171561525557615255615202565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156152a2576152a2615202565b604052919050565b600067ffffffffffffffff8211156152c4576152c4615202565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261530157600080fd5b813561531461530f826152aa565b61525b565b81815284602083860101111561532957600080fd5b816020850160208301376000918101602001919091529392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146151ff57600080fd5b60008060008060008060c0878903121561538157600080fd5b863561538c816151ef565b9550602087013567ffffffffffffffff808211156153a957600080fd5b6153b58a838b016152f0565b965060408901359550606089013591506153ce82615346565b9093506080880135925060a088013590808211156153eb57600080fd5b506153f889828a016152f0565b9150509295509295509295565b60006020828403121561541757600080fd5b813567ffffffffffffffff81111561542e57600080fd5b6141078482850161516b565b60006020828403121561544c57600080fd5b8135610e7e81615346565b65ffffffffffff811681146151ff57600080fd5b60006020828403121561547d57600080fd5b8135610e7e81615457565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126154bd57600080fd5b83018035915067ffffffffffffffff8211156154d857600080fd5b6020019150368190038213156154ed57600080fd5b9250929050565b600061010073ffffffffffffffffffffffffffffffffffffffff80881684528651818151166020860152816020820151166040860152604081015165ffffffffffff80821660608801528060608401511660808801525050508060208801511660a085015250604086015160c08401528060e08401528381840152506101208385828501376000838501820152601f9093017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909101909101949350505050565b80516155c181615346565b919050565b80516155c1816151ef565b80516155c181615457565b60005b838110156155f75781810151838201526020016155df565b50506000910152565b600082601f83011261561157600080fd5b815161561f61530f826152aa565b81815284602083860101111561563457600080fd5b6141078260208301602087016155dc565b60006020828403121561565757600080fd5b815167ffffffffffffffff8082111561566f57600080fd5b90830190610140828603121561568457600080fd5b61568c615231565b615695836155b6565b81526156a3602084016155c6565b60208201526156b4604084016155c6565b60408201526156c5606084016155b6565b60608201526156d6608084016155b6565b60808201526156e760a084016155b6565b60a082015260c083015160c082015260e083015160e082015261010061570e8185016155d1565b90820152610120838101518381111561572657600080fd5b61573288828701615600565b918301919091525095945050505050565b6000815180845261575b8160208601602086016155dc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526157b460208201835173ffffffffffffffffffffffffffffffffffffffff169052565b600060208301516157cb604084018261ffff169052565b50604083015161ffff8116606084015250606083015173ffffffffffffffffffffffffffffffffffffffff8116608084015250608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c083015160e083015260e08301516101008181850152808501519150506101206158768185018365ffffffffffff169052565b840151610140848101529050614107610160840182615743565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610e5157610e51615890565b6000602082840312156158e457600080fd5b8135610e7e816151ef565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361592057615920615890565b5060010190565b61ffff82811682821603908082111561426857614268615890565b8082028115828204841417610e5157610e51615890565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826159be577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000602082840312156159d557600080fd5b81518015158114610e7e57600080fd5b80516dffffffffffffffffffffffffffff811681146155c157600080fd5b600080600060608486031215615a1857600080fd5b615a21846159e5565b9250615a2f602085016159e5565b9150604084015163ffffffff81168114615a4857600080fd5b809150509250925092565b600060208284031215615a6557600080fd5b5051919050565b80820180821115610e5157610e51615890565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008060408385031215615ac157600080fd5b505080516020909101519092909150565b60007f80000000000000000000000000000000000000000000000000000000000000008203615b0357615b03615890565b5060000390565b600060208284031215615b1c57600080fd5b8151610e7e81615346565b600061012061ffff8c1683528a602084015289604084015273ffffffffffffffffffffffffffffffffffffffff891660608401528760808401528660a08401528060c084015285518184015250602085015161014083015260408501516060610160840152615b9a610180840182615743565b905082810360e0840152615bae8186615743565b9050828103610100840152615bc38185615743565b9c9b505050505050505050505050565b60208152600073ffffffffffffffffffffffffffffffffffffffff80845116602084015280602085015116604084015250604083015160806060840152615c1d60a0840182615743565b90506060840151151560808401528091505092915050565b600081518084526020808501945080840160005b83811015615c6557815187529582019590820190600101615c49565b509495945050505050565b6000602080835260c0830173ffffffffffffffffffffffffffffffffffffffff80865116838601528286015160a0604087015282815180855260e0880191508583019450600092505b80831015615cdb57845184168252938501936001929092019190850190615cb9565b50604088015194507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0935083878203016060880152615d1a8186615743565b9450505050606085015181858403016080860152615d388382615c35565b925050506080840151615d4f60a085018215159052565b509392505050565b60008251615d698184602087016155dc565b9190910192915050565b602081526000610e7e602083018461574356fea264697066735822122015fbb33e2577e970c080d42d7088bf5b11b794d30dcae7d0a0858033f1fec35c64736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FeeTooHigh(uint256)": [
        {
          "notice": "The swap fee is over the maximum allowed"
        },
        {
          "notice": "The swap fee is over the maximum allowed"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "sgReceive(uint16,bytes,uint256,address,uint256,bytes)": {
        "notice": "Cross-chain callback from Stargate The tokens have already been received by this contract, `t.payer` is set to this contract before `sgReceive` is called by the router. The `_nonce` field is not checked since it's assumed that LayerZero will not deliver the same message more than once. The Stargate composer is trusted, meaning `_token` and `amountLD` is not verified. Should the Stargate composer be compromised, an attacker can drain this contract. If the payload can not be decoded, tokens are left in this contract. If execution runs out of gas, tokens are left in this contract. If an error occurs during engage, such as insufficient output amount, tokens are refunded to the recipient. See https://stargateprotocol.gitbook.io/stargate/interfaces/evm-solidity-interfaces/istargatereceiver.sol"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}